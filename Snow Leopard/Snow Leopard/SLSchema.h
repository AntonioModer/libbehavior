#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=2.0.50727.1432.
// 
namespace test {
    using namespace System;
    ref class NewDataSet;
    
    
    /// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
    System::Serializable, 
    System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::ComponentModel::ToolboxItem(true), 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
    System::Xml::Serialization::XmlRootAttribute(L"NewDataSet"), 
    System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
    public ref class NewDataSet : public ::System::Data::DataSet {
        public : ref class WorldStateDataTable;
        public : ref class EntityDataTable;
        public : ref class BaseImageDataTable;
        public : ref class SocketDataTable;
        public : ref class Beam_WeaponDataTable;
        public : ref class Gun_WeaponDataTable;
        public : ref class Missile_WeaponDataTable;
        public : ref class DeviceDataTable;
        public : ref class EngineDataTable;
        public : ref class PowerplantDataTable;
        public : ref class WorldStateRow;
        public : ref class EntityRow;
        public : ref class BaseImageRow;
        public : ref class SocketRow;
        public : ref class Beam_WeaponRow;
        public : ref class Gun_WeaponRow;
        public : ref class Missile_WeaponRow;
        public : ref class DeviceRow;
        public : ref class EngineRow;
        public : ref class PowerplantRow;
        public : ref class WorldStateRowChangeEvent;
        public : ref class EntityRowChangeEvent;
        public : ref class BaseImageRowChangeEvent;
        public : ref class SocketRowChangeEvent;
        public : ref class Beam_WeaponRowChangeEvent;
        public : ref class Gun_WeaponRowChangeEvent;
        public : ref class Missile_WeaponRowChangeEvent;
        public : ref class DeviceRowChangeEvent;
        public : ref class EngineRowChangeEvent;
        public : ref class PowerplantRowChangeEvent;
        
        private: test::NewDataSet::WorldStateDataTable^  tableWorldState;
        
        private: test::NewDataSet::EntityDataTable^  tableEntity;
        
        private: test::NewDataSet::BaseImageDataTable^  tableBaseImage;
        
        private: test::NewDataSet::SocketDataTable^  tableSocket;
        
        private: test::NewDataSet::Beam_WeaponDataTable^  tableBeam_Weapon;
        
        private: test::NewDataSet::Gun_WeaponDataTable^  tableGun_Weapon;
        
        private: test::NewDataSet::Missile_WeaponDataTable^  tableMissile_Weapon;
        
        private: test::NewDataSet::DeviceDataTable^  tableDevice;
        
        private: test::NewDataSet::EngineDataTable^  tableEngine;
        
        private: test::NewDataSet::PowerplantDataTable^  tablePowerplant;
        
        private: ::System::Data::DataRelation^  relationWorldState_Entity;
        
        private: ::System::Data::DataRelation^  relationEntity_BaseImage;
        
        private: ::System::Data::DataRelation^  relationEntity_Socket;
        
        private: ::System::Data::DataRelation^  relationSocket_Beam_Weapon;
        
        private: ::System::Data::DataRelation^  relationSocket_Gun_Weapon;
        
        private: ::System::Data::DataRelation^  relationSocket_Missile_Weapon;
        
        private: ::System::Data::DataRelation^  relationSocket_Device;
        
        private: ::System::Data::DataRelation^  relationSocket_Engine;
        
        private: ::System::Data::DataRelation^  relationSocket_Powerplant;
        
        private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
        
        public : delegate System::Void WorldStateRowChangeEventHandler(::System::Object^  sender, test::NewDataSet::WorldStateRowChangeEvent^  e);
        
        public : delegate System::Void EntityRowChangeEventHandler(::System::Object^  sender, test::NewDataSet::EntityRowChangeEvent^  e);
        
        public : delegate System::Void BaseImageRowChangeEventHandler(::System::Object^  sender, test::NewDataSet::BaseImageRowChangeEvent^  e);
        
        public : delegate System::Void SocketRowChangeEventHandler(::System::Object^  sender, test::NewDataSet::SocketRowChangeEvent^  e);
        
        public : delegate System::Void Beam_WeaponRowChangeEventHandler(::System::Object^  sender, test::NewDataSet::Beam_WeaponRowChangeEvent^  e);
        
        public : delegate System::Void Gun_WeaponRowChangeEventHandler(::System::Object^  sender, test::NewDataSet::Gun_WeaponRowChangeEvent^  e);
        
        public : delegate System::Void Missile_WeaponRowChangeEventHandler(::System::Object^  sender, test::NewDataSet::Missile_WeaponRowChangeEvent^  e);
        
        public : delegate System::Void DeviceRowChangeEventHandler(::System::Object^  sender, test::NewDataSet::DeviceRowChangeEvent^  e);
        
        public : delegate System::Void EngineRowChangeEventHandler(::System::Object^  sender, test::NewDataSet::EngineRowChangeEvent^  e);
        
        public : delegate System::Void PowerplantRowChangeEventHandler(::System::Object^  sender, test::NewDataSet::PowerplantRowChangeEvent^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet();
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property test::NewDataSet::WorldStateDataTable^  WorldState {
            test::NewDataSet::WorldStateDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property test::NewDataSet::EntityDataTable^  Entity {
            test::NewDataSet::EntityDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property test::NewDataSet::BaseImageDataTable^  BaseImage {
            test::NewDataSet::BaseImageDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property test::NewDataSet::SocketDataTable^  Socket {
            test::NewDataSet::SocketDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property test::NewDataSet::Beam_WeaponDataTable^  Beam_Weapon {
            test::NewDataSet::Beam_WeaponDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property test::NewDataSet::Gun_WeaponDataTable^  Gun_Weapon {
            test::NewDataSet::Gun_WeaponDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property test::NewDataSet::Missile_WeaponDataTable^  Missile_Weapon {
            test::NewDataSet::Missile_WeaponDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property test::NewDataSet::DeviceDataTable^  Device {
            test::NewDataSet::DeviceDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property test::NewDataSet::EngineDataTable^  Engine {
            test::NewDataSet::EngineDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property test::NewDataSet::PowerplantDataTable^  Powerplant {
            test::NewDataSet::PowerplantDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::BrowsableAttribute(true), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
        virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
            ::System::Data::SchemaSerializationMode get() override;
            System::Void set(::System::Data::SchemaSerializationMode value) override;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataTableCollection^  Tables {
            ::System::Data::DataTableCollection^  get() new;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataRelationCollection^  Relations {
            ::System::Data::DataRelationCollection^  get() new;
        }
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void InitializeDerivedDataSet() override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataSet^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Boolean ShouldSerializeTables() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Boolean ShouldSerializeRelations() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars();
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars(::System::Boolean initTable);
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitClass();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeWorldState();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeEntity();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeBaseImage();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeSocket();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeBeam_Weapon();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeGun_Weapon();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeMissile_Weapon();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeDevice();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeEngine();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializePowerplant();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class WorldStateDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columndescription;
            
            private: ::System::Data::DataColumn^  columnid;
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columntime;
            
            private: ::System::Data::DataColumn^  columnCoordinateSizeX;
            
            private: ::System::Data::DataColumn^  columnCoordinateSizeY;
            
            private: ::System::Data::DataColumn^  columnWorldState_Id;
            
            public: event test::NewDataSet::WorldStateRowChangeEventHandler^  WorldStateRowChanging;
            
            public: event test::NewDataSet::WorldStateRowChangeEventHandler^  WorldStateRowChanged;
            
            public: event test::NewDataSet::WorldStateRowChangeEventHandler^  WorldStateRowDeleting;
            
            public: event test::NewDataSet::WorldStateRowChangeEventHandler^  WorldStateRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            WorldStateDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            WorldStateDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            WorldStateDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  descriptionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  idColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  timeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  CoordinateSizeXColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  CoordinateSizeYColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  WorldState_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property test::NewDataSet::WorldStateRow^  default [::System::Int32 ] {
                test::NewDataSet::WorldStateRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddWorldStateRow(test::NewDataSet::WorldStateRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            test::NewDataSet::WorldStateRow^  AddWorldStateRow(
                        System::String^  description, 
                        System::String^  id, 
                        System::String^  name, 
                        System::Int64 time, 
                        System::Double CoordinateSizeX, 
                        System::Double CoordinateSizeY);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            test::NewDataSet::WorldStateRow^  NewWorldStateRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveWorldStateRow(test::NewDataSet::WorldStateRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class EntityDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columndescription;
            
            private: ::System::Data::DataColumn^  columnid;
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnxPosition;
            
            private: ::System::Data::DataColumn^  columnyPosition;
            
            private: ::System::Data::DataColumn^  columnmovementHeading;
            
            private: ::System::Data::DataColumn^  columnmovementSpeed;
            
            private: ::System::Data::DataColumn^  columnaccelerationMagnitude;
            
            private: ::System::Data::DataColumn^  columnaccelerationHeading;
            
            private: ::System::Data::DataColumn^  columnisPlayer;
            
            private: ::System::Data::DataColumn^  columnfaction;
            
            private: ::System::Data::DataColumn^  columnusesPhysics;
            
            private: ::System::Data::DataColumn^  columnEntity_Id;
            
            private: ::System::Data::DataColumn^  columnWorldState_Id;
            
            public: event test::NewDataSet::EntityRowChangeEventHandler^  EntityRowChanging;
            
            public: event test::NewDataSet::EntityRowChangeEventHandler^  EntityRowChanged;
            
            public: event test::NewDataSet::EntityRowChangeEventHandler^  EntityRowDeleting;
            
            public: event test::NewDataSet::EntityRowChangeEventHandler^  EntityRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            EntityDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            EntityDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            EntityDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  descriptionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  idColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  xPositionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  yPositionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  movementHeadingColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  movementSpeedColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  accelerationMagnitudeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  accelerationHeadingColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  isPlayerColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  factionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  usesPhysicsColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  Entity_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  WorldState_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property test::NewDataSet::EntityRow^  default [::System::Int32 ] {
                test::NewDataSet::EntityRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddEntityRow(test::NewDataSet::EntityRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            test::NewDataSet::EntityRow^  AddEntityRow(
                        System::String^  description, 
                        System::String^  id, 
                        System::String^  name, 
                        System::Double xPosition, 
                        System::Double yPosition, 
                        System::Int64 movementHeading, 
                        System::Int64 movementSpeed, 
                        System::Int64 accelerationMagnitude, 
                        System::Int64 accelerationHeading, 
                        System::Boolean isPlayer, 
                        System::String^  faction, 
                        System::Boolean usesPhysics, 
                        test::NewDataSet::WorldStateRow^  parentWorldStateRowByWorldState_Entity);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            test::NewDataSet::EntityRow^  NewEntityRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveEntityRow(test::NewDataSet::EntityRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class BaseImageDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columndescription;
            
            private: ::System::Data::DataColumn^  columnid;
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnpictureSource;
            
            private: ::System::Data::DataColumn^  columnscale;
            
            private: ::System::Data::DataColumn^  columnbase_angle;
            
            private: ::System::Data::DataColumn^  columncurrent_angle;
            
            private: ::System::Data::DataColumn^  columntranslation_origin;
            
            private: ::System::Data::DataColumn^  columnrotation_origin;
            
            private: ::System::Data::DataColumn^  columntranslation_offset_x;
            
            private: ::System::Data::DataColumn^  columntranslation_offset_y;
            
            private: ::System::Data::DataColumn^  columnrotation_offset_x;
            
            private: ::System::Data::DataColumn^  columnrotation_offset_y;
            
            private: ::System::Data::DataColumn^  columnEntity_Id;
            
            public: event test::NewDataSet::BaseImageRowChangeEventHandler^  BaseImageRowChanging;
            
            public: event test::NewDataSet::BaseImageRowChangeEventHandler^  BaseImageRowChanged;
            
            public: event test::NewDataSet::BaseImageRowChangeEventHandler^  BaseImageRowDeleting;
            
            public: event test::NewDataSet::BaseImageRowChangeEventHandler^  BaseImageRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            BaseImageDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            BaseImageDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            BaseImageDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  descriptionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  idColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  pictureSourceColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  scaleColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  base_angleColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  current_angleColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  translation_originColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  rotation_originColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  translation_offset_xColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  translation_offset_yColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  rotation_offset_xColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  rotation_offset_yColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  Entity_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property test::NewDataSet::BaseImageRow^  default [::System::Int32 ] {
                test::NewDataSet::BaseImageRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddBaseImageRow(test::NewDataSet::BaseImageRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            test::NewDataSet::BaseImageRow^  AddBaseImageRow(
                        System::String^  description, 
                        System::String^  id, 
                        System::String^  name, 
                        System::String^  pictureSource, 
                        System::Int64 scale, 
                        System::Int64 base_angle, 
                        System::Int64 current_angle, 
                        System::String^  translation_origin, 
                        System::String^  rotation_origin, 
                        System::Int64 translation_offset_x, 
                        System::Int64 translation_offset_y, 
                        System::Int64 rotation_offset_x, 
                        System::Int64 rotation_offset_y, 
                        test::NewDataSet::EntityRow^  parentEntityRowByEntity_BaseImage);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            test::NewDataSet::BaseImageRow^  NewBaseImageRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveBaseImageRow(test::NewDataSet::BaseImageRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class SocketDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columndescription;
            
            private: ::System::Data::DataColumn^  columnid;
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnxPosition;
            
            private: ::System::Data::DataColumn^  columnyPosition;
            
            private: ::System::Data::DataColumn^  columnmass;
            
            private: ::System::Data::DataColumn^  columnenergy;
            
            private: ::System::Data::DataColumn^  columntype;
            
            private: ::System::Data::DataColumn^  columnSocket_Id;
            
            private: ::System::Data::DataColumn^  columnEntity_Id;
            
            public: event test::NewDataSet::SocketRowChangeEventHandler^  SocketRowChanging;
            
            public: event test::NewDataSet::SocketRowChangeEventHandler^  SocketRowChanged;
            
            public: event test::NewDataSet::SocketRowChangeEventHandler^  SocketRowDeleting;
            
            public: event test::NewDataSet::SocketRowChangeEventHandler^  SocketRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SocketDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SocketDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SocketDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  descriptionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  idColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  xPositionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  yPositionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  massColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  energyColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  typeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  Socket_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  Entity_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property test::NewDataSet::SocketRow^  default [::System::Int32 ] {
                test::NewDataSet::SocketRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddSocketRow(test::NewDataSet::SocketRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            test::NewDataSet::SocketRow^  AddSocketRow(
                        System::String^  description, 
                        System::String^  id, 
                        System::String^  name, 
                        System::Double xPosition, 
                        System::Double yPosition, 
                        System::Int64 mass, 
                        System::Int64 energy, 
                        System::String^  type, 
                        test::NewDataSet::EntityRow^  parentEntityRowByEntity_Socket);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            test::NewDataSet::SocketRow^  NewSocketRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveSocketRow(test::NewDataSet::SocketRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class Beam_WeaponDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columndescription;
            
            private: ::System::Data::DataColumn^  columnid;
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnpictureSource;
            
            private: ::System::Data::DataColumn^  columnscale;
            
            private: ::System::Data::DataColumn^  columnbase_angle;
            
            private: ::System::Data::DataColumn^  columncurrent_angle;
            
            private: ::System::Data::DataColumn^  columntranslation_origin;
            
            private: ::System::Data::DataColumn^  columnrotation_origin;
            
            private: ::System::Data::DataColumn^  columntranslation_offset_x;
            
            private: ::System::Data::DataColumn^  columntranslation_offset_y;
            
            private: ::System::Data::DataColumn^  columnrotation_offset_x;
            
            private: ::System::Data::DataColumn^  columnrotation_offset_y;
            
            private: ::System::Data::DataColumn^  columncapacitor_type;
            
            private: ::System::Data::DataColumn^  columncapacitor_amount;
            
            private: ::System::Data::DataColumn^  columnmovementHeading;
            
            private: ::System::Data::DataColumn^  columnmovementSpeed;
            
            private: ::System::Data::DataColumn^  columnaccelerationMagnitude;
            
            private: ::System::Data::DataColumn^  columnaccelerationHeading;
            
            private: ::System::Data::DataColumn^  columnSocket_Id;
            
            public: event test::NewDataSet::Beam_WeaponRowChangeEventHandler^  Beam_WeaponRowChanging;
            
            public: event test::NewDataSet::Beam_WeaponRowChangeEventHandler^  Beam_WeaponRowChanged;
            
            public: event test::NewDataSet::Beam_WeaponRowChangeEventHandler^  Beam_WeaponRowDeleting;
            
            public: event test::NewDataSet::Beam_WeaponRowChangeEventHandler^  Beam_WeaponRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            Beam_WeaponDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            Beam_WeaponDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            Beam_WeaponDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  descriptionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  idColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  pictureSourceColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  scaleColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  base_angleColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  current_angleColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  translation_originColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  rotation_originColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  translation_offset_xColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  translation_offset_yColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  rotation_offset_xColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  rotation_offset_yColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  capacitor_typeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  capacitor_amountColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  movementHeadingColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  movementSpeedColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  accelerationMagnitudeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  accelerationHeadingColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  Socket_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property test::NewDataSet::Beam_WeaponRow^  default [::System::Int32 ] {
                test::NewDataSet::Beam_WeaponRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddBeam_WeaponRow(test::NewDataSet::Beam_WeaponRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            test::NewDataSet::Beam_WeaponRow^  AddBeam_WeaponRow(
                        System::String^  description, 
                        System::String^  id, 
                        System::String^  name, 
                        System::String^  pictureSource, 
                        System::Int64 scale, 
                        System::Int64 base_angle, 
                        System::Int64 current_angle, 
                        System::String^  translation_origin, 
                        System::String^  rotation_origin, 
                        System::Int64 translation_offset_x, 
                        System::Int64 translation_offset_y, 
                        System::Int64 rotation_offset_x, 
                        System::Int64 rotation_offset_y, 
                        System::String^  capacitor_type, 
                        System::Int64 capacitor_amount, 
                        System::Int64 movementHeading, 
                        System::Int64 movementSpeed, 
                        System::Int64 accelerationMagnitude, 
                        System::Int64 accelerationHeading, 
                        test::NewDataSet::SocketRow^  parentSocketRowBySocket_Beam_Weapon);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            test::NewDataSet::Beam_WeaponRow^  NewBeam_WeaponRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveBeam_WeaponRow(test::NewDataSet::Beam_WeaponRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class Gun_WeaponDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columndescription;
            
            private: ::System::Data::DataColumn^  columnid;
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnpictureSource;
            
            private: ::System::Data::DataColumn^  columnscale;
            
            private: ::System::Data::DataColumn^  columnbase_angle;
            
            private: ::System::Data::DataColumn^  columncurrent_angle;
            
            private: ::System::Data::DataColumn^  columntranslation_origin;
            
            private: ::System::Data::DataColumn^  columnrotation_origin;
            
            private: ::System::Data::DataColumn^  columntranslation_offset_x;
            
            private: ::System::Data::DataColumn^  columntranslation_offset_y;
            
            private: ::System::Data::DataColumn^  columnrotation_offset_x;
            
            private: ::System::Data::DataColumn^  columnrotation_offset_y;
            
            private: ::System::Data::DataColumn^  columnsubtype;
            
            private: ::System::Data::DataColumn^  columncaliber;
            
            private: ::System::Data::DataColumn^  columnmovementHeading;
            
            private: ::System::Data::DataColumn^  columnmovementSpeed;
            
            private: ::System::Data::DataColumn^  columnaccelerationMagnitude;
            
            private: ::System::Data::DataColumn^  columnaccelerationHeading;
            
            private: ::System::Data::DataColumn^  columngun_ammo_type;
            
            private: ::System::Data::DataColumn^  columngun_ammo_amount;
            
            private: ::System::Data::DataColumn^  columnSocket_Id;
            
            public: event test::NewDataSet::Gun_WeaponRowChangeEventHandler^  Gun_WeaponRowChanging;
            
            public: event test::NewDataSet::Gun_WeaponRowChangeEventHandler^  Gun_WeaponRowChanged;
            
            public: event test::NewDataSet::Gun_WeaponRowChangeEventHandler^  Gun_WeaponRowDeleting;
            
            public: event test::NewDataSet::Gun_WeaponRowChangeEventHandler^  Gun_WeaponRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            Gun_WeaponDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            Gun_WeaponDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            Gun_WeaponDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  descriptionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  idColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  pictureSourceColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  scaleColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  base_angleColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  current_angleColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  translation_originColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  rotation_originColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  translation_offset_xColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  translation_offset_yColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  rotation_offset_xColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  rotation_offset_yColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  subtypeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  caliberColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  movementHeadingColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  movementSpeedColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  accelerationMagnitudeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  accelerationHeadingColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  gun_ammo_typeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  gun_ammo_amountColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  Socket_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property test::NewDataSet::Gun_WeaponRow^  default [::System::Int32 ] {
                test::NewDataSet::Gun_WeaponRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddGun_WeaponRow(test::NewDataSet::Gun_WeaponRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            test::NewDataSet::Gun_WeaponRow^  AddGun_WeaponRow(
                        System::String^  description, 
                        System::String^  id, 
                        System::String^  name, 
                        System::String^  pictureSource, 
                        System::Int64 scale, 
                        System::Int64 base_angle, 
                        System::Int64 current_angle, 
                        System::String^  translation_origin, 
                        System::String^  rotation_origin, 
                        System::Int64 translation_offset_x, 
                        System::Int64 translation_offset_y, 
                        System::Int64 rotation_offset_x, 
                        System::Int64 rotation_offset_y, 
                        System::String^  subtype, 
                        System::Int64 caliber, 
                        System::Int64 movementHeading, 
                        System::Int64 movementSpeed, 
                        System::Int64 accelerationMagnitude, 
                        System::Int64 accelerationHeading, 
                        System::String^  gun_ammo_type, 
                        System::Int64 gun_ammo_amount, 
                        test::NewDataSet::SocketRow^  parentSocketRowBySocket_Gun_Weapon);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            test::NewDataSet::Gun_WeaponRow^  NewGun_WeaponRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveGun_WeaponRow(test::NewDataSet::Gun_WeaponRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class Missile_WeaponDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columndescription;
            
            private: ::System::Data::DataColumn^  columnid;
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnpictureSource;
            
            private: ::System::Data::DataColumn^  columnscale;
            
            private: ::System::Data::DataColumn^  columnbase_angle;
            
            private: ::System::Data::DataColumn^  columncurrent_angle;
            
            private: ::System::Data::DataColumn^  columntranslation_origin;
            
            private: ::System::Data::DataColumn^  columnrotation_origin;
            
            private: ::System::Data::DataColumn^  columntranslation_offset_x;
            
            private: ::System::Data::DataColumn^  columntranslation_offset_y;
            
            private: ::System::Data::DataColumn^  columnrotation_offset_x;
            
            private: ::System::Data::DataColumn^  columnrotation_offset_y;
            
            private: ::System::Data::DataColumn^  columnmissile_size;
            
            private: ::System::Data::DataColumn^  columnmultishot;
            
            private: ::System::Data::DataColumn^  columnmissile_ammo_type;
            
            private: ::System::Data::DataColumn^  columnmissile_ammo_amount;
            
            private: ::System::Data::DataColumn^  columnmovementHeading;
            
            private: ::System::Data::DataColumn^  columnmovementSpeed;
            
            private: ::System::Data::DataColumn^  columnaccelerationMagnitude;
            
            private: ::System::Data::DataColumn^  columnaccelerationHeading;
            
            private: ::System::Data::DataColumn^  columnSocket_Id;
            
            public: event test::NewDataSet::Missile_WeaponRowChangeEventHandler^  Missile_WeaponRowChanging;
            
            public: event test::NewDataSet::Missile_WeaponRowChangeEventHandler^  Missile_WeaponRowChanged;
            
            public: event test::NewDataSet::Missile_WeaponRowChangeEventHandler^  Missile_WeaponRowDeleting;
            
            public: event test::NewDataSet::Missile_WeaponRowChangeEventHandler^  Missile_WeaponRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            Missile_WeaponDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            Missile_WeaponDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            Missile_WeaponDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  descriptionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  idColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  pictureSourceColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  scaleColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  base_angleColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  current_angleColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  translation_originColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  rotation_originColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  translation_offset_xColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  translation_offset_yColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  rotation_offset_xColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  rotation_offset_yColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  missile_sizeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  multishotColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  missile_ammo_typeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  missile_ammo_amountColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  movementHeadingColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  movementSpeedColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  accelerationMagnitudeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  accelerationHeadingColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  Socket_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property test::NewDataSet::Missile_WeaponRow^  default [::System::Int32 ] {
                test::NewDataSet::Missile_WeaponRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddMissile_WeaponRow(test::NewDataSet::Missile_WeaponRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            test::NewDataSet::Missile_WeaponRow^  AddMissile_WeaponRow(
                        System::String^  description, 
                        System::String^  id, 
                        System::String^  name, 
                        System::String^  pictureSource, 
                        System::Int64 scale, 
                        System::Int64 base_angle, 
                        System::Int64 current_angle, 
                        System::String^  translation_origin, 
                        System::String^  rotation_origin, 
                        System::Int64 translation_offset_x, 
                        System::Int64 translation_offset_y, 
                        System::Int64 rotation_offset_x, 
                        System::Int64 rotation_offset_y, 
                        System::Int64 missile_size, 
                        System::Int64 multishot, 
                        System::String^  missile_ammo_type, 
                        System::Int64 missile_ammo_amount, 
                        System::Int64 movementHeading, 
                        System::Int64 movementSpeed, 
                        System::Int64 accelerationMagnitude, 
                        System::Int64 accelerationHeading, 
                        test::NewDataSet::SocketRow^  parentSocketRowBySocket_Missile_Weapon);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            test::NewDataSet::Missile_WeaponRow^  NewMissile_WeaponRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveMissile_WeaponRow(test::NewDataSet::Missile_WeaponRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class DeviceDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columndescription;
            
            private: ::System::Data::DataColumn^  columnid;
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnpictureSource;
            
            private: ::System::Data::DataColumn^  columnscale;
            
            private: ::System::Data::DataColumn^  columnbase_angle;
            
            private: ::System::Data::DataColumn^  columncurrent_angle;
            
            private: ::System::Data::DataColumn^  columntranslation_origin;
            
            private: ::System::Data::DataColumn^  columnrotation_origin;
            
            private: ::System::Data::DataColumn^  columntranslation_offset_x;
            
            private: ::System::Data::DataColumn^  columntranslation_offset_y;
            
            private: ::System::Data::DataColumn^  columnrotation_offset_x;
            
            private: ::System::Data::DataColumn^  columnrotation_offset_y;
            
            private: ::System::Data::DataColumn^  columnmovementHeading;
            
            private: ::System::Data::DataColumn^  columnmovementSpeed;
            
            private: ::System::Data::DataColumn^  columnaccelerationMagnitude;
            
            private: ::System::Data::DataColumn^  columnaccelerationHeading;
            
            private: ::System::Data::DataColumn^  columnsubtype;
            
            private: ::System::Data::DataColumn^  columnSocket_Id;
            
            public: event test::NewDataSet::DeviceRowChangeEventHandler^  DeviceRowChanging;
            
            public: event test::NewDataSet::DeviceRowChangeEventHandler^  DeviceRowChanged;
            
            public: event test::NewDataSet::DeviceRowChangeEventHandler^  DeviceRowDeleting;
            
            public: event test::NewDataSet::DeviceRowChangeEventHandler^  DeviceRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            DeviceDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            DeviceDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            DeviceDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  descriptionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  idColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  pictureSourceColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  scaleColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  base_angleColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  current_angleColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  translation_originColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  rotation_originColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  translation_offset_xColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  translation_offset_yColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  rotation_offset_xColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  rotation_offset_yColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  movementHeadingColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  movementSpeedColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  accelerationMagnitudeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  accelerationHeadingColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  subtypeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  Socket_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property test::NewDataSet::DeviceRow^  default [::System::Int32 ] {
                test::NewDataSet::DeviceRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddDeviceRow(test::NewDataSet::DeviceRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            test::NewDataSet::DeviceRow^  AddDeviceRow(
                        System::String^  description, 
                        System::String^  id, 
                        System::String^  name, 
                        System::String^  pictureSource, 
                        System::Int64 scale, 
                        System::Int64 base_angle, 
                        System::Int64 current_angle, 
                        System::String^  translation_origin, 
                        System::String^  rotation_origin, 
                        System::Int64 translation_offset_x, 
                        System::Int64 translation_offset_y, 
                        System::Int64 rotation_offset_x, 
                        System::Int64 rotation_offset_y, 
                        System::Int64 movementHeading, 
                        System::Int64 movementSpeed, 
                        System::Int64 accelerationMagnitude, 
                        System::Int64 accelerationHeading, 
                        System::String^  subtype, 
                        test::NewDataSet::SocketRow^  parentSocketRowBySocket_Device);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            test::NewDataSet::DeviceRow^  NewDeviceRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveDeviceRow(test::NewDataSet::DeviceRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class EngineDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columndescription;
            
            private: ::System::Data::DataColumn^  columnid;
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnpictureSource;
            
            private: ::System::Data::DataColumn^  columnscale;
            
            private: ::System::Data::DataColumn^  columnbase_angle;
            
            private: ::System::Data::DataColumn^  columncurrent_angle;
            
            private: ::System::Data::DataColumn^  columntranslation_origin;
            
            private: ::System::Data::DataColumn^  columnrotation_origin;
            
            private: ::System::Data::DataColumn^  columntranslation_offset_x;
            
            private: ::System::Data::DataColumn^  columntranslation_offset_y;
            
            private: ::System::Data::DataColumn^  columnrotation_offset_x;
            
            private: ::System::Data::DataColumn^  columnrotation_offset_y;
            
            private: ::System::Data::DataColumn^  columnmovementHeading;
            
            private: ::System::Data::DataColumn^  columnmovementSpeed;
            
            private: ::System::Data::DataColumn^  columnaccelerationMagnitude;
            
            private: ::System::Data::DataColumn^  columnaccelerationHeading;
            
            private: ::System::Data::DataColumn^  columnsubtype;
            
            private: ::System::Data::DataColumn^  columnSocket_Id;
            
            public: event test::NewDataSet::EngineRowChangeEventHandler^  EngineRowChanging;
            
            public: event test::NewDataSet::EngineRowChangeEventHandler^  EngineRowChanged;
            
            public: event test::NewDataSet::EngineRowChangeEventHandler^  EngineRowDeleting;
            
            public: event test::NewDataSet::EngineRowChangeEventHandler^  EngineRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            EngineDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            EngineDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            EngineDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  descriptionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  idColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  pictureSourceColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  scaleColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  base_angleColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  current_angleColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  translation_originColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  rotation_originColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  translation_offset_xColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  translation_offset_yColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  rotation_offset_xColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  rotation_offset_yColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  movementHeadingColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  movementSpeedColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  accelerationMagnitudeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  accelerationHeadingColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  subtypeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  Socket_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property test::NewDataSet::EngineRow^  default [::System::Int32 ] {
                test::NewDataSet::EngineRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddEngineRow(test::NewDataSet::EngineRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            test::NewDataSet::EngineRow^  AddEngineRow(
                        System::String^  description, 
                        System::String^  id, 
                        System::String^  name, 
                        System::String^  pictureSource, 
                        System::Int64 scale, 
                        System::Int64 base_angle, 
                        System::Int64 current_angle, 
                        System::String^  translation_origin, 
                        System::String^  rotation_origin, 
                        System::Int64 translation_offset_x, 
                        System::Int64 translation_offset_y, 
                        System::Int64 rotation_offset_x, 
                        System::Int64 rotation_offset_y, 
                        System::Int64 movementHeading, 
                        System::Int64 movementSpeed, 
                        System::Int64 accelerationMagnitude, 
                        System::Int64 accelerationHeading, 
                        System::String^  subtype, 
                        test::NewDataSet::SocketRow^  parentSocketRowBySocket_Engine);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            test::NewDataSet::EngineRow^  NewEngineRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveEngineRow(test::NewDataSet::EngineRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class PowerplantDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columndescription;
            
            private: ::System::Data::DataColumn^  columnid;
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnpictureSource;
            
            private: ::System::Data::DataColumn^  columnscale;
            
            private: ::System::Data::DataColumn^  columnbase_angle;
            
            private: ::System::Data::DataColumn^  columncurrent_angle;
            
            private: ::System::Data::DataColumn^  columntranslation_origin;
            
            private: ::System::Data::DataColumn^  columnrotation_origin;
            
            private: ::System::Data::DataColumn^  columntranslation_offset_x;
            
            private: ::System::Data::DataColumn^  columntranslation_offset_y;
            
            private: ::System::Data::DataColumn^  columnrotation_offset_x;
            
            private: ::System::Data::DataColumn^  columnrotation_offset_y;
            
            private: ::System::Data::DataColumn^  columnsubtype;
            
            private: ::System::Data::DataColumn^  columncapacitor_type;
            
            private: ::System::Data::DataColumn^  columncapacitor_amount;
            
            private: ::System::Data::DataColumn^  columnmovementHeading;
            
            private: ::System::Data::DataColumn^  columnmovementSpeed;
            
            private: ::System::Data::DataColumn^  columnaccelerationMagnitude;
            
            private: ::System::Data::DataColumn^  columnaccelerationHeading;
            
            private: ::System::Data::DataColumn^  columnSocket_Id;
            
            public: event test::NewDataSet::PowerplantRowChangeEventHandler^  PowerplantRowChanging;
            
            public: event test::NewDataSet::PowerplantRowChangeEventHandler^  PowerplantRowChanged;
            
            public: event test::NewDataSet::PowerplantRowChangeEventHandler^  PowerplantRowDeleting;
            
            public: event test::NewDataSet::PowerplantRowChangeEventHandler^  PowerplantRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            PowerplantDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            PowerplantDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            PowerplantDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  descriptionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  idColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  pictureSourceColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  scaleColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  base_angleColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  current_angleColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  translation_originColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  rotation_originColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  translation_offset_xColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  translation_offset_yColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  rotation_offset_xColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  rotation_offset_yColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  subtypeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  capacitor_typeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  capacitor_amountColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  movementHeadingColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  movementSpeedColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  accelerationMagnitudeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  accelerationHeadingColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  Socket_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property test::NewDataSet::PowerplantRow^  default [::System::Int32 ] {
                test::NewDataSet::PowerplantRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddPowerplantRow(test::NewDataSet::PowerplantRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            test::NewDataSet::PowerplantRow^  AddPowerplantRow(
                        System::String^  description, 
                        System::String^  id, 
                        System::String^  name, 
                        System::String^  pictureSource, 
                        System::Int64 scale, 
                        System::Int64 base_angle, 
                        System::Int64 current_angle, 
                        System::String^  translation_origin, 
                        System::String^  rotation_origin, 
                        System::Int64 translation_offset_x, 
                        System::Int64 translation_offset_y, 
                        System::Int64 rotation_offset_x, 
                        System::Int64 rotation_offset_y, 
                        System::String^  subtype, 
                        System::String^  capacitor_type, 
                        System::Int64 capacitor_amount, 
                        System::Int64 movementHeading, 
                        System::Int64 movementSpeed, 
                        System::Int64 accelerationMagnitude, 
                        System::Int64 accelerationHeading, 
                        test::NewDataSet::SocketRow^  parentSocketRowBySocket_Powerplant);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            test::NewDataSet::PowerplantRow^  NewPowerplantRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemovePowerplantRow(test::NewDataSet::PowerplantRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class WorldStateRow : public ::System::Data::DataRow {
            
            private: test::NewDataSet::WorldStateDataTable^  tableWorldState;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            WorldStateRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  description {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  id {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 time {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Double CoordinateSizeX {
                System::Double get();
                System::Void set(System::Double value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Double CoordinateSizeY {
                System::Double get();
                System::Void set(System::Double value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 WorldState_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsdescriptionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetdescriptionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsidNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetidNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IstimeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SettimeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsCoordinateSizeXNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetCoordinateSizeXNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsCoordinateSizeYNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetCoordinateSizeYNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< test::NewDataSet::EntityRow^  >^  GetEntityRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class EntityRow : public ::System::Data::DataRow {
            
            private: test::NewDataSet::EntityDataTable^  tableEntity;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            EntityRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  description {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  id {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Double xPosition {
                System::Double get();
                System::Void set(System::Double value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Double yPosition {
                System::Double get();
                System::Void set(System::Double value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 movementHeading {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 movementSpeed {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 accelerationMagnitude {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 accelerationHeading {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Boolean isPlayer {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  faction {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Boolean usesPhysics {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 Entity_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 WorldState_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property test::NewDataSet::WorldStateRow^  WorldStateRow {
                test::NewDataSet::WorldStateRow^  get();
                System::Void set(test::NewDataSet::WorldStateRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsdescriptionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetdescriptionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsidNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetidNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsxPositionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetxPositionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsyPositionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetyPositionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsmovementHeadingNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetmovementHeadingNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsmovementSpeedNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetmovementSpeedNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsaccelerationMagnitudeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetaccelerationMagnitudeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsaccelerationHeadingNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetaccelerationHeadingNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsisPlayerNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetisPlayerNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsfactionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetfactionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsusesPhysicsNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetusesPhysicsNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsWorldState_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetWorldState_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< test::NewDataSet::BaseImageRow^  >^  GetBaseImageRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< test::NewDataSet::SocketRow^  >^  GetSocketRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class BaseImageRow : public ::System::Data::DataRow {
            
            private: test::NewDataSet::BaseImageDataTable^  tableBaseImage;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            BaseImageRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  description {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  id {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  pictureSource {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 scale {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 base_angle {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 current_angle {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  translation_origin {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  rotation_origin {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 translation_offset_x {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 translation_offset_y {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 rotation_offset_x {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 rotation_offset_y {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 Entity_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property test::NewDataSet::EntityRow^  EntityRow {
                test::NewDataSet::EntityRow^  get();
                System::Void set(test::NewDataSet::EntityRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsdescriptionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetdescriptionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsidNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetidNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IspictureSourceNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetpictureSourceNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsscaleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetscaleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isbase_angleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setbase_angleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Iscurrent_angleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setcurrent_angleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Istranslation_originNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Settranslation_originNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isrotation_originNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setrotation_originNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Istranslation_offset_xNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Settranslation_offset_xNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Istranslation_offset_yNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Settranslation_offset_yNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isrotation_offset_xNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setrotation_offset_xNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isrotation_offset_yNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setrotation_offset_yNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsEntity_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetEntity_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class SocketRow : public ::System::Data::DataRow {
            
            private: test::NewDataSet::SocketDataTable^  tableSocket;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SocketRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  description {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  id {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Double xPosition {
                System::Double get();
                System::Void set(System::Double value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Double yPosition {
                System::Double get();
                System::Void set(System::Double value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 mass {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 energy {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  type {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 Socket_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 Entity_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property test::NewDataSet::EntityRow^  EntityRow {
                test::NewDataSet::EntityRow^  get();
                System::Void set(test::NewDataSet::EntityRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsdescriptionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetdescriptionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsidNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetidNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsxPositionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetxPositionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsyPositionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetyPositionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsmassNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetmassNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsenergyNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetenergyNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IstypeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SettypeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsEntity_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetEntity_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< test::NewDataSet::Beam_WeaponRow^  >^  GetBeam_WeaponRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< test::NewDataSet::Gun_WeaponRow^  >^  GetGun_WeaponRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< test::NewDataSet::Missile_WeaponRow^  >^  GetMissile_WeaponRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< test::NewDataSet::DeviceRow^  >^  GetDeviceRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< test::NewDataSet::EngineRow^  >^  GetEngineRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< test::NewDataSet::PowerplantRow^  >^  GetPowerplantRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class Beam_WeaponRow : public ::System::Data::DataRow {
            
            private: test::NewDataSet::Beam_WeaponDataTable^  tableBeam_Weapon;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            Beam_WeaponRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  description {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  id {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  pictureSource {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 scale {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 base_angle {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 current_angle {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  translation_origin {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  rotation_origin {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 translation_offset_x {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 translation_offset_y {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 rotation_offset_x {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 rotation_offset_y {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  capacitor_type {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 capacitor_amount {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 movementHeading {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 movementSpeed {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 accelerationMagnitude {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 accelerationHeading {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 Socket_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property test::NewDataSet::SocketRow^  SocketRow {
                test::NewDataSet::SocketRow^  get();
                System::Void set(test::NewDataSet::SocketRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsdescriptionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetdescriptionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsidNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetidNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IspictureSourceNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetpictureSourceNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsscaleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetscaleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isbase_angleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setbase_angleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Iscurrent_angleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setcurrent_angleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Istranslation_originNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Settranslation_originNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isrotation_originNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setrotation_originNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Istranslation_offset_xNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Settranslation_offset_xNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Istranslation_offset_yNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Settranslation_offset_yNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isrotation_offset_xNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setrotation_offset_xNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isrotation_offset_yNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setrotation_offset_yNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Iscapacitor_typeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setcapacitor_typeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Iscapacitor_amountNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setcapacitor_amountNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsmovementHeadingNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetmovementHeadingNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsmovementSpeedNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetmovementSpeedNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsaccelerationMagnitudeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetaccelerationMagnitudeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsaccelerationHeadingNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetaccelerationHeadingNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsSocket_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetSocket_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class Gun_WeaponRow : public ::System::Data::DataRow {
            
            private: test::NewDataSet::Gun_WeaponDataTable^  tableGun_Weapon;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            Gun_WeaponRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  description {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  id {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  pictureSource {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 scale {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 base_angle {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 current_angle {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  translation_origin {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  rotation_origin {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 translation_offset_x {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 translation_offset_y {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 rotation_offset_x {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 rotation_offset_y {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  subtype {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 caliber {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 movementHeading {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 movementSpeed {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 accelerationMagnitude {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 accelerationHeading {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  gun_ammo_type {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 gun_ammo_amount {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 Socket_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property test::NewDataSet::SocketRow^  SocketRow {
                test::NewDataSet::SocketRow^  get();
                System::Void set(test::NewDataSet::SocketRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsdescriptionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetdescriptionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsidNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetidNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IspictureSourceNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetpictureSourceNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsscaleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetscaleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isbase_angleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setbase_angleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Iscurrent_angleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setcurrent_angleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Istranslation_originNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Settranslation_originNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isrotation_originNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setrotation_originNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Istranslation_offset_xNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Settranslation_offset_xNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Istranslation_offset_yNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Settranslation_offset_yNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isrotation_offset_xNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setrotation_offset_xNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isrotation_offset_yNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setrotation_offset_yNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IssubtypeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetsubtypeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IscaliberNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetcaliberNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsmovementHeadingNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetmovementHeadingNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsmovementSpeedNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetmovementSpeedNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsaccelerationMagnitudeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetaccelerationMagnitudeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsaccelerationHeadingNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetaccelerationHeadingNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isgun_ammo_typeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setgun_ammo_typeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isgun_ammo_amountNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setgun_ammo_amountNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsSocket_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetSocket_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class Missile_WeaponRow : public ::System::Data::DataRow {
            
            private: test::NewDataSet::Missile_WeaponDataTable^  tableMissile_Weapon;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            Missile_WeaponRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  description {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  id {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  pictureSource {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 scale {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 base_angle {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 current_angle {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  translation_origin {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  rotation_origin {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 translation_offset_x {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 translation_offset_y {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 rotation_offset_x {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 rotation_offset_y {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 missile_size {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 multishot {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  missile_ammo_type {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 missile_ammo_amount {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 movementHeading {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 movementSpeed {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 accelerationMagnitude {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 accelerationHeading {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 Socket_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property test::NewDataSet::SocketRow^  SocketRow {
                test::NewDataSet::SocketRow^  get();
                System::Void set(test::NewDataSet::SocketRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsdescriptionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetdescriptionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsidNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetidNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IspictureSourceNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetpictureSourceNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsscaleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetscaleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isbase_angleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setbase_angleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Iscurrent_angleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setcurrent_angleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Istranslation_originNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Settranslation_originNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isrotation_originNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setrotation_originNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Istranslation_offset_xNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Settranslation_offset_xNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Istranslation_offset_yNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Settranslation_offset_yNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isrotation_offset_xNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setrotation_offset_xNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isrotation_offset_yNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setrotation_offset_yNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Ismissile_sizeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setmissile_sizeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsmultishotNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetmultishotNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Ismissile_ammo_typeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setmissile_ammo_typeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Ismissile_ammo_amountNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setmissile_ammo_amountNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsmovementHeadingNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetmovementHeadingNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsmovementSpeedNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetmovementSpeedNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsaccelerationMagnitudeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetaccelerationMagnitudeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsaccelerationHeadingNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetaccelerationHeadingNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsSocket_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetSocket_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class DeviceRow : public ::System::Data::DataRow {
            
            private: test::NewDataSet::DeviceDataTable^  tableDevice;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            DeviceRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  description {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  id {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  pictureSource {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 scale {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 base_angle {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 current_angle {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  translation_origin {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  rotation_origin {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 translation_offset_x {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 translation_offset_y {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 rotation_offset_x {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 rotation_offset_y {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 movementHeading {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 movementSpeed {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 accelerationMagnitude {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 accelerationHeading {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  subtype {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 Socket_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property test::NewDataSet::SocketRow^  SocketRow {
                test::NewDataSet::SocketRow^  get();
                System::Void set(test::NewDataSet::SocketRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsdescriptionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetdescriptionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsidNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetidNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IspictureSourceNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetpictureSourceNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsscaleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetscaleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isbase_angleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setbase_angleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Iscurrent_angleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setcurrent_angleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Istranslation_originNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Settranslation_originNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isrotation_originNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setrotation_originNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Istranslation_offset_xNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Settranslation_offset_xNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Istranslation_offset_yNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Settranslation_offset_yNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isrotation_offset_xNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setrotation_offset_xNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isrotation_offset_yNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setrotation_offset_yNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsmovementHeadingNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetmovementHeadingNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsmovementSpeedNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetmovementSpeedNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsaccelerationMagnitudeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetaccelerationMagnitudeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsaccelerationHeadingNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetaccelerationHeadingNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsSocket_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetSocket_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class EngineRow : public ::System::Data::DataRow {
            
            private: test::NewDataSet::EngineDataTable^  tableEngine;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            EngineRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  description {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  id {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  pictureSource {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 scale {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 base_angle {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 current_angle {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  translation_origin {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  rotation_origin {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 translation_offset_x {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 translation_offset_y {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 rotation_offset_x {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 rotation_offset_y {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 movementHeading {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 movementSpeed {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 accelerationMagnitude {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 accelerationHeading {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  subtype {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 Socket_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property test::NewDataSet::SocketRow^  SocketRow {
                test::NewDataSet::SocketRow^  get();
                System::Void set(test::NewDataSet::SocketRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsdescriptionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetdescriptionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsidNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetidNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IspictureSourceNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetpictureSourceNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsscaleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetscaleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isbase_angleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setbase_angleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Iscurrent_angleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setcurrent_angleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Istranslation_originNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Settranslation_originNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isrotation_originNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setrotation_originNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Istranslation_offset_xNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Settranslation_offset_xNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Istranslation_offset_yNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Settranslation_offset_yNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isrotation_offset_xNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setrotation_offset_xNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isrotation_offset_yNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setrotation_offset_yNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsmovementHeadingNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetmovementHeadingNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsmovementSpeedNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetmovementSpeedNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsaccelerationMagnitudeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetaccelerationMagnitudeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsaccelerationHeadingNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetaccelerationHeadingNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IssubtypeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetsubtypeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsSocket_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetSocket_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class PowerplantRow : public ::System::Data::DataRow {
            
            private: test::NewDataSet::PowerplantDataTable^  tablePowerplant;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            PowerplantRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  description {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  id {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  pictureSource {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 scale {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 base_angle {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 current_angle {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  translation_origin {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  rotation_origin {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 translation_offset_x {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 translation_offset_y {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 rotation_offset_x {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 rotation_offset_y {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  subtype {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  capacitor_type {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 capacitor_amount {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 movementHeading {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 movementSpeed {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 accelerationMagnitude {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 accelerationHeading {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 Socket_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property test::NewDataSet::SocketRow^  SocketRow {
                test::NewDataSet::SocketRow^  get();
                System::Void set(test::NewDataSet::SocketRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsdescriptionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetdescriptionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsidNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetidNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IspictureSourceNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetpictureSourceNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsscaleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetscaleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isbase_angleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setbase_angleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Iscurrent_angleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setcurrent_angleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Istranslation_originNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Settranslation_originNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isrotation_originNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setrotation_originNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Istranslation_offset_xNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Settranslation_offset_xNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Istranslation_offset_yNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Settranslation_offset_yNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isrotation_offset_xNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setrotation_offset_xNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isrotation_offset_yNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setrotation_offset_yNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IssubtypeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetsubtypeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Iscapacitor_typeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setcapacitor_typeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Iscapacitor_amountNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setcapacitor_amountNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsmovementHeadingNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetmovementHeadingNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsmovementSpeedNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetmovementSpeedNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsaccelerationMagnitudeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetaccelerationMagnitudeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsaccelerationHeadingNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetaccelerationHeadingNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsSocket_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetSocket_IdNull();
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class WorldStateRowChangeEvent : public ::System::EventArgs {
            
            private: test::NewDataSet::WorldStateRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            WorldStateRowChangeEvent(test::NewDataSet::WorldStateRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property test::NewDataSet::WorldStateRow^  Row {
                test::NewDataSet::WorldStateRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class EntityRowChangeEvent : public ::System::EventArgs {
            
            private: test::NewDataSet::EntityRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            EntityRowChangeEvent(test::NewDataSet::EntityRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property test::NewDataSet::EntityRow^  Row {
                test::NewDataSet::EntityRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class BaseImageRowChangeEvent : public ::System::EventArgs {
            
            private: test::NewDataSet::BaseImageRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            BaseImageRowChangeEvent(test::NewDataSet::BaseImageRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property test::NewDataSet::BaseImageRow^  Row {
                test::NewDataSet::BaseImageRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class SocketRowChangeEvent : public ::System::EventArgs {
            
            private: test::NewDataSet::SocketRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SocketRowChangeEvent(test::NewDataSet::SocketRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property test::NewDataSet::SocketRow^  Row {
                test::NewDataSet::SocketRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class Beam_WeaponRowChangeEvent : public ::System::EventArgs {
            
            private: test::NewDataSet::Beam_WeaponRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            Beam_WeaponRowChangeEvent(test::NewDataSet::Beam_WeaponRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property test::NewDataSet::Beam_WeaponRow^  Row {
                test::NewDataSet::Beam_WeaponRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class Gun_WeaponRowChangeEvent : public ::System::EventArgs {
            
            private: test::NewDataSet::Gun_WeaponRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            Gun_WeaponRowChangeEvent(test::NewDataSet::Gun_WeaponRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property test::NewDataSet::Gun_WeaponRow^  Row {
                test::NewDataSet::Gun_WeaponRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class Missile_WeaponRowChangeEvent : public ::System::EventArgs {
            
            private: test::NewDataSet::Missile_WeaponRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            Missile_WeaponRowChangeEvent(test::NewDataSet::Missile_WeaponRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property test::NewDataSet::Missile_WeaponRow^  Row {
                test::NewDataSet::Missile_WeaponRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class DeviceRowChangeEvent : public ::System::EventArgs {
            
            private: test::NewDataSet::DeviceRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            DeviceRowChangeEvent(test::NewDataSet::DeviceRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property test::NewDataSet::DeviceRow^  Row {
                test::NewDataSet::DeviceRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class EngineRowChangeEvent : public ::System::EventArgs {
            
            private: test::NewDataSet::EngineRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            EngineRowChangeEvent(test::NewDataSet::EngineRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property test::NewDataSet::EngineRow^  Row {
                test::NewDataSet::EngineRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class PowerplantRowChangeEvent : public ::System::EventArgs {
            
            private: test::NewDataSet::PowerplantRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            PowerplantRowChangeEvent(test::NewDataSet::PowerplantRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property test::NewDataSet::PowerplantRow^  Row {
                test::NewDataSet::PowerplantRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
    };
}
namespace test {
    
    
    inline NewDataSet::NewDataSet() {
        this->BeginInit();
        this->InitClass();
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &test::NewDataSet::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        __super::Relations->CollectionChanged += schemaChangedHandler;
        this->EndInit();
    }
    
    inline NewDataSet::NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataSet(info, context, false) {
        if (this->IsBinarySerialized(info, context) == true) {
            this->InitVars(false);
            ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &test::NewDataSet::SchemaChanged);
            this->Tables->CollectionChanged += schemaChangedHandler1;
            this->Relations->CollectionChanged += schemaChangedHandler1;
            return;
        }
        ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
        if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
            if (ds->Tables[L"WorldState"] != nullptr) {
                __super::Tables->Add((gcnew test::NewDataSet::WorldStateDataTable(ds->Tables[L"WorldState"])));
            }
            if (ds->Tables[L"Entity"] != nullptr) {
                __super::Tables->Add((gcnew test::NewDataSet::EntityDataTable(ds->Tables[L"Entity"])));
            }
            if (ds->Tables[L"BaseImage"] != nullptr) {
                __super::Tables->Add((gcnew test::NewDataSet::BaseImageDataTable(ds->Tables[L"BaseImage"])));
            }
            if (ds->Tables[L"Socket"] != nullptr) {
                __super::Tables->Add((gcnew test::NewDataSet::SocketDataTable(ds->Tables[L"Socket"])));
            }
            if (ds->Tables[L"Beam_Weapon"] != nullptr) {
                __super::Tables->Add((gcnew test::NewDataSet::Beam_WeaponDataTable(ds->Tables[L"Beam_Weapon"])));
            }
            if (ds->Tables[L"Gun_Weapon"] != nullptr) {
                __super::Tables->Add((gcnew test::NewDataSet::Gun_WeaponDataTable(ds->Tables[L"Gun_Weapon"])));
            }
            if (ds->Tables[L"Missile_Weapon"] != nullptr) {
                __super::Tables->Add((gcnew test::NewDataSet::Missile_WeaponDataTable(ds->Tables[L"Missile_Weapon"])));
            }
            if (ds->Tables[L"Device"] != nullptr) {
                __super::Tables->Add((gcnew test::NewDataSet::DeviceDataTable(ds->Tables[L"Device"])));
            }
            if (ds->Tables[L"Engine"] != nullptr) {
                __super::Tables->Add((gcnew test::NewDataSet::EngineDataTable(ds->Tables[L"Engine"])));
            }
            if (ds->Tables[L"Powerplant"] != nullptr) {
                __super::Tables->Add((gcnew test::NewDataSet::PowerplantDataTable(ds->Tables[L"Powerplant"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        }
        this->GetSerializationData(info, context);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &test::NewDataSet::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline test::NewDataSet::WorldStateDataTable^  NewDataSet::WorldState::get() {
        return this->tableWorldState;
    }
    
    inline test::NewDataSet::EntityDataTable^  NewDataSet::Entity::get() {
        return this->tableEntity;
    }
    
    inline test::NewDataSet::BaseImageDataTable^  NewDataSet::BaseImage::get() {
        return this->tableBaseImage;
    }
    
    inline test::NewDataSet::SocketDataTable^  NewDataSet::Socket::get() {
        return this->tableSocket;
    }
    
    inline test::NewDataSet::Beam_WeaponDataTable^  NewDataSet::Beam_Weapon::get() {
        return this->tableBeam_Weapon;
    }
    
    inline test::NewDataSet::Gun_WeaponDataTable^  NewDataSet::Gun_Weapon::get() {
        return this->tableGun_Weapon;
    }
    
    inline test::NewDataSet::Missile_WeaponDataTable^  NewDataSet::Missile_Weapon::get() {
        return this->tableMissile_Weapon;
    }
    
    inline test::NewDataSet::DeviceDataTable^  NewDataSet::Device::get() {
        return this->tableDevice;
    }
    
    inline test::NewDataSet::EngineDataTable^  NewDataSet::Engine::get() {
        return this->tableEngine;
    }
    
    inline test::NewDataSet::PowerplantDataTable^  NewDataSet::Powerplant::get() {
        return this->tablePowerplant;
    }
    
    inline ::System::Data::SchemaSerializationMode NewDataSet::SchemaSerializationMode::get() {
        return this->_schemaSerializationMode;
    }
    inline System::Void NewDataSet::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
        this->_schemaSerializationMode = __identifier(value);
    }
    
    inline ::System::Data::DataTableCollection^  NewDataSet::Tables::get() {
        return __super::Tables;
    }
    
    inline ::System::Data::DataRelationCollection^  NewDataSet::Relations::get() {
        return __super::Relations;
    }
    
    inline ::System::Void NewDataSet::InitializeDerivedDataSet() {
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline ::System::Data::DataSet^  NewDataSet::Clone() {
        test::NewDataSet^  cln = (cli::safe_cast<test::NewDataSet^  >(__super::Clone()));
        cln->InitVars();
        cln->SchemaSerializationMode = this->SchemaSerializationMode;
        return cln;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeTables() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeRelations() {
        return false;
    }
    
    inline ::System::Void NewDataSet::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
        if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            this->Reset();
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXml(reader);
            if (ds->Tables[L"WorldState"] != nullptr) {
                __super::Tables->Add((gcnew test::NewDataSet::WorldStateDataTable(ds->Tables[L"WorldState"])));
            }
            if (ds->Tables[L"Entity"] != nullptr) {
                __super::Tables->Add((gcnew test::NewDataSet::EntityDataTable(ds->Tables[L"Entity"])));
            }
            if (ds->Tables[L"BaseImage"] != nullptr) {
                __super::Tables->Add((gcnew test::NewDataSet::BaseImageDataTable(ds->Tables[L"BaseImage"])));
            }
            if (ds->Tables[L"Socket"] != nullptr) {
                __super::Tables->Add((gcnew test::NewDataSet::SocketDataTable(ds->Tables[L"Socket"])));
            }
            if (ds->Tables[L"Beam_Weapon"] != nullptr) {
                __super::Tables->Add((gcnew test::NewDataSet::Beam_WeaponDataTable(ds->Tables[L"Beam_Weapon"])));
            }
            if (ds->Tables[L"Gun_Weapon"] != nullptr) {
                __super::Tables->Add((gcnew test::NewDataSet::Gun_WeaponDataTable(ds->Tables[L"Gun_Weapon"])));
            }
            if (ds->Tables[L"Missile_Weapon"] != nullptr) {
                __super::Tables->Add((gcnew test::NewDataSet::Missile_WeaponDataTable(ds->Tables[L"Missile_Weapon"])));
            }
            if (ds->Tables[L"Device"] != nullptr) {
                __super::Tables->Add((gcnew test::NewDataSet::DeviceDataTable(ds->Tables[L"Device"])));
            }
            if (ds->Tables[L"Engine"] != nullptr) {
                __super::Tables->Add((gcnew test::NewDataSet::EngineDataTable(ds->Tables[L"Engine"])));
            }
            if (ds->Tables[L"Powerplant"] != nullptr) {
                __super::Tables->Add((gcnew test::NewDataSet::PowerplantDataTable(ds->Tables[L"Powerplant"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXml(reader);
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchema^  NewDataSet::GetSchemaSerializable() {
        ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
        this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
        stream->Position = 0;
        return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
    }
    
    inline ::System::Void NewDataSet::InitVars() {
        this->InitVars(true);
    }
    
    inline ::System::Void NewDataSet::InitVars(::System::Boolean initTable) {
        this->tableWorldState = (cli::safe_cast<test::NewDataSet::WorldStateDataTable^  >(__super::Tables[L"WorldState"]));
        if (initTable == true) {
            if (this->tableWorldState != nullptr) {
                this->tableWorldState->InitVars();
            }
        }
        this->tableEntity = (cli::safe_cast<test::NewDataSet::EntityDataTable^  >(__super::Tables[L"Entity"]));
        if (initTable == true) {
            if (this->tableEntity != nullptr) {
                this->tableEntity->InitVars();
            }
        }
        this->tableBaseImage = (cli::safe_cast<test::NewDataSet::BaseImageDataTable^  >(__super::Tables[L"BaseImage"]));
        if (initTable == true) {
            if (this->tableBaseImage != nullptr) {
                this->tableBaseImage->InitVars();
            }
        }
        this->tableSocket = (cli::safe_cast<test::NewDataSet::SocketDataTable^  >(__super::Tables[L"Socket"]));
        if (initTable == true) {
            if (this->tableSocket != nullptr) {
                this->tableSocket->InitVars();
            }
        }
        this->tableBeam_Weapon = (cli::safe_cast<test::NewDataSet::Beam_WeaponDataTable^  >(__super::Tables[L"Beam_Weapon"]));
        if (initTable == true) {
            if (this->tableBeam_Weapon != nullptr) {
                this->tableBeam_Weapon->InitVars();
            }
        }
        this->tableGun_Weapon = (cli::safe_cast<test::NewDataSet::Gun_WeaponDataTable^  >(__super::Tables[L"Gun_Weapon"]));
        if (initTable == true) {
            if (this->tableGun_Weapon != nullptr) {
                this->tableGun_Weapon->InitVars();
            }
        }
        this->tableMissile_Weapon = (cli::safe_cast<test::NewDataSet::Missile_WeaponDataTable^  >(__super::Tables[L"Missile_Weapon"]));
        if (initTable == true) {
            if (this->tableMissile_Weapon != nullptr) {
                this->tableMissile_Weapon->InitVars();
            }
        }
        this->tableDevice = (cli::safe_cast<test::NewDataSet::DeviceDataTable^  >(__super::Tables[L"Device"]));
        if (initTable == true) {
            if (this->tableDevice != nullptr) {
                this->tableDevice->InitVars();
            }
        }
        this->tableEngine = (cli::safe_cast<test::NewDataSet::EngineDataTable^  >(__super::Tables[L"Engine"]));
        if (initTable == true) {
            if (this->tableEngine != nullptr) {
                this->tableEngine->InitVars();
            }
        }
        this->tablePowerplant = (cli::safe_cast<test::NewDataSet::PowerplantDataTable^  >(__super::Tables[L"Powerplant"]));
        if (initTable == true) {
            if (this->tablePowerplant != nullptr) {
                this->tablePowerplant->InitVars();
            }
        }
        this->relationWorldState_Entity = this->Relations[L"WorldState_Entity"];
        this->relationEntity_BaseImage = this->Relations[L"Entity_BaseImage"];
        this->relationEntity_Socket = this->Relations[L"Entity_Socket"];
        this->relationSocket_Beam_Weapon = this->Relations[L"Socket_Beam_Weapon"];
        this->relationSocket_Gun_Weapon = this->Relations[L"Socket_Gun_Weapon"];
        this->relationSocket_Missile_Weapon = this->Relations[L"Socket_Missile_Weapon"];
        this->relationSocket_Device = this->Relations[L"Socket_Device"];
        this->relationSocket_Engine = this->Relations[L"Socket_Engine"];
        this->relationSocket_Powerplant = this->Relations[L"Socket_Powerplant"];
    }
    
    inline ::System::Void NewDataSet::InitClass() {
        this->DataSetName = L"NewDataSet";
        this->Prefix = L"";
        this->Namespace = L"http://code.google.com/p/snow-leopard/";
        this->Locale = (gcnew ::System::Globalization::CultureInfo(L""));
        this->EnforceConstraints = true;
        this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
        this->tableWorldState = (gcnew test::NewDataSet::WorldStateDataTable());
        __super::Tables->Add(this->tableWorldState);
        this->tableEntity = (gcnew test::NewDataSet::EntityDataTable());
        __super::Tables->Add(this->tableEntity);
        this->tableBaseImage = (gcnew test::NewDataSet::BaseImageDataTable());
        __super::Tables->Add(this->tableBaseImage);
        this->tableSocket = (gcnew test::NewDataSet::SocketDataTable());
        __super::Tables->Add(this->tableSocket);
        this->tableBeam_Weapon = (gcnew test::NewDataSet::Beam_WeaponDataTable());
        __super::Tables->Add(this->tableBeam_Weapon);
        this->tableGun_Weapon = (gcnew test::NewDataSet::Gun_WeaponDataTable());
        __super::Tables->Add(this->tableGun_Weapon);
        this->tableMissile_Weapon = (gcnew test::NewDataSet::Missile_WeaponDataTable());
        __super::Tables->Add(this->tableMissile_Weapon);
        this->tableDevice = (gcnew test::NewDataSet::DeviceDataTable());
        __super::Tables->Add(this->tableDevice);
        this->tableEngine = (gcnew test::NewDataSet::EngineDataTable());
        __super::Tables->Add(this->tableEngine);
        this->tablePowerplant = (gcnew test::NewDataSet::PowerplantDataTable());
        __super::Tables->Add(this->tablePowerplant);
        ::System::Data::ForeignKeyConstraint^  fkc;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"WorldState_Entity", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWorldState->WorldState_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableEntity->WorldState_IdColumn}));
        this->tableEntity->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Entity_BaseImage", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableEntity->Entity_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableBaseImage->Entity_IdColumn}));
        this->tableBaseImage->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Entity_Socket", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableEntity->Entity_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSocket->Entity_IdColumn}));
        this->tableSocket->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Socket_Beam_Weapon", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSocket->Socket_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableBeam_Weapon->Socket_IdColumn}));
        this->tableBeam_Weapon->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Socket_Gun_Weapon", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSocket->Socket_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableGun_Weapon->Socket_IdColumn}));
        this->tableGun_Weapon->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Socket_Missile_Weapon", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSocket->Socket_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableMissile_Weapon->Socket_IdColumn}));
        this->tableMissile_Weapon->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Socket_Device", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSocket->Socket_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableDevice->Socket_IdColumn}));
        this->tableDevice->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Socket_Engine", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSocket->Socket_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableEngine->Socket_IdColumn}));
        this->tableEngine->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Socket_Powerplant", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSocket->Socket_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePowerplant->Socket_IdColumn}));
        this->tablePowerplant->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        this->relationWorldState_Entity = (gcnew ::System::Data::DataRelation(L"WorldState_Entity", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWorldState->WorldState_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableEntity->WorldState_IdColumn}, false));
        this->relationWorldState_Entity->Nested = true;
        this->Relations->Add(this->relationWorldState_Entity);
        this->relationEntity_BaseImage = (gcnew ::System::Data::DataRelation(L"Entity_BaseImage", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableEntity->Entity_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableBaseImage->Entity_IdColumn}, false));
        this->relationEntity_BaseImage->Nested = true;
        this->Relations->Add(this->relationEntity_BaseImage);
        this->relationEntity_Socket = (gcnew ::System::Data::DataRelation(L"Entity_Socket", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableEntity->Entity_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSocket->Entity_IdColumn}, false));
        this->relationEntity_Socket->Nested = true;
        this->Relations->Add(this->relationEntity_Socket);
        this->relationSocket_Beam_Weapon = (gcnew ::System::Data::DataRelation(L"Socket_Beam_Weapon", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSocket->Socket_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableBeam_Weapon->Socket_IdColumn}, false));
        this->relationSocket_Beam_Weapon->Nested = true;
        this->Relations->Add(this->relationSocket_Beam_Weapon);
        this->relationSocket_Gun_Weapon = (gcnew ::System::Data::DataRelation(L"Socket_Gun_Weapon", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSocket->Socket_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableGun_Weapon->Socket_IdColumn}, false));
        this->relationSocket_Gun_Weapon->Nested = true;
        this->Relations->Add(this->relationSocket_Gun_Weapon);
        this->relationSocket_Missile_Weapon = (gcnew ::System::Data::DataRelation(L"Socket_Missile_Weapon", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSocket->Socket_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableMissile_Weapon->Socket_IdColumn}, false));
        this->relationSocket_Missile_Weapon->Nested = true;
        this->Relations->Add(this->relationSocket_Missile_Weapon);
        this->relationSocket_Device = (gcnew ::System::Data::DataRelation(L"Socket_Device", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSocket->Socket_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableDevice->Socket_IdColumn}, false));
        this->relationSocket_Device->Nested = true;
        this->Relations->Add(this->relationSocket_Device);
        this->relationSocket_Engine = (gcnew ::System::Data::DataRelation(L"Socket_Engine", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSocket->Socket_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableEngine->Socket_IdColumn}, false));
        this->relationSocket_Engine->Nested = true;
        this->Relations->Add(this->relationSocket_Engine);
        this->relationSocket_Powerplant = (gcnew ::System::Data::DataRelation(L"Socket_Powerplant", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSocket->Socket_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePowerplant->Socket_IdColumn}, false));
        this->relationSocket_Powerplant->Nested = true;
        this->Relations->Add(this->relationSocket_Powerplant);
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeWorldState() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeEntity() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeBaseImage() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeSocket() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeBeam_Weapon() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeGun_Weapon() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeMissile_Weapon() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeDevice() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeEngine() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializePowerplant() {
        return false;
    }
    
    inline ::System::Void NewDataSet::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
        if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        test::NewDataSet^  ds = (gcnew test::NewDataSet());
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any->Namespace = ds->Namespace;
        sequence->Items->Add(any);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::WorldStateDataTable::WorldStateDataTable() {
        this->TableName = L"WorldState";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::WorldStateDataTable::WorldStateDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::WorldStateDataTable::WorldStateDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::WorldStateDataTable::descriptionColumn::get() {
        return this->columndescription;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::WorldStateDataTable::idColumn::get() {
        return this->columnid;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::WorldStateDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::WorldStateDataTable::timeColumn::get() {
        return this->columntime;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::WorldStateDataTable::CoordinateSizeXColumn::get() {
        return this->columnCoordinateSizeX;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::WorldStateDataTable::CoordinateSizeYColumn::get() {
        return this->columnCoordinateSizeY;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::WorldStateDataTable::WorldState_IdColumn::get() {
        return this->columnWorldState_Id;
    }
    
    inline ::System::Int32 NewDataSet::WorldStateDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline test::NewDataSet::WorldStateRow^  NewDataSet::WorldStateDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<test::NewDataSet::WorldStateRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::WorldStateDataTable::AddWorldStateRow(test::NewDataSet::WorldStateRow^  row) {
        this->Rows->Add(row);
    }
    
    inline test::NewDataSet::WorldStateRow^  NewDataSet::WorldStateDataTable::AddWorldStateRow(
                System::String^  description, 
                System::String^  id, 
                System::String^  name, 
                System::Int64 time, 
                System::Double CoordinateSizeX, 
                System::Double CoordinateSizeY) {
        test::NewDataSet::WorldStateRow^  rowWorldStateRow = (cli::safe_cast<test::NewDataSet::WorldStateRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(7) {description, id, name, 
            time, CoordinateSizeX, CoordinateSizeY, nullptr};
        rowWorldStateRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowWorldStateRow);
        return rowWorldStateRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::WorldStateDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::WorldStateDataTable::Clone() {
        test::NewDataSet::WorldStateDataTable^  cln = (cli::safe_cast<test::NewDataSet::WorldStateDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::WorldStateDataTable::CreateInstance() {
        return (gcnew test::NewDataSet::WorldStateDataTable());
    }
    
    inline ::System::Void NewDataSet::WorldStateDataTable::InitVars() {
        this->columndescription = __super::Columns[L"description"];
        this->columnid = __super::Columns[L"id"];
        this->columnname = __super::Columns[L"name"];
        this->columntime = __super::Columns[L"time"];
        this->columnCoordinateSizeX = __super::Columns[L"CoordinateSizeX"];
        this->columnCoordinateSizeY = __super::Columns[L"CoordinateSizeY"];
        this->columnWorldState_Id = __super::Columns[L"WorldState_Id"];
    }
    
    inline ::System::Void NewDataSet::WorldStateDataTable::InitClass() {
        this->columndescription = (gcnew ::System::Data::DataColumn(L"description", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columndescription);
        this->columnid = (gcnew ::System::Data::DataColumn(L"id", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnid);
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columntime = (gcnew ::System::Data::DataColumn(L"time", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columntime);
        this->columnCoordinateSizeX = (gcnew ::System::Data::DataColumn(L"CoordinateSizeX", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnCoordinateSizeX);
        this->columnCoordinateSizeY = (gcnew ::System::Data::DataColumn(L"CoordinateSizeY", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnCoordinateSizeY);
        this->columnWorldState_Id = (gcnew ::System::Data::DataColumn(L"WorldState_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnWorldState_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnWorldState_Id}, 
                true)));
        this->columndescription->Namespace = L"";
        this->columndescription->DefaultValue = (cli::safe_cast<System::String^  >(L""));
        this->columnid->Namespace = L"";
        this->columnname->Namespace = L"";
        this->columnname->DefaultValue = (cli::safe_cast<System::String^  >(L"NoName"));
        this->columntime->Namespace = L"";
        this->columntime->DefaultValue = static_cast<System::Int64>(0);
        this->columnCoordinateSizeX->Namespace = L"";
        this->columnCoordinateSizeX->DefaultValue = static_cast<System::Double>(1024);
        this->columnCoordinateSizeY->Namespace = L"";
        this->columnCoordinateSizeY->DefaultValue = static_cast<System::Double>(768);
        this->columnWorldState_Id->AutoIncrement = true;
        this->columnWorldState_Id->AllowDBNull = false;
        this->columnWorldState_Id->Unique = true;
    }
    
    inline test::NewDataSet::WorldStateRow^  NewDataSet::WorldStateDataTable::NewWorldStateRow() {
        return (cli::safe_cast<test::NewDataSet::WorldStateRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::WorldStateDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew test::NewDataSet::WorldStateRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::WorldStateDataTable::GetRowType() {
        return test::NewDataSet::WorldStateRow::typeid;
    }
    
    inline ::System::Void NewDataSet::WorldStateDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->WorldStateRowChanged(this, (gcnew test::NewDataSet::WorldStateRowChangeEvent((cli::safe_cast<test::NewDataSet::WorldStateRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::WorldStateDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->WorldStateRowChanging(this, (gcnew test::NewDataSet::WorldStateRowChangeEvent((cli::safe_cast<test::NewDataSet::WorldStateRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::WorldStateDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->WorldStateRowDeleted(this, (gcnew test::NewDataSet::WorldStateRowChangeEvent((cli::safe_cast<test::NewDataSet::WorldStateRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::WorldStateDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->WorldStateRowDeleting(this, (gcnew test::NewDataSet::WorldStateRowChangeEvent((cli::safe_cast<test::NewDataSet::WorldStateRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::WorldStateDataTable::RemoveWorldStateRow(test::NewDataSet::WorldStateRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::WorldStateDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        test::NewDataSet^  ds = (gcnew test::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"WorldStateDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::EntityDataTable::EntityDataTable() {
        this->TableName = L"Entity";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::EntityDataTable::EntityDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::EntityDataTable::EntityDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::EntityDataTable::descriptionColumn::get() {
        return this->columndescription;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::EntityDataTable::idColumn::get() {
        return this->columnid;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::EntityDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::EntityDataTable::xPositionColumn::get() {
        return this->columnxPosition;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::EntityDataTable::yPositionColumn::get() {
        return this->columnyPosition;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::EntityDataTable::movementHeadingColumn::get() {
        return this->columnmovementHeading;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::EntityDataTable::movementSpeedColumn::get() {
        return this->columnmovementSpeed;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::EntityDataTable::accelerationMagnitudeColumn::get() {
        return this->columnaccelerationMagnitude;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::EntityDataTable::accelerationHeadingColumn::get() {
        return this->columnaccelerationHeading;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::EntityDataTable::isPlayerColumn::get() {
        return this->columnisPlayer;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::EntityDataTable::factionColumn::get() {
        return this->columnfaction;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::EntityDataTable::usesPhysicsColumn::get() {
        return this->columnusesPhysics;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::EntityDataTable::Entity_IdColumn::get() {
        return this->columnEntity_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::EntityDataTable::WorldState_IdColumn::get() {
        return this->columnWorldState_Id;
    }
    
    inline ::System::Int32 NewDataSet::EntityDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline test::NewDataSet::EntityRow^  NewDataSet::EntityDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<test::NewDataSet::EntityRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::EntityDataTable::AddEntityRow(test::NewDataSet::EntityRow^  row) {
        this->Rows->Add(row);
    }
    
    inline test::NewDataSet::EntityRow^  NewDataSet::EntityDataTable::AddEntityRow(
                System::String^  description, 
                System::String^  id, 
                System::String^  name, 
                System::Double xPosition, 
                System::Double yPosition, 
                System::Int64 movementHeading, 
                System::Int64 movementSpeed, 
                System::Int64 accelerationMagnitude, 
                System::Int64 accelerationHeading, 
                System::Boolean isPlayer, 
                System::String^  faction, 
                System::Boolean usesPhysics, 
                test::NewDataSet::WorldStateRow^  parentWorldStateRowByWorldState_Entity) {
        test::NewDataSet::EntityRow^  rowEntityRow = (cli::safe_cast<test::NewDataSet::EntityRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(14) {description, id, name, 
            xPosition, yPosition, movementHeading, movementSpeed, accelerationMagnitude, accelerationHeading, isPlayer, faction, usesPhysics, 
            nullptr, nullptr};
        if (parentWorldStateRowByWorldState_Entity != nullptr) {
            columnValuesArray[13] = parentWorldStateRowByWorldState_Entity[6];
        }
        rowEntityRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowEntityRow);
        return rowEntityRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::EntityDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::EntityDataTable::Clone() {
        test::NewDataSet::EntityDataTable^  cln = (cli::safe_cast<test::NewDataSet::EntityDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::EntityDataTable::CreateInstance() {
        return (gcnew test::NewDataSet::EntityDataTable());
    }
    
    inline ::System::Void NewDataSet::EntityDataTable::InitVars() {
        this->columndescription = __super::Columns[L"description"];
        this->columnid = __super::Columns[L"id"];
        this->columnname = __super::Columns[L"name"];
        this->columnxPosition = __super::Columns[L"xPosition"];
        this->columnyPosition = __super::Columns[L"yPosition"];
        this->columnmovementHeading = __super::Columns[L"movementHeading"];
        this->columnmovementSpeed = __super::Columns[L"movementSpeed"];
        this->columnaccelerationMagnitude = __super::Columns[L"accelerationMagnitude"];
        this->columnaccelerationHeading = __super::Columns[L"accelerationHeading"];
        this->columnisPlayer = __super::Columns[L"isPlayer"];
        this->columnfaction = __super::Columns[L"faction"];
        this->columnusesPhysics = __super::Columns[L"usesPhysics"];
        this->columnEntity_Id = __super::Columns[L"Entity_Id"];
        this->columnWorldState_Id = __super::Columns[L"WorldState_Id"];
    }
    
    inline ::System::Void NewDataSet::EntityDataTable::InitClass() {
        this->columndescription = (gcnew ::System::Data::DataColumn(L"description", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columndescription);
        this->columnid = (gcnew ::System::Data::DataColumn(L"id", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnid);
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnxPosition = (gcnew ::System::Data::DataColumn(L"xPosition", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnxPosition);
        this->columnyPosition = (gcnew ::System::Data::DataColumn(L"yPosition", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnyPosition);
        this->columnmovementHeading = (gcnew ::System::Data::DataColumn(L"movementHeading", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnmovementHeading);
        this->columnmovementSpeed = (gcnew ::System::Data::DataColumn(L"movementSpeed", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnmovementSpeed);
        this->columnaccelerationMagnitude = (gcnew ::System::Data::DataColumn(L"accelerationMagnitude", ::System::Int64::typeid, 
            nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnaccelerationMagnitude);
        this->columnaccelerationHeading = (gcnew ::System::Data::DataColumn(L"accelerationHeading", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnaccelerationHeading);
        this->columnisPlayer = (gcnew ::System::Data::DataColumn(L"isPlayer", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnisPlayer);
        this->columnfaction = (gcnew ::System::Data::DataColumn(L"faction", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnfaction);
        this->columnusesPhysics = (gcnew ::System::Data::DataColumn(L"usesPhysics", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnusesPhysics);
        this->columnEntity_Id = (gcnew ::System::Data::DataColumn(L"Entity_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnEntity_Id);
        this->columnWorldState_Id = (gcnew ::System::Data::DataColumn(L"WorldState_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnWorldState_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnEntity_Id}, 
                true)));
        this->columndescription->Namespace = L"";
        this->columndescription->DefaultValue = (cli::safe_cast<System::String^  >(L""));
        this->columnid->Namespace = L"";
        this->columnname->Namespace = L"";
        this->columnname->DefaultValue = (cli::safe_cast<System::String^  >(L"NoName"));
        this->columnxPosition->Namespace = L"";
        this->columnxPosition->DefaultValue = static_cast<System::Double>(0);
        this->columnyPosition->Namespace = L"";
        this->columnyPosition->DefaultValue = static_cast<System::Double>(0);
        this->columnmovementHeading->Namespace = L"";
        this->columnmovementHeading->DefaultValue = static_cast<System::Int64>(0);
        this->columnmovementSpeed->Namespace = L"";
        this->columnmovementSpeed->DefaultValue = static_cast<System::Int64>(0);
        this->columnaccelerationMagnitude->Namespace = L"";
        this->columnaccelerationMagnitude->DefaultValue = static_cast<System::Int64>(0);
        this->columnaccelerationHeading->Namespace = L"";
        this->columnaccelerationHeading->DefaultValue = static_cast<System::Int64>(0);
        this->columnisPlayer->Namespace = L"";
        this->columnisPlayer->DefaultValue = static_cast<System::Boolean>(false);
        this->columnfaction->Namespace = L"";
        this->columnfaction->DefaultValue = (cli::safe_cast<System::String^  >(L"none"));
        this->columnusesPhysics->Namespace = L"http://code.google.com/p/snow-leopard/";
        this->columnusesPhysics->DefaultValue = static_cast<System::Boolean>(true);
        this->columnEntity_Id->AutoIncrement = true;
        this->columnEntity_Id->AllowDBNull = false;
        this->columnEntity_Id->Unique = true;
    }
    
    inline test::NewDataSet::EntityRow^  NewDataSet::EntityDataTable::NewEntityRow() {
        return (cli::safe_cast<test::NewDataSet::EntityRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::EntityDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew test::NewDataSet::EntityRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::EntityDataTable::GetRowType() {
        return test::NewDataSet::EntityRow::typeid;
    }
    
    inline ::System::Void NewDataSet::EntityDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->EntityRowChanged(this, (gcnew test::NewDataSet::EntityRowChangeEvent((cli::safe_cast<test::NewDataSet::EntityRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::EntityDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->EntityRowChanging(this, (gcnew test::NewDataSet::EntityRowChangeEvent((cli::safe_cast<test::NewDataSet::EntityRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::EntityDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->EntityRowDeleted(this, (gcnew test::NewDataSet::EntityRowChangeEvent((cli::safe_cast<test::NewDataSet::EntityRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::EntityDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->EntityRowDeleting(this, (gcnew test::NewDataSet::EntityRowChangeEvent((cli::safe_cast<test::NewDataSet::EntityRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::EntityDataTable::RemoveEntityRow(test::NewDataSet::EntityRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::EntityDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        test::NewDataSet^  ds = (gcnew test::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"EntityDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::BaseImageDataTable::BaseImageDataTable() {
        this->TableName = L"BaseImage";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::BaseImageDataTable::BaseImageDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::BaseImageDataTable::BaseImageDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::BaseImageDataTable::descriptionColumn::get() {
        return this->columndescription;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::BaseImageDataTable::idColumn::get() {
        return this->columnid;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::BaseImageDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::BaseImageDataTable::pictureSourceColumn::get() {
        return this->columnpictureSource;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::BaseImageDataTable::scaleColumn::get() {
        return this->columnscale;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::BaseImageDataTable::base_angleColumn::get() {
        return this->columnbase_angle;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::BaseImageDataTable::current_angleColumn::get() {
        return this->columncurrent_angle;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::BaseImageDataTable::translation_originColumn::get() {
        return this->columntranslation_origin;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::BaseImageDataTable::rotation_originColumn::get() {
        return this->columnrotation_origin;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::BaseImageDataTable::translation_offset_xColumn::get() {
        return this->columntranslation_offset_x;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::BaseImageDataTable::translation_offset_yColumn::get() {
        return this->columntranslation_offset_y;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::BaseImageDataTable::rotation_offset_xColumn::get() {
        return this->columnrotation_offset_x;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::BaseImageDataTable::rotation_offset_yColumn::get() {
        return this->columnrotation_offset_y;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::BaseImageDataTable::Entity_IdColumn::get() {
        return this->columnEntity_Id;
    }
    
    inline ::System::Int32 NewDataSet::BaseImageDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline test::NewDataSet::BaseImageRow^  NewDataSet::BaseImageDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<test::NewDataSet::BaseImageRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::BaseImageDataTable::AddBaseImageRow(test::NewDataSet::BaseImageRow^  row) {
        this->Rows->Add(row);
    }
    
    inline test::NewDataSet::BaseImageRow^  NewDataSet::BaseImageDataTable::AddBaseImageRow(
                System::String^  description, 
                System::String^  id, 
                System::String^  name, 
                System::String^  pictureSource, 
                System::Int64 scale, 
                System::Int64 base_angle, 
                System::Int64 current_angle, 
                System::String^  translation_origin, 
                System::String^  rotation_origin, 
                System::Int64 translation_offset_x, 
                System::Int64 translation_offset_y, 
                System::Int64 rotation_offset_x, 
                System::Int64 rotation_offset_y, 
                test::NewDataSet::EntityRow^  parentEntityRowByEntity_BaseImage) {
        test::NewDataSet::BaseImageRow^  rowBaseImageRow = (cli::safe_cast<test::NewDataSet::BaseImageRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(14) {description, id, name, 
            pictureSource, scale, base_angle, current_angle, translation_origin, rotation_origin, translation_offset_x, translation_offset_y, 
            rotation_offset_x, rotation_offset_y, nullptr};
        if (parentEntityRowByEntity_BaseImage != nullptr) {
            columnValuesArray[13] = parentEntityRowByEntity_BaseImage[12];
        }
        rowBaseImageRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowBaseImageRow);
        return rowBaseImageRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::BaseImageDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::BaseImageDataTable::Clone() {
        test::NewDataSet::BaseImageDataTable^  cln = (cli::safe_cast<test::NewDataSet::BaseImageDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::BaseImageDataTable::CreateInstance() {
        return (gcnew test::NewDataSet::BaseImageDataTable());
    }
    
    inline ::System::Void NewDataSet::BaseImageDataTable::InitVars() {
        this->columndescription = __super::Columns[L"description"];
        this->columnid = __super::Columns[L"id"];
        this->columnname = __super::Columns[L"name"];
        this->columnpictureSource = __super::Columns[L"pictureSource"];
        this->columnscale = __super::Columns[L"scale"];
        this->columnbase_angle = __super::Columns[L"base_angle"];
        this->columncurrent_angle = __super::Columns[L"current_angle"];
        this->columntranslation_origin = __super::Columns[L"translation_origin"];
        this->columnrotation_origin = __super::Columns[L"rotation_origin"];
        this->columntranslation_offset_x = __super::Columns[L"translation_offset_x"];
        this->columntranslation_offset_y = __super::Columns[L"translation_offset_y"];
        this->columnrotation_offset_x = __super::Columns[L"rotation_offset_x"];
        this->columnrotation_offset_y = __super::Columns[L"rotation_offset_y"];
        this->columnEntity_Id = __super::Columns[L"Entity_Id"];
    }
    
    inline ::System::Void NewDataSet::BaseImageDataTable::InitClass() {
        this->columndescription = (gcnew ::System::Data::DataColumn(L"description", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columndescription);
        this->columnid = (gcnew ::System::Data::DataColumn(L"id", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnid);
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnpictureSource = (gcnew ::System::Data::DataColumn(L"pictureSource", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnpictureSource);
        this->columnscale = (gcnew ::System::Data::DataColumn(L"scale", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnscale);
        this->columnbase_angle = (gcnew ::System::Data::DataColumn(L"base_angle", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnbase_angle);
        this->columncurrent_angle = (gcnew ::System::Data::DataColumn(L"current_angle", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columncurrent_angle);
        this->columntranslation_origin = (gcnew ::System::Data::DataColumn(L"translation_origin", ::System::String::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columntranslation_origin);
        this->columnrotation_origin = (gcnew ::System::Data::DataColumn(L"rotation_origin", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnrotation_origin);
        this->columntranslation_offset_x = (gcnew ::System::Data::DataColumn(L"translation_offset_x", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columntranslation_offset_x);
        this->columntranslation_offset_y = (gcnew ::System::Data::DataColumn(L"translation_offset_y", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columntranslation_offset_y);
        this->columnrotation_offset_x = (gcnew ::System::Data::DataColumn(L"rotation_offset_x", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnrotation_offset_x);
        this->columnrotation_offset_y = (gcnew ::System::Data::DataColumn(L"rotation_offset_y", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnrotation_offset_y);
        this->columnEntity_Id = (gcnew ::System::Data::DataColumn(L"Entity_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnEntity_Id);
        this->columndescription->Namespace = L"";
        this->columndescription->DefaultValue = (cli::safe_cast<System::String^  >(L""));
        this->columnid->Namespace = L"";
        this->columnname->Namespace = L"";
        this->columnname->DefaultValue = (cli::safe_cast<System::String^  >(L"NoName"));
        this->columnpictureSource->Namespace = L"";
        this->columnscale->Namespace = L"";
        this->columnscale->DefaultValue = static_cast<System::Int64>(20);
        this->columnbase_angle->Namespace = L"";
        this->columnbase_angle->DefaultValue = static_cast<System::Int64>(0);
        this->columncurrent_angle->Namespace = L"";
        this->columncurrent_angle->DefaultValue = static_cast<System::Int64>(0);
        this->columntranslation_origin->Namespace = L"";
        this->columntranslation_origin->DefaultValue = (cli::safe_cast<System::String^  >(L"center"));
        this->columnrotation_origin->Namespace = L"";
        this->columnrotation_origin->DefaultValue = (cli::safe_cast<System::String^  >(L"center"));
        this->columntranslation_offset_x->Namespace = L"";
        this->columntranslation_offset_x->DefaultValue = static_cast<System::Int64>(0);
        this->columntranslation_offset_y->Namespace = L"";
        this->columntranslation_offset_y->DefaultValue = static_cast<System::Int64>(0);
        this->columnrotation_offset_x->Namespace = L"";
        this->columnrotation_offset_x->DefaultValue = static_cast<System::Int64>(0);
        this->columnrotation_offset_y->Namespace = L"";
        this->columnrotation_offset_y->DefaultValue = static_cast<System::Int64>(0);
    }
    
    inline test::NewDataSet::BaseImageRow^  NewDataSet::BaseImageDataTable::NewBaseImageRow() {
        return (cli::safe_cast<test::NewDataSet::BaseImageRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::BaseImageDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew test::NewDataSet::BaseImageRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::BaseImageDataTable::GetRowType() {
        return test::NewDataSet::BaseImageRow::typeid;
    }
    
    inline ::System::Void NewDataSet::BaseImageDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->BaseImageRowChanged(this, (gcnew test::NewDataSet::BaseImageRowChangeEvent((cli::safe_cast<test::NewDataSet::BaseImageRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::BaseImageDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->BaseImageRowChanging(this, (gcnew test::NewDataSet::BaseImageRowChangeEvent((cli::safe_cast<test::NewDataSet::BaseImageRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::BaseImageDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->BaseImageRowDeleted(this, (gcnew test::NewDataSet::BaseImageRowChangeEvent((cli::safe_cast<test::NewDataSet::BaseImageRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::BaseImageDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->BaseImageRowDeleting(this, (gcnew test::NewDataSet::BaseImageRowChangeEvent((cli::safe_cast<test::NewDataSet::BaseImageRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::BaseImageDataTable::RemoveBaseImageRow(test::NewDataSet::BaseImageRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::BaseImageDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        test::NewDataSet^  ds = (gcnew test::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"BaseImageDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::SocketDataTable::SocketDataTable() {
        this->TableName = L"Socket";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::SocketDataTable::SocketDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::SocketDataTable::SocketDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::SocketDataTable::descriptionColumn::get() {
        return this->columndescription;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::SocketDataTable::idColumn::get() {
        return this->columnid;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::SocketDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::SocketDataTable::xPositionColumn::get() {
        return this->columnxPosition;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::SocketDataTable::yPositionColumn::get() {
        return this->columnyPosition;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::SocketDataTable::massColumn::get() {
        return this->columnmass;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::SocketDataTable::energyColumn::get() {
        return this->columnenergy;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::SocketDataTable::typeColumn::get() {
        return this->columntype;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::SocketDataTable::Socket_IdColumn::get() {
        return this->columnSocket_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::SocketDataTable::Entity_IdColumn::get() {
        return this->columnEntity_Id;
    }
    
    inline ::System::Int32 NewDataSet::SocketDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline test::NewDataSet::SocketRow^  NewDataSet::SocketDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<test::NewDataSet::SocketRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::SocketDataTable::AddSocketRow(test::NewDataSet::SocketRow^  row) {
        this->Rows->Add(row);
    }
    
    inline test::NewDataSet::SocketRow^  NewDataSet::SocketDataTable::AddSocketRow(
                System::String^  description, 
                System::String^  id, 
                System::String^  name, 
                System::Double xPosition, 
                System::Double yPosition, 
                System::Int64 mass, 
                System::Int64 energy, 
                System::String^  type, 
                test::NewDataSet::EntityRow^  parentEntityRowByEntity_Socket) {
        test::NewDataSet::SocketRow^  rowSocketRow = (cli::safe_cast<test::NewDataSet::SocketRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(10) {description, id, name, 
            xPosition, yPosition, mass, energy, type, nullptr, nullptr};
        if (parentEntityRowByEntity_Socket != nullptr) {
            columnValuesArray[9] = parentEntityRowByEntity_Socket[12];
        }
        rowSocketRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowSocketRow);
        return rowSocketRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::SocketDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::SocketDataTable::Clone() {
        test::NewDataSet::SocketDataTable^  cln = (cli::safe_cast<test::NewDataSet::SocketDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::SocketDataTable::CreateInstance() {
        return (gcnew test::NewDataSet::SocketDataTable());
    }
    
    inline ::System::Void NewDataSet::SocketDataTable::InitVars() {
        this->columndescription = __super::Columns[L"description"];
        this->columnid = __super::Columns[L"id"];
        this->columnname = __super::Columns[L"name"];
        this->columnxPosition = __super::Columns[L"xPosition"];
        this->columnyPosition = __super::Columns[L"yPosition"];
        this->columnmass = __super::Columns[L"mass"];
        this->columnenergy = __super::Columns[L"energy"];
        this->columntype = __super::Columns[L"type"];
        this->columnSocket_Id = __super::Columns[L"Socket_Id"];
        this->columnEntity_Id = __super::Columns[L"Entity_Id"];
    }
    
    inline ::System::Void NewDataSet::SocketDataTable::InitClass() {
        this->columndescription = (gcnew ::System::Data::DataColumn(L"description", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columndescription);
        this->columnid = (gcnew ::System::Data::DataColumn(L"id", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnid);
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnxPosition = (gcnew ::System::Data::DataColumn(L"xPosition", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnxPosition);
        this->columnyPosition = (gcnew ::System::Data::DataColumn(L"yPosition", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnyPosition);
        this->columnmass = (gcnew ::System::Data::DataColumn(L"mass", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnmass);
        this->columnenergy = (gcnew ::System::Data::DataColumn(L"energy", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnenergy);
        this->columntype = (gcnew ::System::Data::DataColumn(L"type", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columntype);
        this->columnSocket_Id = (gcnew ::System::Data::DataColumn(L"Socket_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnSocket_Id);
        this->columnEntity_Id = (gcnew ::System::Data::DataColumn(L"Entity_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnEntity_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnSocket_Id}, 
                true)));
        this->columndescription->Namespace = L"";
        this->columndescription->DefaultValue = (cli::safe_cast<System::String^  >(L""));
        this->columnid->Namespace = L"";
        this->columnname->Namespace = L"";
        this->columnname->DefaultValue = (cli::safe_cast<System::String^  >(L"NoName"));
        this->columnxPosition->Namespace = L"";
        this->columnxPosition->DefaultValue = static_cast<System::Double>(0);
        this->columnyPosition->Namespace = L"";
        this->columnyPosition->DefaultValue = static_cast<System::Double>(0);
        this->columnmass->Namespace = L"";
        this->columnmass->DefaultValue = static_cast<System::Int64>(20);
        this->columnenergy->Namespace = L"";
        this->columnenergy->DefaultValue = static_cast<System::Int64>(20);
        this->columntype->Namespace = L"";
        this->columntype->DefaultValue = (cli::safe_cast<System::String^  >(L"Triangle"));
        this->columnSocket_Id->AutoIncrement = true;
        this->columnSocket_Id->AllowDBNull = false;
        this->columnSocket_Id->Unique = true;
    }
    
    inline test::NewDataSet::SocketRow^  NewDataSet::SocketDataTable::NewSocketRow() {
        return (cli::safe_cast<test::NewDataSet::SocketRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::SocketDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew test::NewDataSet::SocketRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::SocketDataTable::GetRowType() {
        return test::NewDataSet::SocketRow::typeid;
    }
    
    inline ::System::Void NewDataSet::SocketDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->SocketRowChanged(this, (gcnew test::NewDataSet::SocketRowChangeEvent((cli::safe_cast<test::NewDataSet::SocketRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::SocketDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->SocketRowChanging(this, (gcnew test::NewDataSet::SocketRowChangeEvent((cli::safe_cast<test::NewDataSet::SocketRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::SocketDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->SocketRowDeleted(this, (gcnew test::NewDataSet::SocketRowChangeEvent((cli::safe_cast<test::NewDataSet::SocketRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::SocketDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->SocketRowDeleting(this, (gcnew test::NewDataSet::SocketRowChangeEvent((cli::safe_cast<test::NewDataSet::SocketRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::SocketDataTable::RemoveSocketRow(test::NewDataSet::SocketRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::SocketDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        test::NewDataSet^  ds = (gcnew test::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"SocketDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::Beam_WeaponDataTable::Beam_WeaponDataTable() {
        this->TableName = L"Beam_Weapon";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::Beam_WeaponDataTable::Beam_WeaponDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::Beam_WeaponDataTable::Beam_WeaponDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Beam_WeaponDataTable::descriptionColumn::get() {
        return this->columndescription;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Beam_WeaponDataTable::idColumn::get() {
        return this->columnid;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Beam_WeaponDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Beam_WeaponDataTable::pictureSourceColumn::get() {
        return this->columnpictureSource;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Beam_WeaponDataTable::scaleColumn::get() {
        return this->columnscale;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Beam_WeaponDataTable::base_angleColumn::get() {
        return this->columnbase_angle;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Beam_WeaponDataTable::current_angleColumn::get() {
        return this->columncurrent_angle;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Beam_WeaponDataTable::translation_originColumn::get() {
        return this->columntranslation_origin;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Beam_WeaponDataTable::rotation_originColumn::get() {
        return this->columnrotation_origin;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Beam_WeaponDataTable::translation_offset_xColumn::get() {
        return this->columntranslation_offset_x;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Beam_WeaponDataTable::translation_offset_yColumn::get() {
        return this->columntranslation_offset_y;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Beam_WeaponDataTable::rotation_offset_xColumn::get() {
        return this->columnrotation_offset_x;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Beam_WeaponDataTable::rotation_offset_yColumn::get() {
        return this->columnrotation_offset_y;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Beam_WeaponDataTable::capacitor_typeColumn::get() {
        return this->columncapacitor_type;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Beam_WeaponDataTable::capacitor_amountColumn::get() {
        return this->columncapacitor_amount;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Beam_WeaponDataTable::movementHeadingColumn::get() {
        return this->columnmovementHeading;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Beam_WeaponDataTable::movementSpeedColumn::get() {
        return this->columnmovementSpeed;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Beam_WeaponDataTable::accelerationMagnitudeColumn::get() {
        return this->columnaccelerationMagnitude;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Beam_WeaponDataTable::accelerationHeadingColumn::get() {
        return this->columnaccelerationHeading;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Beam_WeaponDataTable::Socket_IdColumn::get() {
        return this->columnSocket_Id;
    }
    
    inline ::System::Int32 NewDataSet::Beam_WeaponDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline test::NewDataSet::Beam_WeaponRow^  NewDataSet::Beam_WeaponDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<test::NewDataSet::Beam_WeaponRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::Beam_WeaponDataTable::AddBeam_WeaponRow(test::NewDataSet::Beam_WeaponRow^  row) {
        this->Rows->Add(row);
    }
    
    inline test::NewDataSet::Beam_WeaponRow^  NewDataSet::Beam_WeaponDataTable::AddBeam_WeaponRow(
                System::String^  description, 
                System::String^  id, 
                System::String^  name, 
                System::String^  pictureSource, 
                System::Int64 scale, 
                System::Int64 base_angle, 
                System::Int64 current_angle, 
                System::String^  translation_origin, 
                System::String^  rotation_origin, 
                System::Int64 translation_offset_x, 
                System::Int64 translation_offset_y, 
                System::Int64 rotation_offset_x, 
                System::Int64 rotation_offset_y, 
                System::String^  capacitor_type, 
                System::Int64 capacitor_amount, 
                System::Int64 movementHeading, 
                System::Int64 movementSpeed, 
                System::Int64 accelerationMagnitude, 
                System::Int64 accelerationHeading, 
                test::NewDataSet::SocketRow^  parentSocketRowBySocket_Beam_Weapon) {
        test::NewDataSet::Beam_WeaponRow^  rowBeam_WeaponRow = (cli::safe_cast<test::NewDataSet::Beam_WeaponRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(20) {description, id, name, 
            pictureSource, scale, base_angle, current_angle, translation_origin, rotation_origin, translation_offset_x, translation_offset_y, 
            rotation_offset_x, rotation_offset_y, capacitor_type, capacitor_amount, movementHeading, movementSpeed, accelerationMagnitude, 
            accelerationHeading, nullptr};
        if (parentSocketRowBySocket_Beam_Weapon != nullptr) {
            columnValuesArray[19] = parentSocketRowBySocket_Beam_Weapon[8];
        }
        rowBeam_WeaponRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowBeam_WeaponRow);
        return rowBeam_WeaponRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::Beam_WeaponDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::Beam_WeaponDataTable::Clone() {
        test::NewDataSet::Beam_WeaponDataTable^  cln = (cli::safe_cast<test::NewDataSet::Beam_WeaponDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::Beam_WeaponDataTable::CreateInstance() {
        return (gcnew test::NewDataSet::Beam_WeaponDataTable());
    }
    
    inline ::System::Void NewDataSet::Beam_WeaponDataTable::InitVars() {
        this->columndescription = __super::Columns[L"description"];
        this->columnid = __super::Columns[L"id"];
        this->columnname = __super::Columns[L"name"];
        this->columnpictureSource = __super::Columns[L"pictureSource"];
        this->columnscale = __super::Columns[L"scale"];
        this->columnbase_angle = __super::Columns[L"base_angle"];
        this->columncurrent_angle = __super::Columns[L"current_angle"];
        this->columntranslation_origin = __super::Columns[L"translation_origin"];
        this->columnrotation_origin = __super::Columns[L"rotation_origin"];
        this->columntranslation_offset_x = __super::Columns[L"translation_offset_x"];
        this->columntranslation_offset_y = __super::Columns[L"translation_offset_y"];
        this->columnrotation_offset_x = __super::Columns[L"rotation_offset_x"];
        this->columnrotation_offset_y = __super::Columns[L"rotation_offset_y"];
        this->columncapacitor_type = __super::Columns[L"capacitor_type"];
        this->columncapacitor_amount = __super::Columns[L"capacitor_amount"];
        this->columnmovementHeading = __super::Columns[L"movementHeading"];
        this->columnmovementSpeed = __super::Columns[L"movementSpeed"];
        this->columnaccelerationMagnitude = __super::Columns[L"accelerationMagnitude"];
        this->columnaccelerationHeading = __super::Columns[L"accelerationHeading"];
        this->columnSocket_Id = __super::Columns[L"Socket_Id"];
    }
    
    inline ::System::Void NewDataSet::Beam_WeaponDataTable::InitClass() {
        this->columndescription = (gcnew ::System::Data::DataColumn(L"description", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columndescription);
        this->columnid = (gcnew ::System::Data::DataColumn(L"id", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnid);
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnpictureSource = (gcnew ::System::Data::DataColumn(L"pictureSource", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnpictureSource);
        this->columnscale = (gcnew ::System::Data::DataColumn(L"scale", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnscale);
        this->columnbase_angle = (gcnew ::System::Data::DataColumn(L"base_angle", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnbase_angle);
        this->columncurrent_angle = (gcnew ::System::Data::DataColumn(L"current_angle", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columncurrent_angle);
        this->columntranslation_origin = (gcnew ::System::Data::DataColumn(L"translation_origin", ::System::String::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columntranslation_origin);
        this->columnrotation_origin = (gcnew ::System::Data::DataColumn(L"rotation_origin", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnrotation_origin);
        this->columntranslation_offset_x = (gcnew ::System::Data::DataColumn(L"translation_offset_x", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columntranslation_offset_x);
        this->columntranslation_offset_y = (gcnew ::System::Data::DataColumn(L"translation_offset_y", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columntranslation_offset_y);
        this->columnrotation_offset_x = (gcnew ::System::Data::DataColumn(L"rotation_offset_x", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnrotation_offset_x);
        this->columnrotation_offset_y = (gcnew ::System::Data::DataColumn(L"rotation_offset_y", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnrotation_offset_y);
        this->columncapacitor_type = (gcnew ::System::Data::DataColumn(L"capacitor_type", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columncapacitor_type);
        this->columncapacitor_amount = (gcnew ::System::Data::DataColumn(L"capacitor_amount", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columncapacitor_amount);
        this->columnmovementHeading = (gcnew ::System::Data::DataColumn(L"movementHeading", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnmovementHeading);
        this->columnmovementSpeed = (gcnew ::System::Data::DataColumn(L"movementSpeed", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnmovementSpeed);
        this->columnaccelerationMagnitude = (gcnew ::System::Data::DataColumn(L"accelerationMagnitude", ::System::Int64::typeid, 
            nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnaccelerationMagnitude);
        this->columnaccelerationHeading = (gcnew ::System::Data::DataColumn(L"accelerationHeading", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnaccelerationHeading);
        this->columnSocket_Id = (gcnew ::System::Data::DataColumn(L"Socket_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnSocket_Id);
        this->columndescription->Namespace = L"";
        this->columndescription->DefaultValue = (cli::safe_cast<System::String^  >(L""));
        this->columnid->Namespace = L"";
        this->columnname->Namespace = L"";
        this->columnname->DefaultValue = (cli::safe_cast<System::String^  >(L"NoName"));
        this->columnpictureSource->Namespace = L"";
        this->columnscale->Namespace = L"";
        this->columnscale->DefaultValue = static_cast<System::Int64>(20);
        this->columnbase_angle->Namespace = L"";
        this->columnbase_angle->DefaultValue = static_cast<System::Int64>(0);
        this->columncurrent_angle->Namespace = L"";
        this->columncurrent_angle->DefaultValue = static_cast<System::Int64>(0);
        this->columntranslation_origin->Namespace = L"";
        this->columntranslation_origin->DefaultValue = (cli::safe_cast<System::String^  >(L"center"));
        this->columnrotation_origin->Namespace = L"";
        this->columnrotation_origin->DefaultValue = (cli::safe_cast<System::String^  >(L"center"));
        this->columntranslation_offset_x->Namespace = L"";
        this->columntranslation_offset_x->DefaultValue = static_cast<System::Int64>(0);
        this->columntranslation_offset_y->Namespace = L"";
        this->columntranslation_offset_y->DefaultValue = static_cast<System::Int64>(0);
        this->columnrotation_offset_x->Namespace = L"";
        this->columnrotation_offset_x->DefaultValue = static_cast<System::Int64>(0);
        this->columnrotation_offset_y->Namespace = L"";
        this->columnrotation_offset_y->DefaultValue = static_cast<System::Int64>(0);
        this->columncapacitor_type->Namespace = L"";
        this->columncapacitor_amount->Namespace = L"";
        this->columncapacitor_amount->DefaultValue = static_cast<System::Int64>(0);
        this->columnmovementHeading->Namespace = L"";
        this->columnmovementHeading->DefaultValue = static_cast<System::Int64>(0);
        this->columnmovementSpeed->Namespace = L"";
        this->columnmovementSpeed->DefaultValue = static_cast<System::Int64>(0);
        this->columnaccelerationMagnitude->Namespace = L"";
        this->columnaccelerationMagnitude->DefaultValue = static_cast<System::Int64>(0);
        this->columnaccelerationHeading->Namespace = L"";
        this->columnaccelerationHeading->DefaultValue = static_cast<System::Int64>(0);
    }
    
    inline test::NewDataSet::Beam_WeaponRow^  NewDataSet::Beam_WeaponDataTable::NewBeam_WeaponRow() {
        return (cli::safe_cast<test::NewDataSet::Beam_WeaponRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::Beam_WeaponDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew test::NewDataSet::Beam_WeaponRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::Beam_WeaponDataTable::GetRowType() {
        return test::NewDataSet::Beam_WeaponRow::typeid;
    }
    
    inline ::System::Void NewDataSet::Beam_WeaponDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->Beam_WeaponRowChanged(this, (gcnew test::NewDataSet::Beam_WeaponRowChangeEvent((cli::safe_cast<test::NewDataSet::Beam_WeaponRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::Beam_WeaponDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->Beam_WeaponRowChanging(this, (gcnew test::NewDataSet::Beam_WeaponRowChangeEvent((cli::safe_cast<test::NewDataSet::Beam_WeaponRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::Beam_WeaponDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->Beam_WeaponRowDeleted(this, (gcnew test::NewDataSet::Beam_WeaponRowChangeEvent((cli::safe_cast<test::NewDataSet::Beam_WeaponRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::Beam_WeaponDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->Beam_WeaponRowDeleting(this, (gcnew test::NewDataSet::Beam_WeaponRowChangeEvent((cli::safe_cast<test::NewDataSet::Beam_WeaponRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::Beam_WeaponDataTable::RemoveBeam_WeaponRow(test::NewDataSet::Beam_WeaponRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::Beam_WeaponDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        test::NewDataSet^  ds = (gcnew test::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"Beam_WeaponDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::Gun_WeaponDataTable::Gun_WeaponDataTable() {
        this->TableName = L"Gun_Weapon";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::Gun_WeaponDataTable::Gun_WeaponDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::Gun_WeaponDataTable::Gun_WeaponDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Gun_WeaponDataTable::descriptionColumn::get() {
        return this->columndescription;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Gun_WeaponDataTable::idColumn::get() {
        return this->columnid;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Gun_WeaponDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Gun_WeaponDataTable::pictureSourceColumn::get() {
        return this->columnpictureSource;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Gun_WeaponDataTable::scaleColumn::get() {
        return this->columnscale;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Gun_WeaponDataTable::base_angleColumn::get() {
        return this->columnbase_angle;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Gun_WeaponDataTable::current_angleColumn::get() {
        return this->columncurrent_angle;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Gun_WeaponDataTable::translation_originColumn::get() {
        return this->columntranslation_origin;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Gun_WeaponDataTable::rotation_originColumn::get() {
        return this->columnrotation_origin;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Gun_WeaponDataTable::translation_offset_xColumn::get() {
        return this->columntranslation_offset_x;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Gun_WeaponDataTable::translation_offset_yColumn::get() {
        return this->columntranslation_offset_y;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Gun_WeaponDataTable::rotation_offset_xColumn::get() {
        return this->columnrotation_offset_x;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Gun_WeaponDataTable::rotation_offset_yColumn::get() {
        return this->columnrotation_offset_y;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Gun_WeaponDataTable::subtypeColumn::get() {
        return this->columnsubtype;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Gun_WeaponDataTable::caliberColumn::get() {
        return this->columncaliber;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Gun_WeaponDataTable::movementHeadingColumn::get() {
        return this->columnmovementHeading;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Gun_WeaponDataTable::movementSpeedColumn::get() {
        return this->columnmovementSpeed;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Gun_WeaponDataTable::accelerationMagnitudeColumn::get() {
        return this->columnaccelerationMagnitude;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Gun_WeaponDataTable::accelerationHeadingColumn::get() {
        return this->columnaccelerationHeading;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Gun_WeaponDataTable::gun_ammo_typeColumn::get() {
        return this->columngun_ammo_type;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Gun_WeaponDataTable::gun_ammo_amountColumn::get() {
        return this->columngun_ammo_amount;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Gun_WeaponDataTable::Socket_IdColumn::get() {
        return this->columnSocket_Id;
    }
    
    inline ::System::Int32 NewDataSet::Gun_WeaponDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline test::NewDataSet::Gun_WeaponRow^  NewDataSet::Gun_WeaponDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<test::NewDataSet::Gun_WeaponRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::Gun_WeaponDataTable::AddGun_WeaponRow(test::NewDataSet::Gun_WeaponRow^  row) {
        this->Rows->Add(row);
    }
    
    inline test::NewDataSet::Gun_WeaponRow^  NewDataSet::Gun_WeaponDataTable::AddGun_WeaponRow(
                System::String^  description, 
                System::String^  id, 
                System::String^  name, 
                System::String^  pictureSource, 
                System::Int64 scale, 
                System::Int64 base_angle, 
                System::Int64 current_angle, 
                System::String^  translation_origin, 
                System::String^  rotation_origin, 
                System::Int64 translation_offset_x, 
                System::Int64 translation_offset_y, 
                System::Int64 rotation_offset_x, 
                System::Int64 rotation_offset_y, 
                System::String^  subtype, 
                System::Int64 caliber, 
                System::Int64 movementHeading, 
                System::Int64 movementSpeed, 
                System::Int64 accelerationMagnitude, 
                System::Int64 accelerationHeading, 
                System::String^  gun_ammo_type, 
                System::Int64 gun_ammo_amount, 
                test::NewDataSet::SocketRow^  parentSocketRowBySocket_Gun_Weapon) {
        test::NewDataSet::Gun_WeaponRow^  rowGun_WeaponRow = (cli::safe_cast<test::NewDataSet::Gun_WeaponRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(22) {description, id, name, 
            pictureSource, scale, base_angle, current_angle, translation_origin, rotation_origin, translation_offset_x, translation_offset_y, 
            rotation_offset_x, rotation_offset_y, subtype, caliber, movementHeading, movementSpeed, accelerationMagnitude, accelerationHeading, 
            gun_ammo_type, gun_ammo_amount, nullptr};
        if (parentSocketRowBySocket_Gun_Weapon != nullptr) {
            columnValuesArray[21] = parentSocketRowBySocket_Gun_Weapon[8];
        }
        rowGun_WeaponRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowGun_WeaponRow);
        return rowGun_WeaponRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::Gun_WeaponDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::Gun_WeaponDataTable::Clone() {
        test::NewDataSet::Gun_WeaponDataTable^  cln = (cli::safe_cast<test::NewDataSet::Gun_WeaponDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::Gun_WeaponDataTable::CreateInstance() {
        return (gcnew test::NewDataSet::Gun_WeaponDataTable());
    }
    
    inline ::System::Void NewDataSet::Gun_WeaponDataTable::InitVars() {
        this->columndescription = __super::Columns[L"description"];
        this->columnid = __super::Columns[L"id"];
        this->columnname = __super::Columns[L"name"];
        this->columnpictureSource = __super::Columns[L"pictureSource"];
        this->columnscale = __super::Columns[L"scale"];
        this->columnbase_angle = __super::Columns[L"base_angle"];
        this->columncurrent_angle = __super::Columns[L"current_angle"];
        this->columntranslation_origin = __super::Columns[L"translation_origin"];
        this->columnrotation_origin = __super::Columns[L"rotation_origin"];
        this->columntranslation_offset_x = __super::Columns[L"translation_offset_x"];
        this->columntranslation_offset_y = __super::Columns[L"translation_offset_y"];
        this->columnrotation_offset_x = __super::Columns[L"rotation_offset_x"];
        this->columnrotation_offset_y = __super::Columns[L"rotation_offset_y"];
        this->columnsubtype = __super::Columns[L"subtype"];
        this->columncaliber = __super::Columns[L"caliber"];
        this->columnmovementHeading = __super::Columns[L"movementHeading"];
        this->columnmovementSpeed = __super::Columns[L"movementSpeed"];
        this->columnaccelerationMagnitude = __super::Columns[L"accelerationMagnitude"];
        this->columnaccelerationHeading = __super::Columns[L"accelerationHeading"];
        this->columngun_ammo_type = __super::Columns[L"gun_ammo_type"];
        this->columngun_ammo_amount = __super::Columns[L"gun_ammo_amount"];
        this->columnSocket_Id = __super::Columns[L"Socket_Id"];
    }
    
    inline ::System::Void NewDataSet::Gun_WeaponDataTable::InitClass() {
        this->columndescription = (gcnew ::System::Data::DataColumn(L"description", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columndescription);
        this->columnid = (gcnew ::System::Data::DataColumn(L"id", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnid);
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnpictureSource = (gcnew ::System::Data::DataColumn(L"pictureSource", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnpictureSource);
        this->columnscale = (gcnew ::System::Data::DataColumn(L"scale", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnscale);
        this->columnbase_angle = (gcnew ::System::Data::DataColumn(L"base_angle", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnbase_angle);
        this->columncurrent_angle = (gcnew ::System::Data::DataColumn(L"current_angle", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columncurrent_angle);
        this->columntranslation_origin = (gcnew ::System::Data::DataColumn(L"translation_origin", ::System::String::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columntranslation_origin);
        this->columnrotation_origin = (gcnew ::System::Data::DataColumn(L"rotation_origin", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnrotation_origin);
        this->columntranslation_offset_x = (gcnew ::System::Data::DataColumn(L"translation_offset_x", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columntranslation_offset_x);
        this->columntranslation_offset_y = (gcnew ::System::Data::DataColumn(L"translation_offset_y", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columntranslation_offset_y);
        this->columnrotation_offset_x = (gcnew ::System::Data::DataColumn(L"rotation_offset_x", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnrotation_offset_x);
        this->columnrotation_offset_y = (gcnew ::System::Data::DataColumn(L"rotation_offset_y", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnrotation_offset_y);
        this->columnsubtype = (gcnew ::System::Data::DataColumn(L"subtype", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnsubtype);
        this->columncaliber = (gcnew ::System::Data::DataColumn(L"caliber", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columncaliber);
        this->columnmovementHeading = (gcnew ::System::Data::DataColumn(L"movementHeading", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnmovementHeading);
        this->columnmovementSpeed = (gcnew ::System::Data::DataColumn(L"movementSpeed", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnmovementSpeed);
        this->columnaccelerationMagnitude = (gcnew ::System::Data::DataColumn(L"accelerationMagnitude", ::System::Int64::typeid, 
            nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnaccelerationMagnitude);
        this->columnaccelerationHeading = (gcnew ::System::Data::DataColumn(L"accelerationHeading", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnaccelerationHeading);
        this->columngun_ammo_type = (gcnew ::System::Data::DataColumn(L"gun_ammo_type", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columngun_ammo_type);
        this->columngun_ammo_amount = (gcnew ::System::Data::DataColumn(L"gun_ammo_amount", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columngun_ammo_amount);
        this->columnSocket_Id = (gcnew ::System::Data::DataColumn(L"Socket_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnSocket_Id);
        this->columndescription->Namespace = L"";
        this->columndescription->DefaultValue = (cli::safe_cast<System::String^  >(L""));
        this->columnid->Namespace = L"";
        this->columnname->Namespace = L"";
        this->columnname->DefaultValue = (cli::safe_cast<System::String^  >(L"NoName"));
        this->columnpictureSource->Namespace = L"";
        this->columnscale->Namespace = L"";
        this->columnscale->DefaultValue = static_cast<System::Int64>(20);
        this->columnbase_angle->Namespace = L"";
        this->columnbase_angle->DefaultValue = static_cast<System::Int64>(0);
        this->columncurrent_angle->Namespace = L"";
        this->columncurrent_angle->DefaultValue = static_cast<System::Int64>(0);
        this->columntranslation_origin->Namespace = L"";
        this->columntranslation_origin->DefaultValue = (cli::safe_cast<System::String^  >(L"center"));
        this->columnrotation_origin->Namespace = L"";
        this->columnrotation_origin->DefaultValue = (cli::safe_cast<System::String^  >(L"center"));
        this->columntranslation_offset_x->Namespace = L"";
        this->columntranslation_offset_x->DefaultValue = static_cast<System::Int64>(0);
        this->columntranslation_offset_y->Namespace = L"";
        this->columntranslation_offset_y->DefaultValue = static_cast<System::Int64>(0);
        this->columnrotation_offset_x->Namespace = L"";
        this->columnrotation_offset_x->DefaultValue = static_cast<System::Int64>(0);
        this->columnrotation_offset_y->Namespace = L"";
        this->columnrotation_offset_y->DefaultValue = static_cast<System::Int64>(0);
        this->columnsubtype->Namespace = L"";
        this->columnsubtype->DefaultValue = (cli::safe_cast<System::String^  >(L"Machine Gun"));
        this->columncaliber->Namespace = L"";
        this->columncaliber->DefaultValue = static_cast<System::Int64>(5);
        this->columnmovementHeading->Namespace = L"";
        this->columnmovementHeading->DefaultValue = static_cast<System::Int64>(0);
        this->columnmovementSpeed->Namespace = L"";
        this->columnmovementSpeed->DefaultValue = static_cast<System::Int64>(0);
        this->columnaccelerationMagnitude->Namespace = L"";
        this->columnaccelerationMagnitude->DefaultValue = static_cast<System::Int64>(0);
        this->columnaccelerationHeading->Namespace = L"";
        this->columnaccelerationHeading->DefaultValue = static_cast<System::Int64>(0);
        this->columngun_ammo_type->Namespace = L"";
        this->columngun_ammo_type->DefaultValue = (cli::safe_cast<System::String^  >(L"Lead rounds"));
        this->columngun_ammo_amount->Namespace = L"";
        this->columngun_ammo_amount->DefaultValue = static_cast<System::Int64>(0);
    }
    
    inline test::NewDataSet::Gun_WeaponRow^  NewDataSet::Gun_WeaponDataTable::NewGun_WeaponRow() {
        return (cli::safe_cast<test::NewDataSet::Gun_WeaponRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::Gun_WeaponDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew test::NewDataSet::Gun_WeaponRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::Gun_WeaponDataTable::GetRowType() {
        return test::NewDataSet::Gun_WeaponRow::typeid;
    }
    
    inline ::System::Void NewDataSet::Gun_WeaponDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->Gun_WeaponRowChanged(this, (gcnew test::NewDataSet::Gun_WeaponRowChangeEvent((cli::safe_cast<test::NewDataSet::Gun_WeaponRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::Gun_WeaponDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->Gun_WeaponRowChanging(this, (gcnew test::NewDataSet::Gun_WeaponRowChangeEvent((cli::safe_cast<test::NewDataSet::Gun_WeaponRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::Gun_WeaponDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->Gun_WeaponRowDeleted(this, (gcnew test::NewDataSet::Gun_WeaponRowChangeEvent((cli::safe_cast<test::NewDataSet::Gun_WeaponRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::Gun_WeaponDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->Gun_WeaponRowDeleting(this, (gcnew test::NewDataSet::Gun_WeaponRowChangeEvent((cli::safe_cast<test::NewDataSet::Gun_WeaponRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::Gun_WeaponDataTable::RemoveGun_WeaponRow(test::NewDataSet::Gun_WeaponRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::Gun_WeaponDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        test::NewDataSet^  ds = (gcnew test::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"Gun_WeaponDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::Missile_WeaponDataTable::Missile_WeaponDataTable() {
        this->TableName = L"Missile_Weapon";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::Missile_WeaponDataTable::Missile_WeaponDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::Missile_WeaponDataTable::Missile_WeaponDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Missile_WeaponDataTable::descriptionColumn::get() {
        return this->columndescription;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Missile_WeaponDataTable::idColumn::get() {
        return this->columnid;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Missile_WeaponDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Missile_WeaponDataTable::pictureSourceColumn::get() {
        return this->columnpictureSource;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Missile_WeaponDataTable::scaleColumn::get() {
        return this->columnscale;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Missile_WeaponDataTable::base_angleColumn::get() {
        return this->columnbase_angle;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Missile_WeaponDataTable::current_angleColumn::get() {
        return this->columncurrent_angle;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Missile_WeaponDataTable::translation_originColumn::get() {
        return this->columntranslation_origin;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Missile_WeaponDataTable::rotation_originColumn::get() {
        return this->columnrotation_origin;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Missile_WeaponDataTable::translation_offset_xColumn::get() {
        return this->columntranslation_offset_x;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Missile_WeaponDataTable::translation_offset_yColumn::get() {
        return this->columntranslation_offset_y;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Missile_WeaponDataTable::rotation_offset_xColumn::get() {
        return this->columnrotation_offset_x;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Missile_WeaponDataTable::rotation_offset_yColumn::get() {
        return this->columnrotation_offset_y;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Missile_WeaponDataTable::missile_sizeColumn::get() {
        return this->columnmissile_size;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Missile_WeaponDataTable::multishotColumn::get() {
        return this->columnmultishot;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Missile_WeaponDataTable::missile_ammo_typeColumn::get() {
        return this->columnmissile_ammo_type;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Missile_WeaponDataTable::missile_ammo_amountColumn::get() {
        return this->columnmissile_ammo_amount;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Missile_WeaponDataTable::movementHeadingColumn::get() {
        return this->columnmovementHeading;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Missile_WeaponDataTable::movementSpeedColumn::get() {
        return this->columnmovementSpeed;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Missile_WeaponDataTable::accelerationMagnitudeColumn::get() {
        return this->columnaccelerationMagnitude;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Missile_WeaponDataTable::accelerationHeadingColumn::get() {
        return this->columnaccelerationHeading;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::Missile_WeaponDataTable::Socket_IdColumn::get() {
        return this->columnSocket_Id;
    }
    
    inline ::System::Int32 NewDataSet::Missile_WeaponDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline test::NewDataSet::Missile_WeaponRow^  NewDataSet::Missile_WeaponDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<test::NewDataSet::Missile_WeaponRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::Missile_WeaponDataTable::AddMissile_WeaponRow(test::NewDataSet::Missile_WeaponRow^  row) {
        this->Rows->Add(row);
    }
    
    inline test::NewDataSet::Missile_WeaponRow^  NewDataSet::Missile_WeaponDataTable::AddMissile_WeaponRow(
                System::String^  description, 
                System::String^  id, 
                System::String^  name, 
                System::String^  pictureSource, 
                System::Int64 scale, 
                System::Int64 base_angle, 
                System::Int64 current_angle, 
                System::String^  translation_origin, 
                System::String^  rotation_origin, 
                System::Int64 translation_offset_x, 
                System::Int64 translation_offset_y, 
                System::Int64 rotation_offset_x, 
                System::Int64 rotation_offset_y, 
                System::Int64 missile_size, 
                System::Int64 multishot, 
                System::String^  missile_ammo_type, 
                System::Int64 missile_ammo_amount, 
                System::Int64 movementHeading, 
                System::Int64 movementSpeed, 
                System::Int64 accelerationMagnitude, 
                System::Int64 accelerationHeading, 
                test::NewDataSet::SocketRow^  parentSocketRowBySocket_Missile_Weapon) {
        test::NewDataSet::Missile_WeaponRow^  rowMissile_WeaponRow = (cli::safe_cast<test::NewDataSet::Missile_WeaponRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(22) {description, id, name, 
            pictureSource, scale, base_angle, current_angle, translation_origin, rotation_origin, translation_offset_x, translation_offset_y, 
            rotation_offset_x, rotation_offset_y, missile_size, multishot, missile_ammo_type, missile_ammo_amount, movementHeading, movementSpeed, 
            accelerationMagnitude, accelerationHeading, nullptr};
        if (parentSocketRowBySocket_Missile_Weapon != nullptr) {
            columnValuesArray[21] = parentSocketRowBySocket_Missile_Weapon[8];
        }
        rowMissile_WeaponRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowMissile_WeaponRow);
        return rowMissile_WeaponRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::Missile_WeaponDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::Missile_WeaponDataTable::Clone() {
        test::NewDataSet::Missile_WeaponDataTable^  cln = (cli::safe_cast<test::NewDataSet::Missile_WeaponDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::Missile_WeaponDataTable::CreateInstance() {
        return (gcnew test::NewDataSet::Missile_WeaponDataTable());
    }
    
    inline ::System::Void NewDataSet::Missile_WeaponDataTable::InitVars() {
        this->columndescription = __super::Columns[L"description"];
        this->columnid = __super::Columns[L"id"];
        this->columnname = __super::Columns[L"name"];
        this->columnpictureSource = __super::Columns[L"pictureSource"];
        this->columnscale = __super::Columns[L"scale"];
        this->columnbase_angle = __super::Columns[L"base_angle"];
        this->columncurrent_angle = __super::Columns[L"current_angle"];
        this->columntranslation_origin = __super::Columns[L"translation_origin"];
        this->columnrotation_origin = __super::Columns[L"rotation_origin"];
        this->columntranslation_offset_x = __super::Columns[L"translation_offset_x"];
        this->columntranslation_offset_y = __super::Columns[L"translation_offset_y"];
        this->columnrotation_offset_x = __super::Columns[L"rotation_offset_x"];
        this->columnrotation_offset_y = __super::Columns[L"rotation_offset_y"];
        this->columnmissile_size = __super::Columns[L"missile_size"];
        this->columnmultishot = __super::Columns[L"multishot"];
        this->columnmissile_ammo_type = __super::Columns[L"missile_ammo_type"];
        this->columnmissile_ammo_amount = __super::Columns[L"missile_ammo_amount"];
        this->columnmovementHeading = __super::Columns[L"movementHeading"];
        this->columnmovementSpeed = __super::Columns[L"movementSpeed"];
        this->columnaccelerationMagnitude = __super::Columns[L"accelerationMagnitude"];
        this->columnaccelerationHeading = __super::Columns[L"accelerationHeading"];
        this->columnSocket_Id = __super::Columns[L"Socket_Id"];
    }
    
    inline ::System::Void NewDataSet::Missile_WeaponDataTable::InitClass() {
        this->columndescription = (gcnew ::System::Data::DataColumn(L"description", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columndescription);
        this->columnid = (gcnew ::System::Data::DataColumn(L"id", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnid);
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnpictureSource = (gcnew ::System::Data::DataColumn(L"pictureSource", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnpictureSource);
        this->columnscale = (gcnew ::System::Data::DataColumn(L"scale", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnscale);
        this->columnbase_angle = (gcnew ::System::Data::DataColumn(L"base_angle", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnbase_angle);
        this->columncurrent_angle = (gcnew ::System::Data::DataColumn(L"current_angle", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columncurrent_angle);
        this->columntranslation_origin = (gcnew ::System::Data::DataColumn(L"translation_origin", ::System::String::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columntranslation_origin);
        this->columnrotation_origin = (gcnew ::System::Data::DataColumn(L"rotation_origin", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnrotation_origin);
        this->columntranslation_offset_x = (gcnew ::System::Data::DataColumn(L"translation_offset_x", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columntranslation_offset_x);
        this->columntranslation_offset_y = (gcnew ::System::Data::DataColumn(L"translation_offset_y", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columntranslation_offset_y);
        this->columnrotation_offset_x = (gcnew ::System::Data::DataColumn(L"rotation_offset_x", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnrotation_offset_x);
        this->columnrotation_offset_y = (gcnew ::System::Data::DataColumn(L"rotation_offset_y", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnrotation_offset_y);
        this->columnmissile_size = (gcnew ::System::Data::DataColumn(L"missile_size", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnmissile_size);
        this->columnmultishot = (gcnew ::System::Data::DataColumn(L"multishot", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnmultishot);
        this->columnmissile_ammo_type = (gcnew ::System::Data::DataColumn(L"missile_ammo_type", ::System::String::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnmissile_ammo_type);
        this->columnmissile_ammo_amount = (gcnew ::System::Data::DataColumn(L"missile_ammo_amount", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnmissile_ammo_amount);
        this->columnmovementHeading = (gcnew ::System::Data::DataColumn(L"movementHeading", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnmovementHeading);
        this->columnmovementSpeed = (gcnew ::System::Data::DataColumn(L"movementSpeed", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnmovementSpeed);
        this->columnaccelerationMagnitude = (gcnew ::System::Data::DataColumn(L"accelerationMagnitude", ::System::Int64::typeid, 
            nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnaccelerationMagnitude);
        this->columnaccelerationHeading = (gcnew ::System::Data::DataColumn(L"accelerationHeading", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnaccelerationHeading);
        this->columnSocket_Id = (gcnew ::System::Data::DataColumn(L"Socket_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnSocket_Id);
        this->columndescription->Namespace = L"";
        this->columndescription->DefaultValue = (cli::safe_cast<System::String^  >(L""));
        this->columnid->Namespace = L"";
        this->columnname->Namespace = L"";
        this->columnname->DefaultValue = (cli::safe_cast<System::String^  >(L"NoName"));
        this->columnpictureSource->Namespace = L"";
        this->columnscale->Namespace = L"";
        this->columnscale->DefaultValue = static_cast<System::Int64>(20);
        this->columnbase_angle->Namespace = L"";
        this->columnbase_angle->DefaultValue = static_cast<System::Int64>(0);
        this->columncurrent_angle->Namespace = L"";
        this->columncurrent_angle->DefaultValue = static_cast<System::Int64>(0);
        this->columntranslation_origin->Namespace = L"";
        this->columntranslation_origin->DefaultValue = (cli::safe_cast<System::String^  >(L"center"));
        this->columnrotation_origin->Namespace = L"";
        this->columnrotation_origin->DefaultValue = (cli::safe_cast<System::String^  >(L"center"));
        this->columntranslation_offset_x->Namespace = L"";
        this->columntranslation_offset_x->DefaultValue = static_cast<System::Int64>(0);
        this->columntranslation_offset_y->Namespace = L"";
        this->columntranslation_offset_y->DefaultValue = static_cast<System::Int64>(0);
        this->columnrotation_offset_x->Namespace = L"";
        this->columnrotation_offset_x->DefaultValue = static_cast<System::Int64>(0);
        this->columnrotation_offset_y->Namespace = L"";
        this->columnrotation_offset_y->DefaultValue = static_cast<System::Int64>(0);
        this->columnmissile_size->Namespace = L"";
        this->columnmissile_size->DefaultValue = static_cast<System::Int64>(500);
        this->columnmultishot->Namespace = L"";
        this->columnmultishot->DefaultValue = static_cast<System::Int64>(1);
        this->columnmissile_ammo_type->Namespace = L"";
        this->columnmissile_ammo_type->DefaultValue = (cli::safe_cast<System::String^  >(L"Incendiary Missile"));
        this->columnmissile_ammo_amount->Namespace = L"";
        this->columnmissile_ammo_amount->DefaultValue = static_cast<System::Int64>(0);
        this->columnmovementHeading->Namespace = L"";
        this->columnmovementHeading->DefaultValue = static_cast<System::Int64>(0);
        this->columnmovementSpeed->Namespace = L"";
        this->columnmovementSpeed->DefaultValue = static_cast<System::Int64>(0);
        this->columnaccelerationMagnitude->Namespace = L"";
        this->columnaccelerationMagnitude->DefaultValue = static_cast<System::Int64>(0);
        this->columnaccelerationHeading->Namespace = L"";
        this->columnaccelerationHeading->DefaultValue = static_cast<System::Int64>(0);
    }
    
    inline test::NewDataSet::Missile_WeaponRow^  NewDataSet::Missile_WeaponDataTable::NewMissile_WeaponRow() {
        return (cli::safe_cast<test::NewDataSet::Missile_WeaponRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::Missile_WeaponDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew test::NewDataSet::Missile_WeaponRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::Missile_WeaponDataTable::GetRowType() {
        return test::NewDataSet::Missile_WeaponRow::typeid;
    }
    
    inline ::System::Void NewDataSet::Missile_WeaponDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->Missile_WeaponRowChanged(this, (gcnew test::NewDataSet::Missile_WeaponRowChangeEvent((cli::safe_cast<test::NewDataSet::Missile_WeaponRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::Missile_WeaponDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->Missile_WeaponRowChanging(this, (gcnew test::NewDataSet::Missile_WeaponRowChangeEvent((cli::safe_cast<test::NewDataSet::Missile_WeaponRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::Missile_WeaponDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->Missile_WeaponRowDeleted(this, (gcnew test::NewDataSet::Missile_WeaponRowChangeEvent((cli::safe_cast<test::NewDataSet::Missile_WeaponRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::Missile_WeaponDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->Missile_WeaponRowDeleting(this, (gcnew test::NewDataSet::Missile_WeaponRowChangeEvent((cli::safe_cast<test::NewDataSet::Missile_WeaponRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::Missile_WeaponDataTable::RemoveMissile_WeaponRow(test::NewDataSet::Missile_WeaponRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::Missile_WeaponDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        test::NewDataSet^  ds = (gcnew test::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"Missile_WeaponDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::DeviceDataTable::DeviceDataTable() {
        this->TableName = L"Device";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::DeviceDataTable::DeviceDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::DeviceDataTable::DeviceDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::DeviceDataTable::descriptionColumn::get() {
        return this->columndescription;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::DeviceDataTable::idColumn::get() {
        return this->columnid;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::DeviceDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::DeviceDataTable::pictureSourceColumn::get() {
        return this->columnpictureSource;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::DeviceDataTable::scaleColumn::get() {
        return this->columnscale;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::DeviceDataTable::base_angleColumn::get() {
        return this->columnbase_angle;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::DeviceDataTable::current_angleColumn::get() {
        return this->columncurrent_angle;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::DeviceDataTable::translation_originColumn::get() {
        return this->columntranslation_origin;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::DeviceDataTable::rotation_originColumn::get() {
        return this->columnrotation_origin;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::DeviceDataTable::translation_offset_xColumn::get() {
        return this->columntranslation_offset_x;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::DeviceDataTable::translation_offset_yColumn::get() {
        return this->columntranslation_offset_y;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::DeviceDataTable::rotation_offset_xColumn::get() {
        return this->columnrotation_offset_x;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::DeviceDataTable::rotation_offset_yColumn::get() {
        return this->columnrotation_offset_y;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::DeviceDataTable::movementHeadingColumn::get() {
        return this->columnmovementHeading;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::DeviceDataTable::movementSpeedColumn::get() {
        return this->columnmovementSpeed;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::DeviceDataTable::accelerationMagnitudeColumn::get() {
        return this->columnaccelerationMagnitude;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::DeviceDataTable::accelerationHeadingColumn::get() {
        return this->columnaccelerationHeading;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::DeviceDataTable::subtypeColumn::get() {
        return this->columnsubtype;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::DeviceDataTable::Socket_IdColumn::get() {
        return this->columnSocket_Id;
    }
    
    inline ::System::Int32 NewDataSet::DeviceDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline test::NewDataSet::DeviceRow^  NewDataSet::DeviceDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<test::NewDataSet::DeviceRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::DeviceDataTable::AddDeviceRow(test::NewDataSet::DeviceRow^  row) {
        this->Rows->Add(row);
    }
    
    inline test::NewDataSet::DeviceRow^  NewDataSet::DeviceDataTable::AddDeviceRow(
                System::String^  description, 
                System::String^  id, 
                System::String^  name, 
                System::String^  pictureSource, 
                System::Int64 scale, 
                System::Int64 base_angle, 
                System::Int64 current_angle, 
                System::String^  translation_origin, 
                System::String^  rotation_origin, 
                System::Int64 translation_offset_x, 
                System::Int64 translation_offset_y, 
                System::Int64 rotation_offset_x, 
                System::Int64 rotation_offset_y, 
                System::Int64 movementHeading, 
                System::Int64 movementSpeed, 
                System::Int64 accelerationMagnitude, 
                System::Int64 accelerationHeading, 
                System::String^  subtype, 
                test::NewDataSet::SocketRow^  parentSocketRowBySocket_Device) {
        test::NewDataSet::DeviceRow^  rowDeviceRow = (cli::safe_cast<test::NewDataSet::DeviceRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(19) {description, id, name, 
            pictureSource, scale, base_angle, current_angle, translation_origin, rotation_origin, translation_offset_x, translation_offset_y, 
            rotation_offset_x, rotation_offset_y, movementHeading, movementSpeed, accelerationMagnitude, accelerationHeading, subtype, 
            nullptr};
        if (parentSocketRowBySocket_Device != nullptr) {
            columnValuesArray[18] = parentSocketRowBySocket_Device[8];
        }
        rowDeviceRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowDeviceRow);
        return rowDeviceRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::DeviceDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::DeviceDataTable::Clone() {
        test::NewDataSet::DeviceDataTable^  cln = (cli::safe_cast<test::NewDataSet::DeviceDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::DeviceDataTable::CreateInstance() {
        return (gcnew test::NewDataSet::DeviceDataTable());
    }
    
    inline ::System::Void NewDataSet::DeviceDataTable::InitVars() {
        this->columndescription = __super::Columns[L"description"];
        this->columnid = __super::Columns[L"id"];
        this->columnname = __super::Columns[L"name"];
        this->columnpictureSource = __super::Columns[L"pictureSource"];
        this->columnscale = __super::Columns[L"scale"];
        this->columnbase_angle = __super::Columns[L"base_angle"];
        this->columncurrent_angle = __super::Columns[L"current_angle"];
        this->columntranslation_origin = __super::Columns[L"translation_origin"];
        this->columnrotation_origin = __super::Columns[L"rotation_origin"];
        this->columntranslation_offset_x = __super::Columns[L"translation_offset_x"];
        this->columntranslation_offset_y = __super::Columns[L"translation_offset_y"];
        this->columnrotation_offset_x = __super::Columns[L"rotation_offset_x"];
        this->columnrotation_offset_y = __super::Columns[L"rotation_offset_y"];
        this->columnmovementHeading = __super::Columns[L"movementHeading"];
        this->columnmovementSpeed = __super::Columns[L"movementSpeed"];
        this->columnaccelerationMagnitude = __super::Columns[L"accelerationMagnitude"];
        this->columnaccelerationHeading = __super::Columns[L"accelerationHeading"];
        this->columnsubtype = __super::Columns[L"subtype"];
        this->columnSocket_Id = __super::Columns[L"Socket_Id"];
    }
    
    inline ::System::Void NewDataSet::DeviceDataTable::InitClass() {
        this->columndescription = (gcnew ::System::Data::DataColumn(L"description", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columndescription);
        this->columnid = (gcnew ::System::Data::DataColumn(L"id", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnid);
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnpictureSource = (gcnew ::System::Data::DataColumn(L"pictureSource", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnpictureSource);
        this->columnscale = (gcnew ::System::Data::DataColumn(L"scale", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnscale);
        this->columnbase_angle = (gcnew ::System::Data::DataColumn(L"base_angle", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnbase_angle);
        this->columncurrent_angle = (gcnew ::System::Data::DataColumn(L"current_angle", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columncurrent_angle);
        this->columntranslation_origin = (gcnew ::System::Data::DataColumn(L"translation_origin", ::System::String::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columntranslation_origin);
        this->columnrotation_origin = (gcnew ::System::Data::DataColumn(L"rotation_origin", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnrotation_origin);
        this->columntranslation_offset_x = (gcnew ::System::Data::DataColumn(L"translation_offset_x", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columntranslation_offset_x);
        this->columntranslation_offset_y = (gcnew ::System::Data::DataColumn(L"translation_offset_y", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columntranslation_offset_y);
        this->columnrotation_offset_x = (gcnew ::System::Data::DataColumn(L"rotation_offset_x", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnrotation_offset_x);
        this->columnrotation_offset_y = (gcnew ::System::Data::DataColumn(L"rotation_offset_y", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnrotation_offset_y);
        this->columnmovementHeading = (gcnew ::System::Data::DataColumn(L"movementHeading", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnmovementHeading);
        this->columnmovementSpeed = (gcnew ::System::Data::DataColumn(L"movementSpeed", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnmovementSpeed);
        this->columnaccelerationMagnitude = (gcnew ::System::Data::DataColumn(L"accelerationMagnitude", ::System::Int64::typeid, 
            nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnaccelerationMagnitude);
        this->columnaccelerationHeading = (gcnew ::System::Data::DataColumn(L"accelerationHeading", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnaccelerationHeading);
        this->columnsubtype = (gcnew ::System::Data::DataColumn(L"subtype", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnsubtype);
        this->columnSocket_Id = (gcnew ::System::Data::DataColumn(L"Socket_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnSocket_Id);
        this->columndescription->Namespace = L"";
        this->columndescription->DefaultValue = (cli::safe_cast<System::String^  >(L""));
        this->columnid->Namespace = L"";
        this->columnname->Namespace = L"";
        this->columnname->DefaultValue = (cli::safe_cast<System::String^  >(L"NoName"));
        this->columnpictureSource->Namespace = L"";
        this->columnscale->Namespace = L"";
        this->columnscale->DefaultValue = static_cast<System::Int64>(20);
        this->columnbase_angle->Namespace = L"";
        this->columnbase_angle->DefaultValue = static_cast<System::Int64>(0);
        this->columncurrent_angle->Namespace = L"";
        this->columncurrent_angle->DefaultValue = static_cast<System::Int64>(0);
        this->columntranslation_origin->Namespace = L"";
        this->columntranslation_origin->DefaultValue = (cli::safe_cast<System::String^  >(L"center"));
        this->columnrotation_origin->Namespace = L"";
        this->columnrotation_origin->DefaultValue = (cli::safe_cast<System::String^  >(L"center"));
        this->columntranslation_offset_x->Namespace = L"";
        this->columntranslation_offset_x->DefaultValue = static_cast<System::Int64>(0);
        this->columntranslation_offset_y->Namespace = L"";
        this->columntranslation_offset_y->DefaultValue = static_cast<System::Int64>(0);
        this->columnrotation_offset_x->Namespace = L"";
        this->columnrotation_offset_x->DefaultValue = static_cast<System::Int64>(0);
        this->columnrotation_offset_y->Namespace = L"";
        this->columnrotation_offset_y->DefaultValue = static_cast<System::Int64>(0);
        this->columnmovementHeading->Namespace = L"";
        this->columnmovementHeading->DefaultValue = static_cast<System::Int64>(0);
        this->columnmovementSpeed->Namespace = L"";
        this->columnmovementSpeed->DefaultValue = static_cast<System::Int64>(0);
        this->columnaccelerationMagnitude->Namespace = L"";
        this->columnaccelerationMagnitude->DefaultValue = static_cast<System::Int64>(0);
        this->columnaccelerationHeading->Namespace = L"";
        this->columnaccelerationHeading->DefaultValue = static_cast<System::Int64>(0);
        this->columnsubtype->AllowDBNull = false;
        this->columnsubtype->Namespace = L"";
    }
    
    inline test::NewDataSet::DeviceRow^  NewDataSet::DeviceDataTable::NewDeviceRow() {
        return (cli::safe_cast<test::NewDataSet::DeviceRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::DeviceDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew test::NewDataSet::DeviceRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::DeviceDataTable::GetRowType() {
        return test::NewDataSet::DeviceRow::typeid;
    }
    
    inline ::System::Void NewDataSet::DeviceDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->DeviceRowChanged(this, (gcnew test::NewDataSet::DeviceRowChangeEvent((cli::safe_cast<test::NewDataSet::DeviceRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::DeviceDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->DeviceRowChanging(this, (gcnew test::NewDataSet::DeviceRowChangeEvent((cli::safe_cast<test::NewDataSet::DeviceRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::DeviceDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->DeviceRowDeleted(this, (gcnew test::NewDataSet::DeviceRowChangeEvent((cli::safe_cast<test::NewDataSet::DeviceRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::DeviceDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->DeviceRowDeleting(this, (gcnew test::NewDataSet::DeviceRowChangeEvent((cli::safe_cast<test::NewDataSet::DeviceRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::DeviceDataTable::RemoveDeviceRow(test::NewDataSet::DeviceRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::DeviceDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        test::NewDataSet^  ds = (gcnew test::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"DeviceDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::EngineDataTable::EngineDataTable() {
        this->TableName = L"Engine";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::EngineDataTable::EngineDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::EngineDataTable::EngineDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::EngineDataTable::descriptionColumn::get() {
        return this->columndescription;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::EngineDataTable::idColumn::get() {
        return this->columnid;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::EngineDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::EngineDataTable::pictureSourceColumn::get() {
        return this->columnpictureSource;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::EngineDataTable::scaleColumn::get() {
        return this->columnscale;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::EngineDataTable::base_angleColumn::get() {
        return this->columnbase_angle;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::EngineDataTable::current_angleColumn::get() {
        return this->columncurrent_angle;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::EngineDataTable::translation_originColumn::get() {
        return this->columntranslation_origin;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::EngineDataTable::rotation_originColumn::get() {
        return this->columnrotation_origin;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::EngineDataTable::translation_offset_xColumn::get() {
        return this->columntranslation_offset_x;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::EngineDataTable::translation_offset_yColumn::get() {
        return this->columntranslation_offset_y;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::EngineDataTable::rotation_offset_xColumn::get() {
        return this->columnrotation_offset_x;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::EngineDataTable::rotation_offset_yColumn::get() {
        return this->columnrotation_offset_y;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::EngineDataTable::movementHeadingColumn::get() {
        return this->columnmovementHeading;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::EngineDataTable::movementSpeedColumn::get() {
        return this->columnmovementSpeed;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::EngineDataTable::accelerationMagnitudeColumn::get() {
        return this->columnaccelerationMagnitude;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::EngineDataTable::accelerationHeadingColumn::get() {
        return this->columnaccelerationHeading;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::EngineDataTable::subtypeColumn::get() {
        return this->columnsubtype;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::EngineDataTable::Socket_IdColumn::get() {
        return this->columnSocket_Id;
    }
    
    inline ::System::Int32 NewDataSet::EngineDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline test::NewDataSet::EngineRow^  NewDataSet::EngineDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<test::NewDataSet::EngineRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::EngineDataTable::AddEngineRow(test::NewDataSet::EngineRow^  row) {
        this->Rows->Add(row);
    }
    
    inline test::NewDataSet::EngineRow^  NewDataSet::EngineDataTable::AddEngineRow(
                System::String^  description, 
                System::String^  id, 
                System::String^  name, 
                System::String^  pictureSource, 
                System::Int64 scale, 
                System::Int64 base_angle, 
                System::Int64 current_angle, 
                System::String^  translation_origin, 
                System::String^  rotation_origin, 
                System::Int64 translation_offset_x, 
                System::Int64 translation_offset_y, 
                System::Int64 rotation_offset_x, 
                System::Int64 rotation_offset_y, 
                System::Int64 movementHeading, 
                System::Int64 movementSpeed, 
                System::Int64 accelerationMagnitude, 
                System::Int64 accelerationHeading, 
                System::String^  subtype, 
                test::NewDataSet::SocketRow^  parentSocketRowBySocket_Engine) {
        test::NewDataSet::EngineRow^  rowEngineRow = (cli::safe_cast<test::NewDataSet::EngineRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(19) {description, id, name, 
            pictureSource, scale, base_angle, current_angle, translation_origin, rotation_origin, translation_offset_x, translation_offset_y, 
            rotation_offset_x, rotation_offset_y, movementHeading, movementSpeed, accelerationMagnitude, accelerationHeading, subtype, 
            nullptr};
        if (parentSocketRowBySocket_Engine != nullptr) {
            columnValuesArray[18] = parentSocketRowBySocket_Engine[8];
        }
        rowEngineRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowEngineRow);
        return rowEngineRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::EngineDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::EngineDataTable::Clone() {
        test::NewDataSet::EngineDataTable^  cln = (cli::safe_cast<test::NewDataSet::EngineDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::EngineDataTable::CreateInstance() {
        return (gcnew test::NewDataSet::EngineDataTable());
    }
    
    inline ::System::Void NewDataSet::EngineDataTable::InitVars() {
        this->columndescription = __super::Columns[L"description"];
        this->columnid = __super::Columns[L"id"];
        this->columnname = __super::Columns[L"name"];
        this->columnpictureSource = __super::Columns[L"pictureSource"];
        this->columnscale = __super::Columns[L"scale"];
        this->columnbase_angle = __super::Columns[L"base_angle"];
        this->columncurrent_angle = __super::Columns[L"current_angle"];
        this->columntranslation_origin = __super::Columns[L"translation_origin"];
        this->columnrotation_origin = __super::Columns[L"rotation_origin"];
        this->columntranslation_offset_x = __super::Columns[L"translation_offset_x"];
        this->columntranslation_offset_y = __super::Columns[L"translation_offset_y"];
        this->columnrotation_offset_x = __super::Columns[L"rotation_offset_x"];
        this->columnrotation_offset_y = __super::Columns[L"rotation_offset_y"];
        this->columnmovementHeading = __super::Columns[L"movementHeading"];
        this->columnmovementSpeed = __super::Columns[L"movementSpeed"];
        this->columnaccelerationMagnitude = __super::Columns[L"accelerationMagnitude"];
        this->columnaccelerationHeading = __super::Columns[L"accelerationHeading"];
        this->columnsubtype = __super::Columns[L"subtype"];
        this->columnSocket_Id = __super::Columns[L"Socket_Id"];
    }
    
    inline ::System::Void NewDataSet::EngineDataTable::InitClass() {
        this->columndescription = (gcnew ::System::Data::DataColumn(L"description", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columndescription);
        this->columnid = (gcnew ::System::Data::DataColumn(L"id", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnid);
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnpictureSource = (gcnew ::System::Data::DataColumn(L"pictureSource", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnpictureSource);
        this->columnscale = (gcnew ::System::Data::DataColumn(L"scale", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnscale);
        this->columnbase_angle = (gcnew ::System::Data::DataColumn(L"base_angle", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnbase_angle);
        this->columncurrent_angle = (gcnew ::System::Data::DataColumn(L"current_angle", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columncurrent_angle);
        this->columntranslation_origin = (gcnew ::System::Data::DataColumn(L"translation_origin", ::System::String::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columntranslation_origin);
        this->columnrotation_origin = (gcnew ::System::Data::DataColumn(L"rotation_origin", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnrotation_origin);
        this->columntranslation_offset_x = (gcnew ::System::Data::DataColumn(L"translation_offset_x", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columntranslation_offset_x);
        this->columntranslation_offset_y = (gcnew ::System::Data::DataColumn(L"translation_offset_y", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columntranslation_offset_y);
        this->columnrotation_offset_x = (gcnew ::System::Data::DataColumn(L"rotation_offset_x", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnrotation_offset_x);
        this->columnrotation_offset_y = (gcnew ::System::Data::DataColumn(L"rotation_offset_y", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnrotation_offset_y);
        this->columnmovementHeading = (gcnew ::System::Data::DataColumn(L"movementHeading", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnmovementHeading);
        this->columnmovementSpeed = (gcnew ::System::Data::DataColumn(L"movementSpeed", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnmovementSpeed);
        this->columnaccelerationMagnitude = (gcnew ::System::Data::DataColumn(L"accelerationMagnitude", ::System::Int64::typeid, 
            nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnaccelerationMagnitude);
        this->columnaccelerationHeading = (gcnew ::System::Data::DataColumn(L"accelerationHeading", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnaccelerationHeading);
        this->columnsubtype = (gcnew ::System::Data::DataColumn(L"subtype", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnsubtype);
        this->columnSocket_Id = (gcnew ::System::Data::DataColumn(L"Socket_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnSocket_Id);
        this->columndescription->Namespace = L"";
        this->columndescription->DefaultValue = (cli::safe_cast<System::String^  >(L""));
        this->columnid->Namespace = L"";
        this->columnname->Namespace = L"";
        this->columnname->DefaultValue = (cli::safe_cast<System::String^  >(L"NoName"));
        this->columnpictureSource->Namespace = L"";
        this->columnscale->Namespace = L"";
        this->columnscale->DefaultValue = static_cast<System::Int64>(20);
        this->columnbase_angle->Namespace = L"";
        this->columnbase_angle->DefaultValue = static_cast<System::Int64>(0);
        this->columncurrent_angle->Namespace = L"";
        this->columncurrent_angle->DefaultValue = static_cast<System::Int64>(0);
        this->columntranslation_origin->Namespace = L"";
        this->columntranslation_origin->DefaultValue = (cli::safe_cast<System::String^  >(L"center"));
        this->columnrotation_origin->Namespace = L"";
        this->columnrotation_origin->DefaultValue = (cli::safe_cast<System::String^  >(L"center"));
        this->columntranslation_offset_x->Namespace = L"";
        this->columntranslation_offset_x->DefaultValue = static_cast<System::Int64>(0);
        this->columntranslation_offset_y->Namespace = L"";
        this->columntranslation_offset_y->DefaultValue = static_cast<System::Int64>(0);
        this->columnrotation_offset_x->Namespace = L"";
        this->columnrotation_offset_x->DefaultValue = static_cast<System::Int64>(0);
        this->columnrotation_offset_y->Namespace = L"";
        this->columnrotation_offset_y->DefaultValue = static_cast<System::Int64>(0);
        this->columnmovementHeading->Namespace = L"";
        this->columnmovementHeading->DefaultValue = static_cast<System::Int64>(0);
        this->columnmovementSpeed->Namespace = L"";
        this->columnmovementSpeed->DefaultValue = static_cast<System::Int64>(0);
        this->columnaccelerationMagnitude->Namespace = L"";
        this->columnaccelerationMagnitude->DefaultValue = static_cast<System::Int64>(0);
        this->columnaccelerationHeading->Namespace = L"";
        this->columnaccelerationHeading->DefaultValue = static_cast<System::Int64>(0);
        this->columnsubtype->Namespace = L"";
        this->columnsubtype->DefaultValue = (cli::safe_cast<System::String^  >(L"Ion Thruster"));
    }
    
    inline test::NewDataSet::EngineRow^  NewDataSet::EngineDataTable::NewEngineRow() {
        return (cli::safe_cast<test::NewDataSet::EngineRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::EngineDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew test::NewDataSet::EngineRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::EngineDataTable::GetRowType() {
        return test::NewDataSet::EngineRow::typeid;
    }
    
    inline ::System::Void NewDataSet::EngineDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->EngineRowChanged(this, (gcnew test::NewDataSet::EngineRowChangeEvent((cli::safe_cast<test::NewDataSet::EngineRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::EngineDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->EngineRowChanging(this, (gcnew test::NewDataSet::EngineRowChangeEvent((cli::safe_cast<test::NewDataSet::EngineRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::EngineDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->EngineRowDeleted(this, (gcnew test::NewDataSet::EngineRowChangeEvent((cli::safe_cast<test::NewDataSet::EngineRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::EngineDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->EngineRowDeleting(this, (gcnew test::NewDataSet::EngineRowChangeEvent((cli::safe_cast<test::NewDataSet::EngineRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::EngineDataTable::RemoveEngineRow(test::NewDataSet::EngineRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::EngineDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        test::NewDataSet^  ds = (gcnew test::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"EngineDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::PowerplantDataTable::PowerplantDataTable() {
        this->TableName = L"Powerplant";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::PowerplantDataTable::PowerplantDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::PowerplantDataTable::PowerplantDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::PowerplantDataTable::descriptionColumn::get() {
        return this->columndescription;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::PowerplantDataTable::idColumn::get() {
        return this->columnid;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::PowerplantDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::PowerplantDataTable::pictureSourceColumn::get() {
        return this->columnpictureSource;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::PowerplantDataTable::scaleColumn::get() {
        return this->columnscale;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::PowerplantDataTable::base_angleColumn::get() {
        return this->columnbase_angle;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::PowerplantDataTable::current_angleColumn::get() {
        return this->columncurrent_angle;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::PowerplantDataTable::translation_originColumn::get() {
        return this->columntranslation_origin;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::PowerplantDataTable::rotation_originColumn::get() {
        return this->columnrotation_origin;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::PowerplantDataTable::translation_offset_xColumn::get() {
        return this->columntranslation_offset_x;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::PowerplantDataTable::translation_offset_yColumn::get() {
        return this->columntranslation_offset_y;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::PowerplantDataTable::rotation_offset_xColumn::get() {
        return this->columnrotation_offset_x;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::PowerplantDataTable::rotation_offset_yColumn::get() {
        return this->columnrotation_offset_y;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::PowerplantDataTable::subtypeColumn::get() {
        return this->columnsubtype;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::PowerplantDataTable::capacitor_typeColumn::get() {
        return this->columncapacitor_type;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::PowerplantDataTable::capacitor_amountColumn::get() {
        return this->columncapacitor_amount;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::PowerplantDataTable::movementHeadingColumn::get() {
        return this->columnmovementHeading;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::PowerplantDataTable::movementSpeedColumn::get() {
        return this->columnmovementSpeed;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::PowerplantDataTable::accelerationMagnitudeColumn::get() {
        return this->columnaccelerationMagnitude;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::PowerplantDataTable::accelerationHeadingColumn::get() {
        return this->columnaccelerationHeading;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::PowerplantDataTable::Socket_IdColumn::get() {
        return this->columnSocket_Id;
    }
    
    inline ::System::Int32 NewDataSet::PowerplantDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline test::NewDataSet::PowerplantRow^  NewDataSet::PowerplantDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<test::NewDataSet::PowerplantRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::PowerplantDataTable::AddPowerplantRow(test::NewDataSet::PowerplantRow^  row) {
        this->Rows->Add(row);
    }
    
    inline test::NewDataSet::PowerplantRow^  NewDataSet::PowerplantDataTable::AddPowerplantRow(
                System::String^  description, 
                System::String^  id, 
                System::String^  name, 
                System::String^  pictureSource, 
                System::Int64 scale, 
                System::Int64 base_angle, 
                System::Int64 current_angle, 
                System::String^  translation_origin, 
                System::String^  rotation_origin, 
                System::Int64 translation_offset_x, 
                System::Int64 translation_offset_y, 
                System::Int64 rotation_offset_x, 
                System::Int64 rotation_offset_y, 
                System::String^  subtype, 
                System::String^  capacitor_type, 
                System::Int64 capacitor_amount, 
                System::Int64 movementHeading, 
                System::Int64 movementSpeed, 
                System::Int64 accelerationMagnitude, 
                System::Int64 accelerationHeading, 
                test::NewDataSet::SocketRow^  parentSocketRowBySocket_Powerplant) {
        test::NewDataSet::PowerplantRow^  rowPowerplantRow = (cli::safe_cast<test::NewDataSet::PowerplantRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(21) {description, id, name, 
            pictureSource, scale, base_angle, current_angle, translation_origin, rotation_origin, translation_offset_x, translation_offset_y, 
            rotation_offset_x, rotation_offset_y, subtype, capacitor_type, capacitor_amount, movementHeading, movementSpeed, accelerationMagnitude, 
            accelerationHeading, nullptr};
        if (parentSocketRowBySocket_Powerplant != nullptr) {
            columnValuesArray[20] = parentSocketRowBySocket_Powerplant[8];
        }
        rowPowerplantRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowPowerplantRow);
        return rowPowerplantRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::PowerplantDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::PowerplantDataTable::Clone() {
        test::NewDataSet::PowerplantDataTable^  cln = (cli::safe_cast<test::NewDataSet::PowerplantDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::PowerplantDataTable::CreateInstance() {
        return (gcnew test::NewDataSet::PowerplantDataTable());
    }
    
    inline ::System::Void NewDataSet::PowerplantDataTable::InitVars() {
        this->columndescription = __super::Columns[L"description"];
        this->columnid = __super::Columns[L"id"];
        this->columnname = __super::Columns[L"name"];
        this->columnpictureSource = __super::Columns[L"pictureSource"];
        this->columnscale = __super::Columns[L"scale"];
        this->columnbase_angle = __super::Columns[L"base_angle"];
        this->columncurrent_angle = __super::Columns[L"current_angle"];
        this->columntranslation_origin = __super::Columns[L"translation_origin"];
        this->columnrotation_origin = __super::Columns[L"rotation_origin"];
        this->columntranslation_offset_x = __super::Columns[L"translation_offset_x"];
        this->columntranslation_offset_y = __super::Columns[L"translation_offset_y"];
        this->columnrotation_offset_x = __super::Columns[L"rotation_offset_x"];
        this->columnrotation_offset_y = __super::Columns[L"rotation_offset_y"];
        this->columnsubtype = __super::Columns[L"subtype"];
        this->columncapacitor_type = __super::Columns[L"capacitor_type"];
        this->columncapacitor_amount = __super::Columns[L"capacitor_amount"];
        this->columnmovementHeading = __super::Columns[L"movementHeading"];
        this->columnmovementSpeed = __super::Columns[L"movementSpeed"];
        this->columnaccelerationMagnitude = __super::Columns[L"accelerationMagnitude"];
        this->columnaccelerationHeading = __super::Columns[L"accelerationHeading"];
        this->columnSocket_Id = __super::Columns[L"Socket_Id"];
    }
    
    inline ::System::Void NewDataSet::PowerplantDataTable::InitClass() {
        this->columndescription = (gcnew ::System::Data::DataColumn(L"description", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columndescription);
        this->columnid = (gcnew ::System::Data::DataColumn(L"id", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnid);
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnpictureSource = (gcnew ::System::Data::DataColumn(L"pictureSource", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnpictureSource);
        this->columnscale = (gcnew ::System::Data::DataColumn(L"scale", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnscale);
        this->columnbase_angle = (gcnew ::System::Data::DataColumn(L"base_angle", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnbase_angle);
        this->columncurrent_angle = (gcnew ::System::Data::DataColumn(L"current_angle", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columncurrent_angle);
        this->columntranslation_origin = (gcnew ::System::Data::DataColumn(L"translation_origin", ::System::String::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columntranslation_origin);
        this->columnrotation_origin = (gcnew ::System::Data::DataColumn(L"rotation_origin", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnrotation_origin);
        this->columntranslation_offset_x = (gcnew ::System::Data::DataColumn(L"translation_offset_x", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columntranslation_offset_x);
        this->columntranslation_offset_y = (gcnew ::System::Data::DataColumn(L"translation_offset_y", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columntranslation_offset_y);
        this->columnrotation_offset_x = (gcnew ::System::Data::DataColumn(L"rotation_offset_x", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnrotation_offset_x);
        this->columnrotation_offset_y = (gcnew ::System::Data::DataColumn(L"rotation_offset_y", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnrotation_offset_y);
        this->columnsubtype = (gcnew ::System::Data::DataColumn(L"subtype", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnsubtype);
        this->columncapacitor_type = (gcnew ::System::Data::DataColumn(L"capacitor_type", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columncapacitor_type);
        this->columncapacitor_amount = (gcnew ::System::Data::DataColumn(L"capacitor_amount", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columncapacitor_amount);
        this->columnmovementHeading = (gcnew ::System::Data::DataColumn(L"movementHeading", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnmovementHeading);
        this->columnmovementSpeed = (gcnew ::System::Data::DataColumn(L"movementSpeed", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnmovementSpeed);
        this->columnaccelerationMagnitude = (gcnew ::System::Data::DataColumn(L"accelerationMagnitude", ::System::Int64::typeid, 
            nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnaccelerationMagnitude);
        this->columnaccelerationHeading = (gcnew ::System::Data::DataColumn(L"accelerationHeading", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnaccelerationHeading);
        this->columnSocket_Id = (gcnew ::System::Data::DataColumn(L"Socket_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnSocket_Id);
        this->columndescription->Namespace = L"";
        this->columndescription->DefaultValue = (cli::safe_cast<System::String^  >(L""));
        this->columnid->Namespace = L"";
        this->columnname->Namespace = L"";
        this->columnname->DefaultValue = (cli::safe_cast<System::String^  >(L"NoName"));
        this->columnpictureSource->Namespace = L"";
        this->columnscale->Namespace = L"";
        this->columnscale->DefaultValue = static_cast<System::Int64>(20);
        this->columnbase_angle->Namespace = L"";
        this->columnbase_angle->DefaultValue = static_cast<System::Int64>(0);
        this->columncurrent_angle->Namespace = L"";
        this->columncurrent_angle->DefaultValue = static_cast<System::Int64>(0);
        this->columntranslation_origin->Namespace = L"";
        this->columntranslation_origin->DefaultValue = (cli::safe_cast<System::String^  >(L"center"));
        this->columnrotation_origin->Namespace = L"";
        this->columnrotation_origin->DefaultValue = (cli::safe_cast<System::String^  >(L"center"));
        this->columntranslation_offset_x->Namespace = L"";
        this->columntranslation_offset_x->DefaultValue = static_cast<System::Int64>(0);
        this->columntranslation_offset_y->Namespace = L"";
        this->columntranslation_offset_y->DefaultValue = static_cast<System::Int64>(0);
        this->columnrotation_offset_x->Namespace = L"";
        this->columnrotation_offset_x->DefaultValue = static_cast<System::Int64>(0);
        this->columnrotation_offset_y->Namespace = L"";
        this->columnrotation_offset_y->DefaultValue = static_cast<System::Int64>(0);
        this->columnsubtype->Namespace = L"";
        this->columnsubtype->DefaultValue = (cli::safe_cast<System::String^  >(L"Nuclear Fission Plant"));
        this->columncapacitor_type->Namespace = L"";
        this->columncapacitor_amount->Namespace = L"";
        this->columncapacitor_amount->DefaultValue = static_cast<System::Int64>(0);
        this->columnmovementHeading->Namespace = L"";
        this->columnmovementHeading->DefaultValue = static_cast<System::Int64>(0);
        this->columnmovementSpeed->Namespace = L"";
        this->columnmovementSpeed->DefaultValue = static_cast<System::Int64>(0);
        this->columnaccelerationMagnitude->Namespace = L"";
        this->columnaccelerationMagnitude->DefaultValue = static_cast<System::Int64>(0);
        this->columnaccelerationHeading->Namespace = L"";
        this->columnaccelerationHeading->DefaultValue = static_cast<System::Int64>(0);
    }
    
    inline test::NewDataSet::PowerplantRow^  NewDataSet::PowerplantDataTable::NewPowerplantRow() {
        return (cli::safe_cast<test::NewDataSet::PowerplantRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::PowerplantDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew test::NewDataSet::PowerplantRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::PowerplantDataTable::GetRowType() {
        return test::NewDataSet::PowerplantRow::typeid;
    }
    
    inline ::System::Void NewDataSet::PowerplantDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->PowerplantRowChanged(this, (gcnew test::NewDataSet::PowerplantRowChangeEvent((cli::safe_cast<test::NewDataSet::PowerplantRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::PowerplantDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->PowerplantRowChanging(this, (gcnew test::NewDataSet::PowerplantRowChangeEvent((cli::safe_cast<test::NewDataSet::PowerplantRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::PowerplantDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->PowerplantRowDeleted(this, (gcnew test::NewDataSet::PowerplantRowChangeEvent((cli::safe_cast<test::NewDataSet::PowerplantRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::PowerplantDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->PowerplantRowDeleting(this, (gcnew test::NewDataSet::PowerplantRowChangeEvent((cli::safe_cast<test::NewDataSet::PowerplantRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::PowerplantDataTable::RemovePowerplantRow(test::NewDataSet::PowerplantRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::PowerplantDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        test::NewDataSet^  ds = (gcnew test::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"PowerplantDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::WorldStateRow::WorldStateRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableWorldState = (cli::safe_cast<test::NewDataSet::WorldStateDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::WorldStateRow::description::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableWorldState->descriptionColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'description\' in table \'WorldState\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::WorldStateRow::description::set(System::String^  value) {
        this[this->tableWorldState->descriptionColumn] = value;
    }
    
    inline System::String^  NewDataSet::WorldStateRow::id::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableWorldState->idColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'id\' in table \'WorldState\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::WorldStateRow::id::set(System::String^  value) {
        this[this->tableWorldState->idColumn] = value;
    }
    
    inline System::String^  NewDataSet::WorldStateRow::name::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableWorldState->nameColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'name\' in table \'WorldState\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::WorldStateRow::name::set(System::String^  value) {
        this[this->tableWorldState->nameColumn] = value;
    }
    
    inline System::Int64 NewDataSet::WorldStateRow::time::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableWorldState->timeColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'time\' in table \'WorldState\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::WorldStateRow::time::set(System::Int64 value) {
        this[this->tableWorldState->timeColumn] = value;
    }
    
    inline System::Double NewDataSet::WorldStateRow::CoordinateSizeX::get() {
        try {
            return (cli::safe_cast<::System::Double >(this[this->tableWorldState->CoordinateSizeXColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CoordinateSizeX\' in table \'WorldState\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::WorldStateRow::CoordinateSizeX::set(System::Double value) {
        this[this->tableWorldState->CoordinateSizeXColumn] = value;
    }
    
    inline System::Double NewDataSet::WorldStateRow::CoordinateSizeY::get() {
        try {
            return (cli::safe_cast<::System::Double >(this[this->tableWorldState->CoordinateSizeYColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CoordinateSizeY\' in table \'WorldState\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::WorldStateRow::CoordinateSizeY::set(System::Double value) {
        this[this->tableWorldState->CoordinateSizeYColumn] = value;
    }
    
    inline System::Int32 NewDataSet::WorldStateRow::WorldState_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableWorldState->WorldState_IdColumn]));
    }
    inline System::Void NewDataSet::WorldStateRow::WorldState_Id::set(System::Int32 value) {
        this[this->tableWorldState->WorldState_IdColumn] = value;
    }
    
    inline ::System::Boolean NewDataSet::WorldStateRow::IsdescriptionNull() {
        return this->IsNull(this->tableWorldState->descriptionColumn);
    }
    
    inline ::System::Void NewDataSet::WorldStateRow::SetdescriptionNull() {
        this[this->tableWorldState->descriptionColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::WorldStateRow::IsidNull() {
        return this->IsNull(this->tableWorldState->idColumn);
    }
    
    inline ::System::Void NewDataSet::WorldStateRow::SetidNull() {
        this[this->tableWorldState->idColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::WorldStateRow::IsnameNull() {
        return this->IsNull(this->tableWorldState->nameColumn);
    }
    
    inline ::System::Void NewDataSet::WorldStateRow::SetnameNull() {
        this[this->tableWorldState->nameColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::WorldStateRow::IstimeNull() {
        return this->IsNull(this->tableWorldState->timeColumn);
    }
    
    inline ::System::Void NewDataSet::WorldStateRow::SettimeNull() {
        this[this->tableWorldState->timeColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::WorldStateRow::IsCoordinateSizeXNull() {
        return this->IsNull(this->tableWorldState->CoordinateSizeXColumn);
    }
    
    inline ::System::Void NewDataSet::WorldStateRow::SetCoordinateSizeXNull() {
        this[this->tableWorldState->CoordinateSizeXColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::WorldStateRow::IsCoordinateSizeYNull() {
        return this->IsNull(this->tableWorldState->CoordinateSizeYColumn);
    }
    
    inline ::System::Void NewDataSet::WorldStateRow::SetCoordinateSizeYNull() {
        this[this->tableWorldState->CoordinateSizeYColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< test::NewDataSet::EntityRow^  >^  NewDataSet::WorldStateRow::GetEntityRows() {
        if (this->Table->ChildRelations[L"WorldState_Entity"] == nullptr) {
            return gcnew cli::array< test::NewDataSet::EntityRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< test::NewDataSet::EntityRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"WorldState_Entity"])));
        }
    }
    
    
    inline NewDataSet::EntityRow::EntityRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableEntity = (cli::safe_cast<test::NewDataSet::EntityDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::EntityRow::description::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableEntity->descriptionColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'description\' in table \'Entity\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::EntityRow::description::set(System::String^  value) {
        this[this->tableEntity->descriptionColumn] = value;
    }
    
    inline System::String^  NewDataSet::EntityRow::id::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableEntity->idColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'id\' in table \'Entity\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::EntityRow::id::set(System::String^  value) {
        this[this->tableEntity->idColumn] = value;
    }
    
    inline System::String^  NewDataSet::EntityRow::name::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableEntity->nameColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'name\' in table \'Entity\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::EntityRow::name::set(System::String^  value) {
        this[this->tableEntity->nameColumn] = value;
    }
    
    inline System::Double NewDataSet::EntityRow::xPosition::get() {
        try {
            return (cli::safe_cast<::System::Double >(this[this->tableEntity->xPositionColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'xPosition\' in table \'Entity\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::EntityRow::xPosition::set(System::Double value) {
        this[this->tableEntity->xPositionColumn] = value;
    }
    
    inline System::Double NewDataSet::EntityRow::yPosition::get() {
        try {
            return (cli::safe_cast<::System::Double >(this[this->tableEntity->yPositionColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'yPosition\' in table \'Entity\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::EntityRow::yPosition::set(System::Double value) {
        this[this->tableEntity->yPositionColumn] = value;
    }
    
    inline System::Int64 NewDataSet::EntityRow::movementHeading::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableEntity->movementHeadingColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'movementHeading\' in table \'Entity\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::EntityRow::movementHeading::set(System::Int64 value) {
        this[this->tableEntity->movementHeadingColumn] = value;
    }
    
    inline System::Int64 NewDataSet::EntityRow::movementSpeed::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableEntity->movementSpeedColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'movementSpeed\' in table \'Entity\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::EntityRow::movementSpeed::set(System::Int64 value) {
        this[this->tableEntity->movementSpeedColumn] = value;
    }
    
    inline System::Int64 NewDataSet::EntityRow::accelerationMagnitude::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableEntity->accelerationMagnitudeColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'accelerationMagnitude\' in table \'Entity\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::EntityRow::accelerationMagnitude::set(System::Int64 value) {
        this[this->tableEntity->accelerationMagnitudeColumn] = value;
    }
    
    inline System::Int64 NewDataSet::EntityRow::accelerationHeading::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableEntity->accelerationHeadingColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'accelerationHeading\' in table \'Entity\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::EntityRow::accelerationHeading::set(System::Int64 value) {
        this[this->tableEntity->accelerationHeadingColumn] = value;
    }
    
    inline System::Boolean NewDataSet::EntityRow::isPlayer::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tableEntity->isPlayerColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'isPlayer\' in table \'Entity\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::EntityRow::isPlayer::set(System::Boolean value) {
        this[this->tableEntity->isPlayerColumn] = value;
    }
    
    inline System::String^  NewDataSet::EntityRow::faction::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableEntity->factionColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'faction\' in table \'Entity\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::EntityRow::faction::set(System::String^  value) {
        this[this->tableEntity->factionColumn] = value;
    }
    
    inline System::Boolean NewDataSet::EntityRow::usesPhysics::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tableEntity->usesPhysicsColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'usesPhysics\' in table \'Entity\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::EntityRow::usesPhysics::set(System::Boolean value) {
        this[this->tableEntity->usesPhysicsColumn] = value;
    }
    
    inline System::Int32 NewDataSet::EntityRow::Entity_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableEntity->Entity_IdColumn]));
    }
    inline System::Void NewDataSet::EntityRow::Entity_Id::set(System::Int32 value) {
        this[this->tableEntity->Entity_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::EntityRow::WorldState_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableEntity->WorldState_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'WorldState_Id\' in table \'Entity\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::EntityRow::WorldState_Id::set(System::Int32 value) {
        this[this->tableEntity->WorldState_IdColumn] = value;
    }
    
    inline test::NewDataSet::WorldStateRow^  NewDataSet::EntityRow::WorldStateRow::get() {
        return (cli::safe_cast<test::NewDataSet::WorldStateRow^  >(this->GetParentRow(this->Table->ParentRelations[L"WorldState_Entity"])));
    }
    inline System::Void NewDataSet::EntityRow::WorldStateRow::set(test::NewDataSet::WorldStateRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"WorldState_Entity"]);
    }
    
    inline ::System::Boolean NewDataSet::EntityRow::IsdescriptionNull() {
        return this->IsNull(this->tableEntity->descriptionColumn);
    }
    
    inline ::System::Void NewDataSet::EntityRow::SetdescriptionNull() {
        this[this->tableEntity->descriptionColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::EntityRow::IsidNull() {
        return this->IsNull(this->tableEntity->idColumn);
    }
    
    inline ::System::Void NewDataSet::EntityRow::SetidNull() {
        this[this->tableEntity->idColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::EntityRow::IsnameNull() {
        return this->IsNull(this->tableEntity->nameColumn);
    }
    
    inline ::System::Void NewDataSet::EntityRow::SetnameNull() {
        this[this->tableEntity->nameColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::EntityRow::IsxPositionNull() {
        return this->IsNull(this->tableEntity->xPositionColumn);
    }
    
    inline ::System::Void NewDataSet::EntityRow::SetxPositionNull() {
        this[this->tableEntity->xPositionColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::EntityRow::IsyPositionNull() {
        return this->IsNull(this->tableEntity->yPositionColumn);
    }
    
    inline ::System::Void NewDataSet::EntityRow::SetyPositionNull() {
        this[this->tableEntity->yPositionColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::EntityRow::IsmovementHeadingNull() {
        return this->IsNull(this->tableEntity->movementHeadingColumn);
    }
    
    inline ::System::Void NewDataSet::EntityRow::SetmovementHeadingNull() {
        this[this->tableEntity->movementHeadingColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::EntityRow::IsmovementSpeedNull() {
        return this->IsNull(this->tableEntity->movementSpeedColumn);
    }
    
    inline ::System::Void NewDataSet::EntityRow::SetmovementSpeedNull() {
        this[this->tableEntity->movementSpeedColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::EntityRow::IsaccelerationMagnitudeNull() {
        return this->IsNull(this->tableEntity->accelerationMagnitudeColumn);
    }
    
    inline ::System::Void NewDataSet::EntityRow::SetaccelerationMagnitudeNull() {
        this[this->tableEntity->accelerationMagnitudeColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::EntityRow::IsaccelerationHeadingNull() {
        return this->IsNull(this->tableEntity->accelerationHeadingColumn);
    }
    
    inline ::System::Void NewDataSet::EntityRow::SetaccelerationHeadingNull() {
        this[this->tableEntity->accelerationHeadingColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::EntityRow::IsisPlayerNull() {
        return this->IsNull(this->tableEntity->isPlayerColumn);
    }
    
    inline ::System::Void NewDataSet::EntityRow::SetisPlayerNull() {
        this[this->tableEntity->isPlayerColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::EntityRow::IsfactionNull() {
        return this->IsNull(this->tableEntity->factionColumn);
    }
    
    inline ::System::Void NewDataSet::EntityRow::SetfactionNull() {
        this[this->tableEntity->factionColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::EntityRow::IsusesPhysicsNull() {
        return this->IsNull(this->tableEntity->usesPhysicsColumn);
    }
    
    inline ::System::Void NewDataSet::EntityRow::SetusesPhysicsNull() {
        this[this->tableEntity->usesPhysicsColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::EntityRow::IsWorldState_IdNull() {
        return this->IsNull(this->tableEntity->WorldState_IdColumn);
    }
    
    inline ::System::Void NewDataSet::EntityRow::SetWorldState_IdNull() {
        this[this->tableEntity->WorldState_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< test::NewDataSet::BaseImageRow^  >^  NewDataSet::EntityRow::GetBaseImageRows() {
        if (this->Table->ChildRelations[L"Entity_BaseImage"] == nullptr) {
            return gcnew cli::array< test::NewDataSet::BaseImageRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< test::NewDataSet::BaseImageRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Entity_BaseImage"])));
        }
    }
    
    inline cli::array< test::NewDataSet::SocketRow^  >^  NewDataSet::EntityRow::GetSocketRows() {
        if (this->Table->ChildRelations[L"Entity_Socket"] == nullptr) {
            return gcnew cli::array< test::NewDataSet::SocketRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< test::NewDataSet::SocketRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Entity_Socket"])));
        }
    }
    
    
    inline NewDataSet::BaseImageRow::BaseImageRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableBaseImage = (cli::safe_cast<test::NewDataSet::BaseImageDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::BaseImageRow::description::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableBaseImage->descriptionColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'description\' in table \'BaseImage\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::BaseImageRow::description::set(System::String^  value) {
        this[this->tableBaseImage->descriptionColumn] = value;
    }
    
    inline System::String^  NewDataSet::BaseImageRow::id::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableBaseImage->idColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'id\' in table \'BaseImage\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::BaseImageRow::id::set(System::String^  value) {
        this[this->tableBaseImage->idColumn] = value;
    }
    
    inline System::String^  NewDataSet::BaseImageRow::name::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableBaseImage->nameColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'name\' in table \'BaseImage\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::BaseImageRow::name::set(System::String^  value) {
        this[this->tableBaseImage->nameColumn] = value;
    }
    
    inline System::String^  NewDataSet::BaseImageRow::pictureSource::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableBaseImage->pictureSourceColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'pictureSource\' in table \'BaseImage\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::BaseImageRow::pictureSource::set(System::String^  value) {
        this[this->tableBaseImage->pictureSourceColumn] = value;
    }
    
    inline System::Int64 NewDataSet::BaseImageRow::scale::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableBaseImage->scaleColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'scale\' in table \'BaseImage\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::BaseImageRow::scale::set(System::Int64 value) {
        this[this->tableBaseImage->scaleColumn] = value;
    }
    
    inline System::Int64 NewDataSet::BaseImageRow::base_angle::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableBaseImage->base_angleColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'base_angle\' in table \'BaseImage\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::BaseImageRow::base_angle::set(System::Int64 value) {
        this[this->tableBaseImage->base_angleColumn] = value;
    }
    
    inline System::Int64 NewDataSet::BaseImageRow::current_angle::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableBaseImage->current_angleColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'current_angle\' in table \'BaseImage\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::BaseImageRow::current_angle::set(System::Int64 value) {
        this[this->tableBaseImage->current_angleColumn] = value;
    }
    
    inline System::String^  NewDataSet::BaseImageRow::translation_origin::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableBaseImage->translation_originColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'translation_origin\' in table \'BaseImage\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::BaseImageRow::translation_origin::set(System::String^  value) {
        this[this->tableBaseImage->translation_originColumn] = value;
    }
    
    inline System::String^  NewDataSet::BaseImageRow::rotation_origin::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableBaseImage->rotation_originColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'rotation_origin\' in table \'BaseImage\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::BaseImageRow::rotation_origin::set(System::String^  value) {
        this[this->tableBaseImage->rotation_originColumn] = value;
    }
    
    inline System::Int64 NewDataSet::BaseImageRow::translation_offset_x::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableBaseImage->translation_offset_xColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'translation_offset_x\' in table \'BaseImage\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::BaseImageRow::translation_offset_x::set(System::Int64 value) {
        this[this->tableBaseImage->translation_offset_xColumn] = value;
    }
    
    inline System::Int64 NewDataSet::BaseImageRow::translation_offset_y::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableBaseImage->translation_offset_yColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'translation_offset_y\' in table \'BaseImage\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::BaseImageRow::translation_offset_y::set(System::Int64 value) {
        this[this->tableBaseImage->translation_offset_yColumn] = value;
    }
    
    inline System::Int64 NewDataSet::BaseImageRow::rotation_offset_x::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableBaseImage->rotation_offset_xColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'rotation_offset_x\' in table \'BaseImage\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::BaseImageRow::rotation_offset_x::set(System::Int64 value) {
        this[this->tableBaseImage->rotation_offset_xColumn] = value;
    }
    
    inline System::Int64 NewDataSet::BaseImageRow::rotation_offset_y::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableBaseImage->rotation_offset_yColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'rotation_offset_y\' in table \'BaseImage\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::BaseImageRow::rotation_offset_y::set(System::Int64 value) {
        this[this->tableBaseImage->rotation_offset_yColumn] = value;
    }
    
    inline System::Int32 NewDataSet::BaseImageRow::Entity_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableBaseImage->Entity_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Entity_Id\' in table \'BaseImage\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::BaseImageRow::Entity_Id::set(System::Int32 value) {
        this[this->tableBaseImage->Entity_IdColumn] = value;
    }
    
    inline test::NewDataSet::EntityRow^  NewDataSet::BaseImageRow::EntityRow::get() {
        return (cli::safe_cast<test::NewDataSet::EntityRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Entity_BaseImage"])));
    }
    inline System::Void NewDataSet::BaseImageRow::EntityRow::set(test::NewDataSet::EntityRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"Entity_BaseImage"]);
    }
    
    inline ::System::Boolean NewDataSet::BaseImageRow::IsdescriptionNull() {
        return this->IsNull(this->tableBaseImage->descriptionColumn);
    }
    
    inline ::System::Void NewDataSet::BaseImageRow::SetdescriptionNull() {
        this[this->tableBaseImage->descriptionColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::BaseImageRow::IsidNull() {
        return this->IsNull(this->tableBaseImage->idColumn);
    }
    
    inline ::System::Void NewDataSet::BaseImageRow::SetidNull() {
        this[this->tableBaseImage->idColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::BaseImageRow::IsnameNull() {
        return this->IsNull(this->tableBaseImage->nameColumn);
    }
    
    inline ::System::Void NewDataSet::BaseImageRow::SetnameNull() {
        this[this->tableBaseImage->nameColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::BaseImageRow::IspictureSourceNull() {
        return this->IsNull(this->tableBaseImage->pictureSourceColumn);
    }
    
    inline ::System::Void NewDataSet::BaseImageRow::SetpictureSourceNull() {
        this[this->tableBaseImage->pictureSourceColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::BaseImageRow::IsscaleNull() {
        return this->IsNull(this->tableBaseImage->scaleColumn);
    }
    
    inline ::System::Void NewDataSet::BaseImageRow::SetscaleNull() {
        this[this->tableBaseImage->scaleColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::BaseImageRow::Isbase_angleNull() {
        return this->IsNull(this->tableBaseImage->base_angleColumn);
    }
    
    inline ::System::Void NewDataSet::BaseImageRow::Setbase_angleNull() {
        this[this->tableBaseImage->base_angleColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::BaseImageRow::Iscurrent_angleNull() {
        return this->IsNull(this->tableBaseImage->current_angleColumn);
    }
    
    inline ::System::Void NewDataSet::BaseImageRow::Setcurrent_angleNull() {
        this[this->tableBaseImage->current_angleColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::BaseImageRow::Istranslation_originNull() {
        return this->IsNull(this->tableBaseImage->translation_originColumn);
    }
    
    inline ::System::Void NewDataSet::BaseImageRow::Settranslation_originNull() {
        this[this->tableBaseImage->translation_originColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::BaseImageRow::Isrotation_originNull() {
        return this->IsNull(this->tableBaseImage->rotation_originColumn);
    }
    
    inline ::System::Void NewDataSet::BaseImageRow::Setrotation_originNull() {
        this[this->tableBaseImage->rotation_originColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::BaseImageRow::Istranslation_offset_xNull() {
        return this->IsNull(this->tableBaseImage->translation_offset_xColumn);
    }
    
    inline ::System::Void NewDataSet::BaseImageRow::Settranslation_offset_xNull() {
        this[this->tableBaseImage->translation_offset_xColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::BaseImageRow::Istranslation_offset_yNull() {
        return this->IsNull(this->tableBaseImage->translation_offset_yColumn);
    }
    
    inline ::System::Void NewDataSet::BaseImageRow::Settranslation_offset_yNull() {
        this[this->tableBaseImage->translation_offset_yColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::BaseImageRow::Isrotation_offset_xNull() {
        return this->IsNull(this->tableBaseImage->rotation_offset_xColumn);
    }
    
    inline ::System::Void NewDataSet::BaseImageRow::Setrotation_offset_xNull() {
        this[this->tableBaseImage->rotation_offset_xColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::BaseImageRow::Isrotation_offset_yNull() {
        return this->IsNull(this->tableBaseImage->rotation_offset_yColumn);
    }
    
    inline ::System::Void NewDataSet::BaseImageRow::Setrotation_offset_yNull() {
        this[this->tableBaseImage->rotation_offset_yColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::BaseImageRow::IsEntity_IdNull() {
        return this->IsNull(this->tableBaseImage->Entity_IdColumn);
    }
    
    inline ::System::Void NewDataSet::BaseImageRow::SetEntity_IdNull() {
        this[this->tableBaseImage->Entity_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::SocketRow::SocketRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableSocket = (cli::safe_cast<test::NewDataSet::SocketDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::SocketRow::description::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableSocket->descriptionColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'description\' in table \'Socket\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::SocketRow::description::set(System::String^  value) {
        this[this->tableSocket->descriptionColumn] = value;
    }
    
    inline System::String^  NewDataSet::SocketRow::id::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableSocket->idColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'id\' in table \'Socket\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::SocketRow::id::set(System::String^  value) {
        this[this->tableSocket->idColumn] = value;
    }
    
    inline System::String^  NewDataSet::SocketRow::name::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableSocket->nameColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'name\' in table \'Socket\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::SocketRow::name::set(System::String^  value) {
        this[this->tableSocket->nameColumn] = value;
    }
    
    inline System::Double NewDataSet::SocketRow::xPosition::get() {
        try {
            return (cli::safe_cast<::System::Double >(this[this->tableSocket->xPositionColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'xPosition\' in table \'Socket\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::SocketRow::xPosition::set(System::Double value) {
        this[this->tableSocket->xPositionColumn] = value;
    }
    
    inline System::Double NewDataSet::SocketRow::yPosition::get() {
        try {
            return (cli::safe_cast<::System::Double >(this[this->tableSocket->yPositionColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'yPosition\' in table \'Socket\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::SocketRow::yPosition::set(System::Double value) {
        this[this->tableSocket->yPositionColumn] = value;
    }
    
    inline System::Int64 NewDataSet::SocketRow::mass::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableSocket->massColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'mass\' in table \'Socket\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::SocketRow::mass::set(System::Int64 value) {
        this[this->tableSocket->massColumn] = value;
    }
    
    inline System::Int64 NewDataSet::SocketRow::energy::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableSocket->energyColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'energy\' in table \'Socket\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::SocketRow::energy::set(System::Int64 value) {
        this[this->tableSocket->energyColumn] = value;
    }
    
    inline System::String^  NewDataSet::SocketRow::type::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableSocket->typeColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'type\' in table \'Socket\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::SocketRow::type::set(System::String^  value) {
        this[this->tableSocket->typeColumn] = value;
    }
    
    inline System::Int32 NewDataSet::SocketRow::Socket_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableSocket->Socket_IdColumn]));
    }
    inline System::Void NewDataSet::SocketRow::Socket_Id::set(System::Int32 value) {
        this[this->tableSocket->Socket_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::SocketRow::Entity_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableSocket->Entity_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Entity_Id\' in table \'Socket\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::SocketRow::Entity_Id::set(System::Int32 value) {
        this[this->tableSocket->Entity_IdColumn] = value;
    }
    
    inline test::NewDataSet::EntityRow^  NewDataSet::SocketRow::EntityRow::get() {
        return (cli::safe_cast<test::NewDataSet::EntityRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Entity_Socket"])));
    }
    inline System::Void NewDataSet::SocketRow::EntityRow::set(test::NewDataSet::EntityRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"Entity_Socket"]);
    }
    
    inline ::System::Boolean NewDataSet::SocketRow::IsdescriptionNull() {
        return this->IsNull(this->tableSocket->descriptionColumn);
    }
    
    inline ::System::Void NewDataSet::SocketRow::SetdescriptionNull() {
        this[this->tableSocket->descriptionColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::SocketRow::IsidNull() {
        return this->IsNull(this->tableSocket->idColumn);
    }
    
    inline ::System::Void NewDataSet::SocketRow::SetidNull() {
        this[this->tableSocket->idColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::SocketRow::IsnameNull() {
        return this->IsNull(this->tableSocket->nameColumn);
    }
    
    inline ::System::Void NewDataSet::SocketRow::SetnameNull() {
        this[this->tableSocket->nameColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::SocketRow::IsxPositionNull() {
        return this->IsNull(this->tableSocket->xPositionColumn);
    }
    
    inline ::System::Void NewDataSet::SocketRow::SetxPositionNull() {
        this[this->tableSocket->xPositionColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::SocketRow::IsyPositionNull() {
        return this->IsNull(this->tableSocket->yPositionColumn);
    }
    
    inline ::System::Void NewDataSet::SocketRow::SetyPositionNull() {
        this[this->tableSocket->yPositionColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::SocketRow::IsmassNull() {
        return this->IsNull(this->tableSocket->massColumn);
    }
    
    inline ::System::Void NewDataSet::SocketRow::SetmassNull() {
        this[this->tableSocket->massColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::SocketRow::IsenergyNull() {
        return this->IsNull(this->tableSocket->energyColumn);
    }
    
    inline ::System::Void NewDataSet::SocketRow::SetenergyNull() {
        this[this->tableSocket->energyColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::SocketRow::IstypeNull() {
        return this->IsNull(this->tableSocket->typeColumn);
    }
    
    inline ::System::Void NewDataSet::SocketRow::SettypeNull() {
        this[this->tableSocket->typeColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::SocketRow::IsEntity_IdNull() {
        return this->IsNull(this->tableSocket->Entity_IdColumn);
    }
    
    inline ::System::Void NewDataSet::SocketRow::SetEntity_IdNull() {
        this[this->tableSocket->Entity_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< test::NewDataSet::Beam_WeaponRow^  >^  NewDataSet::SocketRow::GetBeam_WeaponRows() {
        if (this->Table->ChildRelations[L"Socket_Beam_Weapon"] == nullptr) {
            return gcnew cli::array< test::NewDataSet::Beam_WeaponRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< test::NewDataSet::Beam_WeaponRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Socket_Beam_Weapon"])));
        }
    }
    
    inline cli::array< test::NewDataSet::Gun_WeaponRow^  >^  NewDataSet::SocketRow::GetGun_WeaponRows() {
        if (this->Table->ChildRelations[L"Socket_Gun_Weapon"] == nullptr) {
            return gcnew cli::array< test::NewDataSet::Gun_WeaponRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< test::NewDataSet::Gun_WeaponRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Socket_Gun_Weapon"])));
        }
    }
    
    inline cli::array< test::NewDataSet::Missile_WeaponRow^  >^  NewDataSet::SocketRow::GetMissile_WeaponRows() {
        if (this->Table->ChildRelations[L"Socket_Missile_Weapon"] == nullptr) {
            return gcnew cli::array< test::NewDataSet::Missile_WeaponRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< test::NewDataSet::Missile_WeaponRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Socket_Missile_Weapon"])));
        }
    }
    
    inline cli::array< test::NewDataSet::DeviceRow^  >^  NewDataSet::SocketRow::GetDeviceRows() {
        if (this->Table->ChildRelations[L"Socket_Device"] == nullptr) {
            return gcnew cli::array< test::NewDataSet::DeviceRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< test::NewDataSet::DeviceRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Socket_Device"])));
        }
    }
    
    inline cli::array< test::NewDataSet::EngineRow^  >^  NewDataSet::SocketRow::GetEngineRows() {
        if (this->Table->ChildRelations[L"Socket_Engine"] == nullptr) {
            return gcnew cli::array< test::NewDataSet::EngineRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< test::NewDataSet::EngineRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Socket_Engine"])));
        }
    }
    
    inline cli::array< test::NewDataSet::PowerplantRow^  >^  NewDataSet::SocketRow::GetPowerplantRows() {
        if (this->Table->ChildRelations[L"Socket_Powerplant"] == nullptr) {
            return gcnew cli::array< test::NewDataSet::PowerplantRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< test::NewDataSet::PowerplantRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Socket_Powerplant"])));
        }
    }
    
    
    inline NewDataSet::Beam_WeaponRow::Beam_WeaponRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableBeam_Weapon = (cli::safe_cast<test::NewDataSet::Beam_WeaponDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::Beam_WeaponRow::description::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableBeam_Weapon->descriptionColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'description\' in table \'Beam_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Beam_WeaponRow::description::set(System::String^  value) {
        this[this->tableBeam_Weapon->descriptionColumn] = value;
    }
    
    inline System::String^  NewDataSet::Beam_WeaponRow::id::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableBeam_Weapon->idColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'id\' in table \'Beam_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Beam_WeaponRow::id::set(System::String^  value) {
        this[this->tableBeam_Weapon->idColumn] = value;
    }
    
    inline System::String^  NewDataSet::Beam_WeaponRow::name::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableBeam_Weapon->nameColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'name\' in table \'Beam_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Beam_WeaponRow::name::set(System::String^  value) {
        this[this->tableBeam_Weapon->nameColumn] = value;
    }
    
    inline System::String^  NewDataSet::Beam_WeaponRow::pictureSource::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableBeam_Weapon->pictureSourceColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'pictureSource\' in table \'Beam_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Beam_WeaponRow::pictureSource::set(System::String^  value) {
        this[this->tableBeam_Weapon->pictureSourceColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Beam_WeaponRow::scale::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableBeam_Weapon->scaleColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'scale\' in table \'Beam_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Beam_WeaponRow::scale::set(System::Int64 value) {
        this[this->tableBeam_Weapon->scaleColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Beam_WeaponRow::base_angle::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableBeam_Weapon->base_angleColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'base_angle\' in table \'Beam_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Beam_WeaponRow::base_angle::set(System::Int64 value) {
        this[this->tableBeam_Weapon->base_angleColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Beam_WeaponRow::current_angle::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableBeam_Weapon->current_angleColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'current_angle\' in table \'Beam_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Beam_WeaponRow::current_angle::set(System::Int64 value) {
        this[this->tableBeam_Weapon->current_angleColumn] = value;
    }
    
    inline System::String^  NewDataSet::Beam_WeaponRow::translation_origin::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableBeam_Weapon->translation_originColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'translation_origin\' in table \'Beam_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Beam_WeaponRow::translation_origin::set(System::String^  value) {
        this[this->tableBeam_Weapon->translation_originColumn] = value;
    }
    
    inline System::String^  NewDataSet::Beam_WeaponRow::rotation_origin::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableBeam_Weapon->rotation_originColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'rotation_origin\' in table \'Beam_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Beam_WeaponRow::rotation_origin::set(System::String^  value) {
        this[this->tableBeam_Weapon->rotation_originColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Beam_WeaponRow::translation_offset_x::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableBeam_Weapon->translation_offset_xColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'translation_offset_x\' in table \'Beam_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Beam_WeaponRow::translation_offset_x::set(System::Int64 value) {
        this[this->tableBeam_Weapon->translation_offset_xColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Beam_WeaponRow::translation_offset_y::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableBeam_Weapon->translation_offset_yColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'translation_offset_y\' in table \'Beam_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Beam_WeaponRow::translation_offset_y::set(System::Int64 value) {
        this[this->tableBeam_Weapon->translation_offset_yColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Beam_WeaponRow::rotation_offset_x::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableBeam_Weapon->rotation_offset_xColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'rotation_offset_x\' in table \'Beam_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Beam_WeaponRow::rotation_offset_x::set(System::Int64 value) {
        this[this->tableBeam_Weapon->rotation_offset_xColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Beam_WeaponRow::rotation_offset_y::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableBeam_Weapon->rotation_offset_yColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'rotation_offset_y\' in table \'Beam_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Beam_WeaponRow::rotation_offset_y::set(System::Int64 value) {
        this[this->tableBeam_Weapon->rotation_offset_yColumn] = value;
    }
    
    inline System::String^  NewDataSet::Beam_WeaponRow::capacitor_type::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableBeam_Weapon->capacitor_typeColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'capacitor_type\' in table \'Beam_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Beam_WeaponRow::capacitor_type::set(System::String^  value) {
        this[this->tableBeam_Weapon->capacitor_typeColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Beam_WeaponRow::capacitor_amount::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableBeam_Weapon->capacitor_amountColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'capacitor_amount\' in table \'Beam_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Beam_WeaponRow::capacitor_amount::set(System::Int64 value) {
        this[this->tableBeam_Weapon->capacitor_amountColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Beam_WeaponRow::movementHeading::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableBeam_Weapon->movementHeadingColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'movementHeading\' in table \'Beam_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Beam_WeaponRow::movementHeading::set(System::Int64 value) {
        this[this->tableBeam_Weapon->movementHeadingColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Beam_WeaponRow::movementSpeed::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableBeam_Weapon->movementSpeedColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'movementSpeed\' in table \'Beam_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Beam_WeaponRow::movementSpeed::set(System::Int64 value) {
        this[this->tableBeam_Weapon->movementSpeedColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Beam_WeaponRow::accelerationMagnitude::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableBeam_Weapon->accelerationMagnitudeColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'accelerationMagnitude\' in table \'Beam_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Beam_WeaponRow::accelerationMagnitude::set(System::Int64 value) {
        this[this->tableBeam_Weapon->accelerationMagnitudeColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Beam_WeaponRow::accelerationHeading::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableBeam_Weapon->accelerationHeadingColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'accelerationHeading\' in table \'Beam_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Beam_WeaponRow::accelerationHeading::set(System::Int64 value) {
        this[this->tableBeam_Weapon->accelerationHeadingColumn] = value;
    }
    
    inline System::Int32 NewDataSet::Beam_WeaponRow::Socket_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableBeam_Weapon->Socket_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Socket_Id\' in table \'Beam_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Beam_WeaponRow::Socket_Id::set(System::Int32 value) {
        this[this->tableBeam_Weapon->Socket_IdColumn] = value;
    }
    
    inline test::NewDataSet::SocketRow^  NewDataSet::Beam_WeaponRow::SocketRow::get() {
        return (cli::safe_cast<test::NewDataSet::SocketRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Socket_Beam_Weapon"])));
    }
    inline System::Void NewDataSet::Beam_WeaponRow::SocketRow::set(test::NewDataSet::SocketRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"Socket_Beam_Weapon"]);
    }
    
    inline ::System::Boolean NewDataSet::Beam_WeaponRow::IsdescriptionNull() {
        return this->IsNull(this->tableBeam_Weapon->descriptionColumn);
    }
    
    inline ::System::Void NewDataSet::Beam_WeaponRow::SetdescriptionNull() {
        this[this->tableBeam_Weapon->descriptionColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Beam_WeaponRow::IsidNull() {
        return this->IsNull(this->tableBeam_Weapon->idColumn);
    }
    
    inline ::System::Void NewDataSet::Beam_WeaponRow::SetidNull() {
        this[this->tableBeam_Weapon->idColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Beam_WeaponRow::IsnameNull() {
        return this->IsNull(this->tableBeam_Weapon->nameColumn);
    }
    
    inline ::System::Void NewDataSet::Beam_WeaponRow::SetnameNull() {
        this[this->tableBeam_Weapon->nameColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Beam_WeaponRow::IspictureSourceNull() {
        return this->IsNull(this->tableBeam_Weapon->pictureSourceColumn);
    }
    
    inline ::System::Void NewDataSet::Beam_WeaponRow::SetpictureSourceNull() {
        this[this->tableBeam_Weapon->pictureSourceColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Beam_WeaponRow::IsscaleNull() {
        return this->IsNull(this->tableBeam_Weapon->scaleColumn);
    }
    
    inline ::System::Void NewDataSet::Beam_WeaponRow::SetscaleNull() {
        this[this->tableBeam_Weapon->scaleColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Beam_WeaponRow::Isbase_angleNull() {
        return this->IsNull(this->tableBeam_Weapon->base_angleColumn);
    }
    
    inline ::System::Void NewDataSet::Beam_WeaponRow::Setbase_angleNull() {
        this[this->tableBeam_Weapon->base_angleColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Beam_WeaponRow::Iscurrent_angleNull() {
        return this->IsNull(this->tableBeam_Weapon->current_angleColumn);
    }
    
    inline ::System::Void NewDataSet::Beam_WeaponRow::Setcurrent_angleNull() {
        this[this->tableBeam_Weapon->current_angleColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Beam_WeaponRow::Istranslation_originNull() {
        return this->IsNull(this->tableBeam_Weapon->translation_originColumn);
    }
    
    inline ::System::Void NewDataSet::Beam_WeaponRow::Settranslation_originNull() {
        this[this->tableBeam_Weapon->translation_originColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Beam_WeaponRow::Isrotation_originNull() {
        return this->IsNull(this->tableBeam_Weapon->rotation_originColumn);
    }
    
    inline ::System::Void NewDataSet::Beam_WeaponRow::Setrotation_originNull() {
        this[this->tableBeam_Weapon->rotation_originColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Beam_WeaponRow::Istranslation_offset_xNull() {
        return this->IsNull(this->tableBeam_Weapon->translation_offset_xColumn);
    }
    
    inline ::System::Void NewDataSet::Beam_WeaponRow::Settranslation_offset_xNull() {
        this[this->tableBeam_Weapon->translation_offset_xColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Beam_WeaponRow::Istranslation_offset_yNull() {
        return this->IsNull(this->tableBeam_Weapon->translation_offset_yColumn);
    }
    
    inline ::System::Void NewDataSet::Beam_WeaponRow::Settranslation_offset_yNull() {
        this[this->tableBeam_Weapon->translation_offset_yColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Beam_WeaponRow::Isrotation_offset_xNull() {
        return this->IsNull(this->tableBeam_Weapon->rotation_offset_xColumn);
    }
    
    inline ::System::Void NewDataSet::Beam_WeaponRow::Setrotation_offset_xNull() {
        this[this->tableBeam_Weapon->rotation_offset_xColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Beam_WeaponRow::Isrotation_offset_yNull() {
        return this->IsNull(this->tableBeam_Weapon->rotation_offset_yColumn);
    }
    
    inline ::System::Void NewDataSet::Beam_WeaponRow::Setrotation_offset_yNull() {
        this[this->tableBeam_Weapon->rotation_offset_yColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Beam_WeaponRow::Iscapacitor_typeNull() {
        return this->IsNull(this->tableBeam_Weapon->capacitor_typeColumn);
    }
    
    inline ::System::Void NewDataSet::Beam_WeaponRow::Setcapacitor_typeNull() {
        this[this->tableBeam_Weapon->capacitor_typeColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Beam_WeaponRow::Iscapacitor_amountNull() {
        return this->IsNull(this->tableBeam_Weapon->capacitor_amountColumn);
    }
    
    inline ::System::Void NewDataSet::Beam_WeaponRow::Setcapacitor_amountNull() {
        this[this->tableBeam_Weapon->capacitor_amountColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Beam_WeaponRow::IsmovementHeadingNull() {
        return this->IsNull(this->tableBeam_Weapon->movementHeadingColumn);
    }
    
    inline ::System::Void NewDataSet::Beam_WeaponRow::SetmovementHeadingNull() {
        this[this->tableBeam_Weapon->movementHeadingColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Beam_WeaponRow::IsmovementSpeedNull() {
        return this->IsNull(this->tableBeam_Weapon->movementSpeedColumn);
    }
    
    inline ::System::Void NewDataSet::Beam_WeaponRow::SetmovementSpeedNull() {
        this[this->tableBeam_Weapon->movementSpeedColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Beam_WeaponRow::IsaccelerationMagnitudeNull() {
        return this->IsNull(this->tableBeam_Weapon->accelerationMagnitudeColumn);
    }
    
    inline ::System::Void NewDataSet::Beam_WeaponRow::SetaccelerationMagnitudeNull() {
        this[this->tableBeam_Weapon->accelerationMagnitudeColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Beam_WeaponRow::IsaccelerationHeadingNull() {
        return this->IsNull(this->tableBeam_Weapon->accelerationHeadingColumn);
    }
    
    inline ::System::Void NewDataSet::Beam_WeaponRow::SetaccelerationHeadingNull() {
        this[this->tableBeam_Weapon->accelerationHeadingColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Beam_WeaponRow::IsSocket_IdNull() {
        return this->IsNull(this->tableBeam_Weapon->Socket_IdColumn);
    }
    
    inline ::System::Void NewDataSet::Beam_WeaponRow::SetSocket_IdNull() {
        this[this->tableBeam_Weapon->Socket_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::Gun_WeaponRow::Gun_WeaponRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableGun_Weapon = (cli::safe_cast<test::NewDataSet::Gun_WeaponDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::Gun_WeaponRow::description::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableGun_Weapon->descriptionColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'description\' in table \'Gun_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Gun_WeaponRow::description::set(System::String^  value) {
        this[this->tableGun_Weapon->descriptionColumn] = value;
    }
    
    inline System::String^  NewDataSet::Gun_WeaponRow::id::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableGun_Weapon->idColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'id\' in table \'Gun_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Gun_WeaponRow::id::set(System::String^  value) {
        this[this->tableGun_Weapon->idColumn] = value;
    }
    
    inline System::String^  NewDataSet::Gun_WeaponRow::name::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableGun_Weapon->nameColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'name\' in table \'Gun_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Gun_WeaponRow::name::set(System::String^  value) {
        this[this->tableGun_Weapon->nameColumn] = value;
    }
    
    inline System::String^  NewDataSet::Gun_WeaponRow::pictureSource::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableGun_Weapon->pictureSourceColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'pictureSource\' in table \'Gun_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Gun_WeaponRow::pictureSource::set(System::String^  value) {
        this[this->tableGun_Weapon->pictureSourceColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Gun_WeaponRow::scale::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableGun_Weapon->scaleColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'scale\' in table \'Gun_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Gun_WeaponRow::scale::set(System::Int64 value) {
        this[this->tableGun_Weapon->scaleColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Gun_WeaponRow::base_angle::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableGun_Weapon->base_angleColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'base_angle\' in table \'Gun_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Gun_WeaponRow::base_angle::set(System::Int64 value) {
        this[this->tableGun_Weapon->base_angleColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Gun_WeaponRow::current_angle::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableGun_Weapon->current_angleColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'current_angle\' in table \'Gun_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Gun_WeaponRow::current_angle::set(System::Int64 value) {
        this[this->tableGun_Weapon->current_angleColumn] = value;
    }
    
    inline System::String^  NewDataSet::Gun_WeaponRow::translation_origin::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableGun_Weapon->translation_originColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'translation_origin\' in table \'Gun_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Gun_WeaponRow::translation_origin::set(System::String^  value) {
        this[this->tableGun_Weapon->translation_originColumn] = value;
    }
    
    inline System::String^  NewDataSet::Gun_WeaponRow::rotation_origin::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableGun_Weapon->rotation_originColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'rotation_origin\' in table \'Gun_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Gun_WeaponRow::rotation_origin::set(System::String^  value) {
        this[this->tableGun_Weapon->rotation_originColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Gun_WeaponRow::translation_offset_x::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableGun_Weapon->translation_offset_xColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'translation_offset_x\' in table \'Gun_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Gun_WeaponRow::translation_offset_x::set(System::Int64 value) {
        this[this->tableGun_Weapon->translation_offset_xColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Gun_WeaponRow::translation_offset_y::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableGun_Weapon->translation_offset_yColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'translation_offset_y\' in table \'Gun_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Gun_WeaponRow::translation_offset_y::set(System::Int64 value) {
        this[this->tableGun_Weapon->translation_offset_yColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Gun_WeaponRow::rotation_offset_x::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableGun_Weapon->rotation_offset_xColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'rotation_offset_x\' in table \'Gun_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Gun_WeaponRow::rotation_offset_x::set(System::Int64 value) {
        this[this->tableGun_Weapon->rotation_offset_xColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Gun_WeaponRow::rotation_offset_y::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableGun_Weapon->rotation_offset_yColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'rotation_offset_y\' in table \'Gun_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Gun_WeaponRow::rotation_offset_y::set(System::Int64 value) {
        this[this->tableGun_Weapon->rotation_offset_yColumn] = value;
    }
    
    inline System::String^  NewDataSet::Gun_WeaponRow::subtype::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableGun_Weapon->subtypeColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'subtype\' in table \'Gun_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Gun_WeaponRow::subtype::set(System::String^  value) {
        this[this->tableGun_Weapon->subtypeColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Gun_WeaponRow::caliber::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableGun_Weapon->caliberColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'caliber\' in table \'Gun_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Gun_WeaponRow::caliber::set(System::Int64 value) {
        this[this->tableGun_Weapon->caliberColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Gun_WeaponRow::movementHeading::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableGun_Weapon->movementHeadingColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'movementHeading\' in table \'Gun_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Gun_WeaponRow::movementHeading::set(System::Int64 value) {
        this[this->tableGun_Weapon->movementHeadingColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Gun_WeaponRow::movementSpeed::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableGun_Weapon->movementSpeedColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'movementSpeed\' in table \'Gun_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Gun_WeaponRow::movementSpeed::set(System::Int64 value) {
        this[this->tableGun_Weapon->movementSpeedColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Gun_WeaponRow::accelerationMagnitude::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableGun_Weapon->accelerationMagnitudeColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'accelerationMagnitude\' in table \'Gun_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Gun_WeaponRow::accelerationMagnitude::set(System::Int64 value) {
        this[this->tableGun_Weapon->accelerationMagnitudeColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Gun_WeaponRow::accelerationHeading::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableGun_Weapon->accelerationHeadingColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'accelerationHeading\' in table \'Gun_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Gun_WeaponRow::accelerationHeading::set(System::Int64 value) {
        this[this->tableGun_Weapon->accelerationHeadingColumn] = value;
    }
    
    inline System::String^  NewDataSet::Gun_WeaponRow::gun_ammo_type::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableGun_Weapon->gun_ammo_typeColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'gun_ammo_type\' in table \'Gun_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Gun_WeaponRow::gun_ammo_type::set(System::String^  value) {
        this[this->tableGun_Weapon->gun_ammo_typeColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Gun_WeaponRow::gun_ammo_amount::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableGun_Weapon->gun_ammo_amountColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'gun_ammo_amount\' in table \'Gun_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Gun_WeaponRow::gun_ammo_amount::set(System::Int64 value) {
        this[this->tableGun_Weapon->gun_ammo_amountColumn] = value;
    }
    
    inline System::Int32 NewDataSet::Gun_WeaponRow::Socket_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableGun_Weapon->Socket_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Socket_Id\' in table \'Gun_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Gun_WeaponRow::Socket_Id::set(System::Int32 value) {
        this[this->tableGun_Weapon->Socket_IdColumn] = value;
    }
    
    inline test::NewDataSet::SocketRow^  NewDataSet::Gun_WeaponRow::SocketRow::get() {
        return (cli::safe_cast<test::NewDataSet::SocketRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Socket_Gun_Weapon"])));
    }
    inline System::Void NewDataSet::Gun_WeaponRow::SocketRow::set(test::NewDataSet::SocketRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"Socket_Gun_Weapon"]);
    }
    
    inline ::System::Boolean NewDataSet::Gun_WeaponRow::IsdescriptionNull() {
        return this->IsNull(this->tableGun_Weapon->descriptionColumn);
    }
    
    inline ::System::Void NewDataSet::Gun_WeaponRow::SetdescriptionNull() {
        this[this->tableGun_Weapon->descriptionColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Gun_WeaponRow::IsidNull() {
        return this->IsNull(this->tableGun_Weapon->idColumn);
    }
    
    inline ::System::Void NewDataSet::Gun_WeaponRow::SetidNull() {
        this[this->tableGun_Weapon->idColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Gun_WeaponRow::IsnameNull() {
        return this->IsNull(this->tableGun_Weapon->nameColumn);
    }
    
    inline ::System::Void NewDataSet::Gun_WeaponRow::SetnameNull() {
        this[this->tableGun_Weapon->nameColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Gun_WeaponRow::IspictureSourceNull() {
        return this->IsNull(this->tableGun_Weapon->pictureSourceColumn);
    }
    
    inline ::System::Void NewDataSet::Gun_WeaponRow::SetpictureSourceNull() {
        this[this->tableGun_Weapon->pictureSourceColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Gun_WeaponRow::IsscaleNull() {
        return this->IsNull(this->tableGun_Weapon->scaleColumn);
    }
    
    inline ::System::Void NewDataSet::Gun_WeaponRow::SetscaleNull() {
        this[this->tableGun_Weapon->scaleColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Gun_WeaponRow::Isbase_angleNull() {
        return this->IsNull(this->tableGun_Weapon->base_angleColumn);
    }
    
    inline ::System::Void NewDataSet::Gun_WeaponRow::Setbase_angleNull() {
        this[this->tableGun_Weapon->base_angleColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Gun_WeaponRow::Iscurrent_angleNull() {
        return this->IsNull(this->tableGun_Weapon->current_angleColumn);
    }
    
    inline ::System::Void NewDataSet::Gun_WeaponRow::Setcurrent_angleNull() {
        this[this->tableGun_Weapon->current_angleColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Gun_WeaponRow::Istranslation_originNull() {
        return this->IsNull(this->tableGun_Weapon->translation_originColumn);
    }
    
    inline ::System::Void NewDataSet::Gun_WeaponRow::Settranslation_originNull() {
        this[this->tableGun_Weapon->translation_originColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Gun_WeaponRow::Isrotation_originNull() {
        return this->IsNull(this->tableGun_Weapon->rotation_originColumn);
    }
    
    inline ::System::Void NewDataSet::Gun_WeaponRow::Setrotation_originNull() {
        this[this->tableGun_Weapon->rotation_originColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Gun_WeaponRow::Istranslation_offset_xNull() {
        return this->IsNull(this->tableGun_Weapon->translation_offset_xColumn);
    }
    
    inline ::System::Void NewDataSet::Gun_WeaponRow::Settranslation_offset_xNull() {
        this[this->tableGun_Weapon->translation_offset_xColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Gun_WeaponRow::Istranslation_offset_yNull() {
        return this->IsNull(this->tableGun_Weapon->translation_offset_yColumn);
    }
    
    inline ::System::Void NewDataSet::Gun_WeaponRow::Settranslation_offset_yNull() {
        this[this->tableGun_Weapon->translation_offset_yColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Gun_WeaponRow::Isrotation_offset_xNull() {
        return this->IsNull(this->tableGun_Weapon->rotation_offset_xColumn);
    }
    
    inline ::System::Void NewDataSet::Gun_WeaponRow::Setrotation_offset_xNull() {
        this[this->tableGun_Weapon->rotation_offset_xColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Gun_WeaponRow::Isrotation_offset_yNull() {
        return this->IsNull(this->tableGun_Weapon->rotation_offset_yColumn);
    }
    
    inline ::System::Void NewDataSet::Gun_WeaponRow::Setrotation_offset_yNull() {
        this[this->tableGun_Weapon->rotation_offset_yColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Gun_WeaponRow::IssubtypeNull() {
        return this->IsNull(this->tableGun_Weapon->subtypeColumn);
    }
    
    inline ::System::Void NewDataSet::Gun_WeaponRow::SetsubtypeNull() {
        this[this->tableGun_Weapon->subtypeColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Gun_WeaponRow::IscaliberNull() {
        return this->IsNull(this->tableGun_Weapon->caliberColumn);
    }
    
    inline ::System::Void NewDataSet::Gun_WeaponRow::SetcaliberNull() {
        this[this->tableGun_Weapon->caliberColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Gun_WeaponRow::IsmovementHeadingNull() {
        return this->IsNull(this->tableGun_Weapon->movementHeadingColumn);
    }
    
    inline ::System::Void NewDataSet::Gun_WeaponRow::SetmovementHeadingNull() {
        this[this->tableGun_Weapon->movementHeadingColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Gun_WeaponRow::IsmovementSpeedNull() {
        return this->IsNull(this->tableGun_Weapon->movementSpeedColumn);
    }
    
    inline ::System::Void NewDataSet::Gun_WeaponRow::SetmovementSpeedNull() {
        this[this->tableGun_Weapon->movementSpeedColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Gun_WeaponRow::IsaccelerationMagnitudeNull() {
        return this->IsNull(this->tableGun_Weapon->accelerationMagnitudeColumn);
    }
    
    inline ::System::Void NewDataSet::Gun_WeaponRow::SetaccelerationMagnitudeNull() {
        this[this->tableGun_Weapon->accelerationMagnitudeColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Gun_WeaponRow::IsaccelerationHeadingNull() {
        return this->IsNull(this->tableGun_Weapon->accelerationHeadingColumn);
    }
    
    inline ::System::Void NewDataSet::Gun_WeaponRow::SetaccelerationHeadingNull() {
        this[this->tableGun_Weapon->accelerationHeadingColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Gun_WeaponRow::Isgun_ammo_typeNull() {
        return this->IsNull(this->tableGun_Weapon->gun_ammo_typeColumn);
    }
    
    inline ::System::Void NewDataSet::Gun_WeaponRow::Setgun_ammo_typeNull() {
        this[this->tableGun_Weapon->gun_ammo_typeColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Gun_WeaponRow::Isgun_ammo_amountNull() {
        return this->IsNull(this->tableGun_Weapon->gun_ammo_amountColumn);
    }
    
    inline ::System::Void NewDataSet::Gun_WeaponRow::Setgun_ammo_amountNull() {
        this[this->tableGun_Weapon->gun_ammo_amountColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Gun_WeaponRow::IsSocket_IdNull() {
        return this->IsNull(this->tableGun_Weapon->Socket_IdColumn);
    }
    
    inline ::System::Void NewDataSet::Gun_WeaponRow::SetSocket_IdNull() {
        this[this->tableGun_Weapon->Socket_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::Missile_WeaponRow::Missile_WeaponRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableMissile_Weapon = (cli::safe_cast<test::NewDataSet::Missile_WeaponDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::Missile_WeaponRow::description::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableMissile_Weapon->descriptionColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'description\' in table \'Missile_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Missile_WeaponRow::description::set(System::String^  value) {
        this[this->tableMissile_Weapon->descriptionColumn] = value;
    }
    
    inline System::String^  NewDataSet::Missile_WeaponRow::id::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableMissile_Weapon->idColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'id\' in table \'Missile_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Missile_WeaponRow::id::set(System::String^  value) {
        this[this->tableMissile_Weapon->idColumn] = value;
    }
    
    inline System::String^  NewDataSet::Missile_WeaponRow::name::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableMissile_Weapon->nameColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'name\' in table \'Missile_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Missile_WeaponRow::name::set(System::String^  value) {
        this[this->tableMissile_Weapon->nameColumn] = value;
    }
    
    inline System::String^  NewDataSet::Missile_WeaponRow::pictureSource::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableMissile_Weapon->pictureSourceColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'pictureSource\' in table \'Missile_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Missile_WeaponRow::pictureSource::set(System::String^  value) {
        this[this->tableMissile_Weapon->pictureSourceColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Missile_WeaponRow::scale::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableMissile_Weapon->scaleColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'scale\' in table \'Missile_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Missile_WeaponRow::scale::set(System::Int64 value) {
        this[this->tableMissile_Weapon->scaleColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Missile_WeaponRow::base_angle::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableMissile_Weapon->base_angleColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'base_angle\' in table \'Missile_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Missile_WeaponRow::base_angle::set(System::Int64 value) {
        this[this->tableMissile_Weapon->base_angleColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Missile_WeaponRow::current_angle::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableMissile_Weapon->current_angleColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'current_angle\' in table \'Missile_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Missile_WeaponRow::current_angle::set(System::Int64 value) {
        this[this->tableMissile_Weapon->current_angleColumn] = value;
    }
    
    inline System::String^  NewDataSet::Missile_WeaponRow::translation_origin::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableMissile_Weapon->translation_originColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'translation_origin\' in table \'Missile_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Missile_WeaponRow::translation_origin::set(System::String^  value) {
        this[this->tableMissile_Weapon->translation_originColumn] = value;
    }
    
    inline System::String^  NewDataSet::Missile_WeaponRow::rotation_origin::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableMissile_Weapon->rotation_originColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'rotation_origin\' in table \'Missile_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Missile_WeaponRow::rotation_origin::set(System::String^  value) {
        this[this->tableMissile_Weapon->rotation_originColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Missile_WeaponRow::translation_offset_x::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableMissile_Weapon->translation_offset_xColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'translation_offset_x\' in table \'Missile_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Missile_WeaponRow::translation_offset_x::set(System::Int64 value) {
        this[this->tableMissile_Weapon->translation_offset_xColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Missile_WeaponRow::translation_offset_y::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableMissile_Weapon->translation_offset_yColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'translation_offset_y\' in table \'Missile_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Missile_WeaponRow::translation_offset_y::set(System::Int64 value) {
        this[this->tableMissile_Weapon->translation_offset_yColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Missile_WeaponRow::rotation_offset_x::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableMissile_Weapon->rotation_offset_xColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'rotation_offset_x\' in table \'Missile_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Missile_WeaponRow::rotation_offset_x::set(System::Int64 value) {
        this[this->tableMissile_Weapon->rotation_offset_xColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Missile_WeaponRow::rotation_offset_y::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableMissile_Weapon->rotation_offset_yColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'rotation_offset_y\' in table \'Missile_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Missile_WeaponRow::rotation_offset_y::set(System::Int64 value) {
        this[this->tableMissile_Weapon->rotation_offset_yColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Missile_WeaponRow::missile_size::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableMissile_Weapon->missile_sizeColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'missile_size\' in table \'Missile_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Missile_WeaponRow::missile_size::set(System::Int64 value) {
        this[this->tableMissile_Weapon->missile_sizeColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Missile_WeaponRow::multishot::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableMissile_Weapon->multishotColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'multishot\' in table \'Missile_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Missile_WeaponRow::multishot::set(System::Int64 value) {
        this[this->tableMissile_Weapon->multishotColumn] = value;
    }
    
    inline System::String^  NewDataSet::Missile_WeaponRow::missile_ammo_type::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableMissile_Weapon->missile_ammo_typeColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'missile_ammo_type\' in table \'Missile_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Missile_WeaponRow::missile_ammo_type::set(System::String^  value) {
        this[this->tableMissile_Weapon->missile_ammo_typeColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Missile_WeaponRow::missile_ammo_amount::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableMissile_Weapon->missile_ammo_amountColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'missile_ammo_amount\' in table \'Missile_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Missile_WeaponRow::missile_ammo_amount::set(System::Int64 value) {
        this[this->tableMissile_Weapon->missile_ammo_amountColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Missile_WeaponRow::movementHeading::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableMissile_Weapon->movementHeadingColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'movementHeading\' in table \'Missile_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Missile_WeaponRow::movementHeading::set(System::Int64 value) {
        this[this->tableMissile_Weapon->movementHeadingColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Missile_WeaponRow::movementSpeed::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableMissile_Weapon->movementSpeedColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'movementSpeed\' in table \'Missile_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Missile_WeaponRow::movementSpeed::set(System::Int64 value) {
        this[this->tableMissile_Weapon->movementSpeedColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Missile_WeaponRow::accelerationMagnitude::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableMissile_Weapon->accelerationMagnitudeColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'accelerationMagnitude\' in table \'Missile_Weapon\' is DBNull." 
L"", 
                e));
        }
    }
    inline System::Void NewDataSet::Missile_WeaponRow::accelerationMagnitude::set(System::Int64 value) {
        this[this->tableMissile_Weapon->accelerationMagnitudeColumn] = value;
    }
    
    inline System::Int64 NewDataSet::Missile_WeaponRow::accelerationHeading::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableMissile_Weapon->accelerationHeadingColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'accelerationHeading\' in table \'Missile_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Missile_WeaponRow::accelerationHeading::set(System::Int64 value) {
        this[this->tableMissile_Weapon->accelerationHeadingColumn] = value;
    }
    
    inline System::Int32 NewDataSet::Missile_WeaponRow::Socket_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableMissile_Weapon->Socket_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Socket_Id\' in table \'Missile_Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::Missile_WeaponRow::Socket_Id::set(System::Int32 value) {
        this[this->tableMissile_Weapon->Socket_IdColumn] = value;
    }
    
    inline test::NewDataSet::SocketRow^  NewDataSet::Missile_WeaponRow::SocketRow::get() {
        return (cli::safe_cast<test::NewDataSet::SocketRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Socket_Missile_Weapon"])));
    }
    inline System::Void NewDataSet::Missile_WeaponRow::SocketRow::set(test::NewDataSet::SocketRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"Socket_Missile_Weapon"]);
    }
    
    inline ::System::Boolean NewDataSet::Missile_WeaponRow::IsdescriptionNull() {
        return this->IsNull(this->tableMissile_Weapon->descriptionColumn);
    }
    
    inline ::System::Void NewDataSet::Missile_WeaponRow::SetdescriptionNull() {
        this[this->tableMissile_Weapon->descriptionColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Missile_WeaponRow::IsidNull() {
        return this->IsNull(this->tableMissile_Weapon->idColumn);
    }
    
    inline ::System::Void NewDataSet::Missile_WeaponRow::SetidNull() {
        this[this->tableMissile_Weapon->idColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Missile_WeaponRow::IsnameNull() {
        return this->IsNull(this->tableMissile_Weapon->nameColumn);
    }
    
    inline ::System::Void NewDataSet::Missile_WeaponRow::SetnameNull() {
        this[this->tableMissile_Weapon->nameColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Missile_WeaponRow::IspictureSourceNull() {
        return this->IsNull(this->tableMissile_Weapon->pictureSourceColumn);
    }
    
    inline ::System::Void NewDataSet::Missile_WeaponRow::SetpictureSourceNull() {
        this[this->tableMissile_Weapon->pictureSourceColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Missile_WeaponRow::IsscaleNull() {
        return this->IsNull(this->tableMissile_Weapon->scaleColumn);
    }
    
    inline ::System::Void NewDataSet::Missile_WeaponRow::SetscaleNull() {
        this[this->tableMissile_Weapon->scaleColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Missile_WeaponRow::Isbase_angleNull() {
        return this->IsNull(this->tableMissile_Weapon->base_angleColumn);
    }
    
    inline ::System::Void NewDataSet::Missile_WeaponRow::Setbase_angleNull() {
        this[this->tableMissile_Weapon->base_angleColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Missile_WeaponRow::Iscurrent_angleNull() {
        return this->IsNull(this->tableMissile_Weapon->current_angleColumn);
    }
    
    inline ::System::Void NewDataSet::Missile_WeaponRow::Setcurrent_angleNull() {
        this[this->tableMissile_Weapon->current_angleColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Missile_WeaponRow::Istranslation_originNull() {
        return this->IsNull(this->tableMissile_Weapon->translation_originColumn);
    }
    
    inline ::System::Void NewDataSet::Missile_WeaponRow::Settranslation_originNull() {
        this[this->tableMissile_Weapon->translation_originColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Missile_WeaponRow::Isrotation_originNull() {
        return this->IsNull(this->tableMissile_Weapon->rotation_originColumn);
    }
    
    inline ::System::Void NewDataSet::Missile_WeaponRow::Setrotation_originNull() {
        this[this->tableMissile_Weapon->rotation_originColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Missile_WeaponRow::Istranslation_offset_xNull() {
        return this->IsNull(this->tableMissile_Weapon->translation_offset_xColumn);
    }
    
    inline ::System::Void NewDataSet::Missile_WeaponRow::Settranslation_offset_xNull() {
        this[this->tableMissile_Weapon->translation_offset_xColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Missile_WeaponRow::Istranslation_offset_yNull() {
        return this->IsNull(this->tableMissile_Weapon->translation_offset_yColumn);
    }
    
    inline ::System::Void NewDataSet::Missile_WeaponRow::Settranslation_offset_yNull() {
        this[this->tableMissile_Weapon->translation_offset_yColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Missile_WeaponRow::Isrotation_offset_xNull() {
        return this->IsNull(this->tableMissile_Weapon->rotation_offset_xColumn);
    }
    
    inline ::System::Void NewDataSet::Missile_WeaponRow::Setrotation_offset_xNull() {
        this[this->tableMissile_Weapon->rotation_offset_xColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Missile_WeaponRow::Isrotation_offset_yNull() {
        return this->IsNull(this->tableMissile_Weapon->rotation_offset_yColumn);
    }
    
    inline ::System::Void NewDataSet::Missile_WeaponRow::Setrotation_offset_yNull() {
        this[this->tableMissile_Weapon->rotation_offset_yColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Missile_WeaponRow::Ismissile_sizeNull() {
        return this->IsNull(this->tableMissile_Weapon->missile_sizeColumn);
    }
    
    inline ::System::Void NewDataSet::Missile_WeaponRow::Setmissile_sizeNull() {
        this[this->tableMissile_Weapon->missile_sizeColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Missile_WeaponRow::IsmultishotNull() {
        return this->IsNull(this->tableMissile_Weapon->multishotColumn);
    }
    
    inline ::System::Void NewDataSet::Missile_WeaponRow::SetmultishotNull() {
        this[this->tableMissile_Weapon->multishotColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Missile_WeaponRow::Ismissile_ammo_typeNull() {
        return this->IsNull(this->tableMissile_Weapon->missile_ammo_typeColumn);
    }
    
    inline ::System::Void NewDataSet::Missile_WeaponRow::Setmissile_ammo_typeNull() {
        this[this->tableMissile_Weapon->missile_ammo_typeColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Missile_WeaponRow::Ismissile_ammo_amountNull() {
        return this->IsNull(this->tableMissile_Weapon->missile_ammo_amountColumn);
    }
    
    inline ::System::Void NewDataSet::Missile_WeaponRow::Setmissile_ammo_amountNull() {
        this[this->tableMissile_Weapon->missile_ammo_amountColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Missile_WeaponRow::IsmovementHeadingNull() {
        return this->IsNull(this->tableMissile_Weapon->movementHeadingColumn);
    }
    
    inline ::System::Void NewDataSet::Missile_WeaponRow::SetmovementHeadingNull() {
        this[this->tableMissile_Weapon->movementHeadingColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Missile_WeaponRow::IsmovementSpeedNull() {
        return this->IsNull(this->tableMissile_Weapon->movementSpeedColumn);
    }
    
    inline ::System::Void NewDataSet::Missile_WeaponRow::SetmovementSpeedNull() {
        this[this->tableMissile_Weapon->movementSpeedColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Missile_WeaponRow::IsaccelerationMagnitudeNull() {
        return this->IsNull(this->tableMissile_Weapon->accelerationMagnitudeColumn);
    }
    
    inline ::System::Void NewDataSet::Missile_WeaponRow::SetaccelerationMagnitudeNull() {
        this[this->tableMissile_Weapon->accelerationMagnitudeColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Missile_WeaponRow::IsaccelerationHeadingNull() {
        return this->IsNull(this->tableMissile_Weapon->accelerationHeadingColumn);
    }
    
    inline ::System::Void NewDataSet::Missile_WeaponRow::SetaccelerationHeadingNull() {
        this[this->tableMissile_Weapon->accelerationHeadingColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::Missile_WeaponRow::IsSocket_IdNull() {
        return this->IsNull(this->tableMissile_Weapon->Socket_IdColumn);
    }
    
    inline ::System::Void NewDataSet::Missile_WeaponRow::SetSocket_IdNull() {
        this[this->tableMissile_Weapon->Socket_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::DeviceRow::DeviceRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableDevice = (cli::safe_cast<test::NewDataSet::DeviceDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::DeviceRow::description::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableDevice->descriptionColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'description\' in table \'Device\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::DeviceRow::description::set(System::String^  value) {
        this[this->tableDevice->descriptionColumn] = value;
    }
    
    inline System::String^  NewDataSet::DeviceRow::id::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableDevice->idColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'id\' in table \'Device\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::DeviceRow::id::set(System::String^  value) {
        this[this->tableDevice->idColumn] = value;
    }
    
    inline System::String^  NewDataSet::DeviceRow::name::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableDevice->nameColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'name\' in table \'Device\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::DeviceRow::name::set(System::String^  value) {
        this[this->tableDevice->nameColumn] = value;
    }
    
    inline System::String^  NewDataSet::DeviceRow::pictureSource::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableDevice->pictureSourceColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'pictureSource\' in table \'Device\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::DeviceRow::pictureSource::set(System::String^  value) {
        this[this->tableDevice->pictureSourceColumn] = value;
    }
    
    inline System::Int64 NewDataSet::DeviceRow::scale::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableDevice->scaleColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'scale\' in table \'Device\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::DeviceRow::scale::set(System::Int64 value) {
        this[this->tableDevice->scaleColumn] = value;
    }
    
    inline System::Int64 NewDataSet::DeviceRow::base_angle::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableDevice->base_angleColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'base_angle\' in table \'Device\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::DeviceRow::base_angle::set(System::Int64 value) {
        this[this->tableDevice->base_angleColumn] = value;
    }
    
    inline System::Int64 NewDataSet::DeviceRow::current_angle::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableDevice->current_angleColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'current_angle\' in table \'Device\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::DeviceRow::current_angle::set(System::Int64 value) {
        this[this->tableDevice->current_angleColumn] = value;
    }
    
    inline System::String^  NewDataSet::DeviceRow::translation_origin::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableDevice->translation_originColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'translation_origin\' in table \'Device\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::DeviceRow::translation_origin::set(System::String^  value) {
        this[this->tableDevice->translation_originColumn] = value;
    }
    
    inline System::String^  NewDataSet::DeviceRow::rotation_origin::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableDevice->rotation_originColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'rotation_origin\' in table \'Device\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::DeviceRow::rotation_origin::set(System::String^  value) {
        this[this->tableDevice->rotation_originColumn] = value;
    }
    
    inline System::Int64 NewDataSet::DeviceRow::translation_offset_x::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableDevice->translation_offset_xColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'translation_offset_x\' in table \'Device\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::DeviceRow::translation_offset_x::set(System::Int64 value) {
        this[this->tableDevice->translation_offset_xColumn] = value;
    }
    
    inline System::Int64 NewDataSet::DeviceRow::translation_offset_y::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableDevice->translation_offset_yColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'translation_offset_y\' in table \'Device\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::DeviceRow::translation_offset_y::set(System::Int64 value) {
        this[this->tableDevice->translation_offset_yColumn] = value;
    }
    
    inline System::Int64 NewDataSet::DeviceRow::rotation_offset_x::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableDevice->rotation_offset_xColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'rotation_offset_x\' in table \'Device\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::DeviceRow::rotation_offset_x::set(System::Int64 value) {
        this[this->tableDevice->rotation_offset_xColumn] = value;
    }
    
    inline System::Int64 NewDataSet::DeviceRow::rotation_offset_y::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableDevice->rotation_offset_yColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'rotation_offset_y\' in table \'Device\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::DeviceRow::rotation_offset_y::set(System::Int64 value) {
        this[this->tableDevice->rotation_offset_yColumn] = value;
    }
    
    inline System::Int64 NewDataSet::DeviceRow::movementHeading::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableDevice->movementHeadingColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'movementHeading\' in table \'Device\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::DeviceRow::movementHeading::set(System::Int64 value) {
        this[this->tableDevice->movementHeadingColumn] = value;
    }
    
    inline System::Int64 NewDataSet::DeviceRow::movementSpeed::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableDevice->movementSpeedColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'movementSpeed\' in table \'Device\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::DeviceRow::movementSpeed::set(System::Int64 value) {
        this[this->tableDevice->movementSpeedColumn] = value;
    }
    
    inline System::Int64 NewDataSet::DeviceRow::accelerationMagnitude::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableDevice->accelerationMagnitudeColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'accelerationMagnitude\' in table \'Device\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::DeviceRow::accelerationMagnitude::set(System::Int64 value) {
        this[this->tableDevice->accelerationMagnitudeColumn] = value;
    }
    
    inline System::Int64 NewDataSet::DeviceRow::accelerationHeading::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableDevice->accelerationHeadingColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'accelerationHeading\' in table \'Device\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::DeviceRow::accelerationHeading::set(System::Int64 value) {
        this[this->tableDevice->accelerationHeadingColumn] = value;
    }
    
    inline System::String^  NewDataSet::DeviceRow::subtype::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableDevice->subtypeColumn]));
    }
    inline System::Void NewDataSet::DeviceRow::subtype::set(System::String^  value) {
        this[this->tableDevice->subtypeColumn] = value;
    }
    
    inline System::Int32 NewDataSet::DeviceRow::Socket_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableDevice->Socket_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Socket_Id\' in table \'Device\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::DeviceRow::Socket_Id::set(System::Int32 value) {
        this[this->tableDevice->Socket_IdColumn] = value;
    }
    
    inline test::NewDataSet::SocketRow^  NewDataSet::DeviceRow::SocketRow::get() {
        return (cli::safe_cast<test::NewDataSet::SocketRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Socket_Device"])));
    }
    inline System::Void NewDataSet::DeviceRow::SocketRow::set(test::NewDataSet::SocketRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"Socket_Device"]);
    }
    
    inline ::System::Boolean NewDataSet::DeviceRow::IsdescriptionNull() {
        return this->IsNull(this->tableDevice->descriptionColumn);
    }
    
    inline ::System::Void NewDataSet::DeviceRow::SetdescriptionNull() {
        this[this->tableDevice->descriptionColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::DeviceRow::IsidNull() {
        return this->IsNull(this->tableDevice->idColumn);
    }
    
    inline ::System::Void NewDataSet::DeviceRow::SetidNull() {
        this[this->tableDevice->idColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::DeviceRow::IsnameNull() {
        return this->IsNull(this->tableDevice->nameColumn);
    }
    
    inline ::System::Void NewDataSet::DeviceRow::SetnameNull() {
        this[this->tableDevice->nameColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::DeviceRow::IspictureSourceNull() {
        return this->IsNull(this->tableDevice->pictureSourceColumn);
    }
    
    inline ::System::Void NewDataSet::DeviceRow::SetpictureSourceNull() {
        this[this->tableDevice->pictureSourceColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::DeviceRow::IsscaleNull() {
        return this->IsNull(this->tableDevice->scaleColumn);
    }
    
    inline ::System::Void NewDataSet::DeviceRow::SetscaleNull() {
        this[this->tableDevice->scaleColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::DeviceRow::Isbase_angleNull() {
        return this->IsNull(this->tableDevice->base_angleColumn);
    }
    
    inline ::System::Void NewDataSet::DeviceRow::Setbase_angleNull() {
        this[this->tableDevice->base_angleColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::DeviceRow::Iscurrent_angleNull() {
        return this->IsNull(this->tableDevice->current_angleColumn);
    }
    
    inline ::System::Void NewDataSet::DeviceRow::Setcurrent_angleNull() {
        this[this->tableDevice->current_angleColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::DeviceRow::Istranslation_originNull() {
        return this->IsNull(this->tableDevice->translation_originColumn);
    }
    
    inline ::System::Void NewDataSet::DeviceRow::Settranslation_originNull() {
        this[this->tableDevice->translation_originColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::DeviceRow::Isrotation_originNull() {
        return this->IsNull(this->tableDevice->rotation_originColumn);
    }
    
    inline ::System::Void NewDataSet::DeviceRow::Setrotation_originNull() {
        this[this->tableDevice->rotation_originColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::DeviceRow::Istranslation_offset_xNull() {
        return this->IsNull(this->tableDevice->translation_offset_xColumn);
    }
    
    inline ::System::Void NewDataSet::DeviceRow::Settranslation_offset_xNull() {
        this[this->tableDevice->translation_offset_xColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::DeviceRow::Istranslation_offset_yNull() {
        return this->IsNull(this->tableDevice->translation_offset_yColumn);
    }
    
    inline ::System::Void NewDataSet::DeviceRow::Settranslation_offset_yNull() {
        this[this->tableDevice->translation_offset_yColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::DeviceRow::Isrotation_offset_xNull() {
        return this->IsNull(this->tableDevice->rotation_offset_xColumn);
    }
    
    inline ::System::Void NewDataSet::DeviceRow::Setrotation_offset_xNull() {
        this[this->tableDevice->rotation_offset_xColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::DeviceRow::Isrotation_offset_yNull() {
        return this->IsNull(this->tableDevice->rotation_offset_yColumn);
    }
    
    inline ::System::Void NewDataSet::DeviceRow::Setrotation_offset_yNull() {
        this[this->tableDevice->rotation_offset_yColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::DeviceRow::IsmovementHeadingNull() {
        return this->IsNull(this->tableDevice->movementHeadingColumn);
    }
    
    inline ::System::Void NewDataSet::DeviceRow::SetmovementHeadingNull() {
        this[this->tableDevice->movementHeadingColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::DeviceRow::IsmovementSpeedNull() {
        return this->IsNull(this->tableDevice->movementSpeedColumn);
    }
    
    inline ::System::Void NewDataSet::DeviceRow::SetmovementSpeedNull() {
        this[this->tableDevice->movementSpeedColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::DeviceRow::IsaccelerationMagnitudeNull() {
        return this->IsNull(this->tableDevice->accelerationMagnitudeColumn);
    }
    
    inline ::System::Void NewDataSet::DeviceRow::SetaccelerationMagnitudeNull() {
        this[this->tableDevice->accelerationMagnitudeColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::DeviceRow::IsaccelerationHeadingNull() {
        return this->IsNull(this->tableDevice->accelerationHeadingColumn);
    }
    
    inline ::System::Void NewDataSet::DeviceRow::SetaccelerationHeadingNull() {
        this[this->tableDevice->accelerationHeadingColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::DeviceRow::IsSocket_IdNull() {
        return this->IsNull(this->tableDevice->Socket_IdColumn);
    }
    
    inline ::System::Void NewDataSet::DeviceRow::SetSocket_IdNull() {
        this[this->tableDevice->Socket_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::EngineRow::EngineRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableEngine = (cli::safe_cast<test::NewDataSet::EngineDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::EngineRow::description::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableEngine->descriptionColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'description\' in table \'Engine\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::EngineRow::description::set(System::String^  value) {
        this[this->tableEngine->descriptionColumn] = value;
    }
    
    inline System::String^  NewDataSet::EngineRow::id::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableEngine->idColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'id\' in table \'Engine\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::EngineRow::id::set(System::String^  value) {
        this[this->tableEngine->idColumn] = value;
    }
    
    inline System::String^  NewDataSet::EngineRow::name::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableEngine->nameColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'name\' in table \'Engine\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::EngineRow::name::set(System::String^  value) {
        this[this->tableEngine->nameColumn] = value;
    }
    
    inline System::String^  NewDataSet::EngineRow::pictureSource::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableEngine->pictureSourceColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'pictureSource\' in table \'Engine\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::EngineRow::pictureSource::set(System::String^  value) {
        this[this->tableEngine->pictureSourceColumn] = value;
    }
    
    inline System::Int64 NewDataSet::EngineRow::scale::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableEngine->scaleColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'scale\' in table \'Engine\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::EngineRow::scale::set(System::Int64 value) {
        this[this->tableEngine->scaleColumn] = value;
    }
    
    inline System::Int64 NewDataSet::EngineRow::base_angle::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableEngine->base_angleColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'base_angle\' in table \'Engine\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::EngineRow::base_angle::set(System::Int64 value) {
        this[this->tableEngine->base_angleColumn] = value;
    }
    
    inline System::Int64 NewDataSet::EngineRow::current_angle::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableEngine->current_angleColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'current_angle\' in table \'Engine\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::EngineRow::current_angle::set(System::Int64 value) {
        this[this->tableEngine->current_angleColumn] = value;
    }
    
    inline System::String^  NewDataSet::EngineRow::translation_origin::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableEngine->translation_originColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'translation_origin\' in table \'Engine\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::EngineRow::translation_origin::set(System::String^  value) {
        this[this->tableEngine->translation_originColumn] = value;
    }
    
    inline System::String^  NewDataSet::EngineRow::rotation_origin::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableEngine->rotation_originColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'rotation_origin\' in table \'Engine\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::EngineRow::rotation_origin::set(System::String^  value) {
        this[this->tableEngine->rotation_originColumn] = value;
    }
    
    inline System::Int64 NewDataSet::EngineRow::translation_offset_x::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableEngine->translation_offset_xColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'translation_offset_x\' in table \'Engine\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::EngineRow::translation_offset_x::set(System::Int64 value) {
        this[this->tableEngine->translation_offset_xColumn] = value;
    }
    
    inline System::Int64 NewDataSet::EngineRow::translation_offset_y::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableEngine->translation_offset_yColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'translation_offset_y\' in table \'Engine\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::EngineRow::translation_offset_y::set(System::Int64 value) {
        this[this->tableEngine->translation_offset_yColumn] = value;
    }
    
    inline System::Int64 NewDataSet::EngineRow::rotation_offset_x::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableEngine->rotation_offset_xColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'rotation_offset_x\' in table \'Engine\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::EngineRow::rotation_offset_x::set(System::Int64 value) {
        this[this->tableEngine->rotation_offset_xColumn] = value;
    }
    
    inline System::Int64 NewDataSet::EngineRow::rotation_offset_y::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableEngine->rotation_offset_yColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'rotation_offset_y\' in table \'Engine\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::EngineRow::rotation_offset_y::set(System::Int64 value) {
        this[this->tableEngine->rotation_offset_yColumn] = value;
    }
    
    inline System::Int64 NewDataSet::EngineRow::movementHeading::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableEngine->movementHeadingColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'movementHeading\' in table \'Engine\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::EngineRow::movementHeading::set(System::Int64 value) {
        this[this->tableEngine->movementHeadingColumn] = value;
    }
    
    inline System::Int64 NewDataSet::EngineRow::movementSpeed::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableEngine->movementSpeedColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'movementSpeed\' in table \'Engine\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::EngineRow::movementSpeed::set(System::Int64 value) {
        this[this->tableEngine->movementSpeedColumn] = value;
    }
    
    inline System::Int64 NewDataSet::EngineRow::accelerationMagnitude::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableEngine->accelerationMagnitudeColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'accelerationMagnitude\' in table \'Engine\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::EngineRow::accelerationMagnitude::set(System::Int64 value) {
        this[this->tableEngine->accelerationMagnitudeColumn] = value;
    }
    
    inline System::Int64 NewDataSet::EngineRow::accelerationHeading::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tableEngine->accelerationHeadingColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'accelerationHeading\' in table \'Engine\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::EngineRow::accelerationHeading::set(System::Int64 value) {
        this[this->tableEngine->accelerationHeadingColumn] = value;
    }
    
    inline System::String^  NewDataSet::EngineRow::subtype::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableEngine->subtypeColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'subtype\' in table \'Engine\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::EngineRow::subtype::set(System::String^  value) {
        this[this->tableEngine->subtypeColumn] = value;
    }
    
    inline System::Int32 NewDataSet::EngineRow::Socket_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableEngine->Socket_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Socket_Id\' in table \'Engine\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::EngineRow::Socket_Id::set(System::Int32 value) {
        this[this->tableEngine->Socket_IdColumn] = value;
    }
    
    inline test::NewDataSet::SocketRow^  NewDataSet::EngineRow::SocketRow::get() {
        return (cli::safe_cast<test::NewDataSet::SocketRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Socket_Engine"])));
    }
    inline System::Void NewDataSet::EngineRow::SocketRow::set(test::NewDataSet::SocketRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"Socket_Engine"]);
    }
    
    inline ::System::Boolean NewDataSet::EngineRow::IsdescriptionNull() {
        return this->IsNull(this->tableEngine->descriptionColumn);
    }
    
    inline ::System::Void NewDataSet::EngineRow::SetdescriptionNull() {
        this[this->tableEngine->descriptionColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::EngineRow::IsidNull() {
        return this->IsNull(this->tableEngine->idColumn);
    }
    
    inline ::System::Void NewDataSet::EngineRow::SetidNull() {
        this[this->tableEngine->idColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::EngineRow::IsnameNull() {
        return this->IsNull(this->tableEngine->nameColumn);
    }
    
    inline ::System::Void NewDataSet::EngineRow::SetnameNull() {
        this[this->tableEngine->nameColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::EngineRow::IspictureSourceNull() {
        return this->IsNull(this->tableEngine->pictureSourceColumn);
    }
    
    inline ::System::Void NewDataSet::EngineRow::SetpictureSourceNull() {
        this[this->tableEngine->pictureSourceColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::EngineRow::IsscaleNull() {
        return this->IsNull(this->tableEngine->scaleColumn);
    }
    
    inline ::System::Void NewDataSet::EngineRow::SetscaleNull() {
        this[this->tableEngine->scaleColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::EngineRow::Isbase_angleNull() {
        return this->IsNull(this->tableEngine->base_angleColumn);
    }
    
    inline ::System::Void NewDataSet::EngineRow::Setbase_angleNull() {
        this[this->tableEngine->base_angleColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::EngineRow::Iscurrent_angleNull() {
        return this->IsNull(this->tableEngine->current_angleColumn);
    }
    
    inline ::System::Void NewDataSet::EngineRow::Setcurrent_angleNull() {
        this[this->tableEngine->current_angleColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::EngineRow::Istranslation_originNull() {
        return this->IsNull(this->tableEngine->translation_originColumn);
    }
    
    inline ::System::Void NewDataSet::EngineRow::Settranslation_originNull() {
        this[this->tableEngine->translation_originColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::EngineRow::Isrotation_originNull() {
        return this->IsNull(this->tableEngine->rotation_originColumn);
    }
    
    inline ::System::Void NewDataSet::EngineRow::Setrotation_originNull() {
        this[this->tableEngine->rotation_originColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::EngineRow::Istranslation_offset_xNull() {
        return this->IsNull(this->tableEngine->translation_offset_xColumn);
    }
    
    inline ::System::Void NewDataSet::EngineRow::Settranslation_offset_xNull() {
        this[this->tableEngine->translation_offset_xColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::EngineRow::Istranslation_offset_yNull() {
        return this->IsNull(this->tableEngine->translation_offset_yColumn);
    }
    
    inline ::System::Void NewDataSet::EngineRow::Settranslation_offset_yNull() {
        this[this->tableEngine->translation_offset_yColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::EngineRow::Isrotation_offset_xNull() {
        return this->IsNull(this->tableEngine->rotation_offset_xColumn);
    }
    
    inline ::System::Void NewDataSet::EngineRow::Setrotation_offset_xNull() {
        this[this->tableEngine->rotation_offset_xColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::EngineRow::Isrotation_offset_yNull() {
        return this->IsNull(this->tableEngine->rotation_offset_yColumn);
    }
    
    inline ::System::Void NewDataSet::EngineRow::Setrotation_offset_yNull() {
        this[this->tableEngine->rotation_offset_yColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::EngineRow::IsmovementHeadingNull() {
        return this->IsNull(this->tableEngine->movementHeadingColumn);
    }
    
    inline ::System::Void NewDataSet::EngineRow::SetmovementHeadingNull() {
        this[this->tableEngine->movementHeadingColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::EngineRow::IsmovementSpeedNull() {
        return this->IsNull(this->tableEngine->movementSpeedColumn);
    }
    
    inline ::System::Void NewDataSet::EngineRow::SetmovementSpeedNull() {
        this[this->tableEngine->movementSpeedColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::EngineRow::IsaccelerationMagnitudeNull() {
        return this->IsNull(this->tableEngine->accelerationMagnitudeColumn);
    }
    
    inline ::System::Void NewDataSet::EngineRow::SetaccelerationMagnitudeNull() {
        this[this->tableEngine->accelerationMagnitudeColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::EngineRow::IsaccelerationHeadingNull() {
        return this->IsNull(this->tableEngine->accelerationHeadingColumn);
    }
    
    inline ::System::Void NewDataSet::EngineRow::SetaccelerationHeadingNull() {
        this[this->tableEngine->accelerationHeadingColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::EngineRow::IssubtypeNull() {
        return this->IsNull(this->tableEngine->subtypeColumn);
    }
    
    inline ::System::Void NewDataSet::EngineRow::SetsubtypeNull() {
        this[this->tableEngine->subtypeColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::EngineRow::IsSocket_IdNull() {
        return this->IsNull(this->tableEngine->Socket_IdColumn);
    }
    
    inline ::System::Void NewDataSet::EngineRow::SetSocket_IdNull() {
        this[this->tableEngine->Socket_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::PowerplantRow::PowerplantRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablePowerplant = (cli::safe_cast<test::NewDataSet::PowerplantDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::PowerplantRow::description::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablePowerplant->descriptionColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'description\' in table \'Powerplant\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::PowerplantRow::description::set(System::String^  value) {
        this[this->tablePowerplant->descriptionColumn] = value;
    }
    
    inline System::String^  NewDataSet::PowerplantRow::id::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablePowerplant->idColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'id\' in table \'Powerplant\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::PowerplantRow::id::set(System::String^  value) {
        this[this->tablePowerplant->idColumn] = value;
    }
    
    inline System::String^  NewDataSet::PowerplantRow::name::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablePowerplant->nameColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'name\' in table \'Powerplant\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::PowerplantRow::name::set(System::String^  value) {
        this[this->tablePowerplant->nameColumn] = value;
    }
    
    inline System::String^  NewDataSet::PowerplantRow::pictureSource::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablePowerplant->pictureSourceColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'pictureSource\' in table \'Powerplant\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::PowerplantRow::pictureSource::set(System::String^  value) {
        this[this->tablePowerplant->pictureSourceColumn] = value;
    }
    
    inline System::Int64 NewDataSet::PowerplantRow::scale::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tablePowerplant->scaleColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'scale\' in table \'Powerplant\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::PowerplantRow::scale::set(System::Int64 value) {
        this[this->tablePowerplant->scaleColumn] = value;
    }
    
    inline System::Int64 NewDataSet::PowerplantRow::base_angle::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tablePowerplant->base_angleColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'base_angle\' in table \'Powerplant\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::PowerplantRow::base_angle::set(System::Int64 value) {
        this[this->tablePowerplant->base_angleColumn] = value;
    }
    
    inline System::Int64 NewDataSet::PowerplantRow::current_angle::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tablePowerplant->current_angleColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'current_angle\' in table \'Powerplant\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::PowerplantRow::current_angle::set(System::Int64 value) {
        this[this->tablePowerplant->current_angleColumn] = value;
    }
    
    inline System::String^  NewDataSet::PowerplantRow::translation_origin::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablePowerplant->translation_originColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'translation_origin\' in table \'Powerplant\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::PowerplantRow::translation_origin::set(System::String^  value) {
        this[this->tablePowerplant->translation_originColumn] = value;
    }
    
    inline System::String^  NewDataSet::PowerplantRow::rotation_origin::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablePowerplant->rotation_originColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'rotation_origin\' in table \'Powerplant\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::PowerplantRow::rotation_origin::set(System::String^  value) {
        this[this->tablePowerplant->rotation_originColumn] = value;
    }
    
    inline System::Int64 NewDataSet::PowerplantRow::translation_offset_x::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tablePowerplant->translation_offset_xColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'translation_offset_x\' in table \'Powerplant\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::PowerplantRow::translation_offset_x::set(System::Int64 value) {
        this[this->tablePowerplant->translation_offset_xColumn] = value;
    }
    
    inline System::Int64 NewDataSet::PowerplantRow::translation_offset_y::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tablePowerplant->translation_offset_yColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'translation_offset_y\' in table \'Powerplant\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::PowerplantRow::translation_offset_y::set(System::Int64 value) {
        this[this->tablePowerplant->translation_offset_yColumn] = value;
    }
    
    inline System::Int64 NewDataSet::PowerplantRow::rotation_offset_x::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tablePowerplant->rotation_offset_xColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'rotation_offset_x\' in table \'Powerplant\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::PowerplantRow::rotation_offset_x::set(System::Int64 value) {
        this[this->tablePowerplant->rotation_offset_xColumn] = value;
    }
    
    inline System::Int64 NewDataSet::PowerplantRow::rotation_offset_y::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tablePowerplant->rotation_offset_yColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'rotation_offset_y\' in table \'Powerplant\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::PowerplantRow::rotation_offset_y::set(System::Int64 value) {
        this[this->tablePowerplant->rotation_offset_yColumn] = value;
    }
    
    inline System::String^  NewDataSet::PowerplantRow::subtype::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablePowerplant->subtypeColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'subtype\' in table \'Powerplant\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::PowerplantRow::subtype::set(System::String^  value) {
        this[this->tablePowerplant->subtypeColumn] = value;
    }
    
    inline System::String^  NewDataSet::PowerplantRow::capacitor_type::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablePowerplant->capacitor_typeColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'capacitor_type\' in table \'Powerplant\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::PowerplantRow::capacitor_type::set(System::String^  value) {
        this[this->tablePowerplant->capacitor_typeColumn] = value;
    }
    
    inline System::Int64 NewDataSet::PowerplantRow::capacitor_amount::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tablePowerplant->capacitor_amountColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'capacitor_amount\' in table \'Powerplant\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::PowerplantRow::capacitor_amount::set(System::Int64 value) {
        this[this->tablePowerplant->capacitor_amountColumn] = value;
    }
    
    inline System::Int64 NewDataSet::PowerplantRow::movementHeading::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tablePowerplant->movementHeadingColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'movementHeading\' in table \'Powerplant\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::PowerplantRow::movementHeading::set(System::Int64 value) {
        this[this->tablePowerplant->movementHeadingColumn] = value;
    }
    
    inline System::Int64 NewDataSet::PowerplantRow::movementSpeed::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tablePowerplant->movementSpeedColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'movementSpeed\' in table \'Powerplant\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::PowerplantRow::movementSpeed::set(System::Int64 value) {
        this[this->tablePowerplant->movementSpeedColumn] = value;
    }
    
    inline System::Int64 NewDataSet::PowerplantRow::accelerationMagnitude::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tablePowerplant->accelerationMagnitudeColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'accelerationMagnitude\' in table \'Powerplant\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::PowerplantRow::accelerationMagnitude::set(System::Int64 value) {
        this[this->tablePowerplant->accelerationMagnitudeColumn] = value;
    }
    
    inline System::Int64 NewDataSet::PowerplantRow::accelerationHeading::get() {
        try {
            return (cli::safe_cast<::System::Int64 >(this[this->tablePowerplant->accelerationHeadingColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'accelerationHeading\' in table \'Powerplant\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::PowerplantRow::accelerationHeading::set(System::Int64 value) {
        this[this->tablePowerplant->accelerationHeadingColumn] = value;
    }
    
    inline System::Int32 NewDataSet::PowerplantRow::Socket_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablePowerplant->Socket_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Socket_Id\' in table \'Powerplant\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::PowerplantRow::Socket_Id::set(System::Int32 value) {
        this[this->tablePowerplant->Socket_IdColumn] = value;
    }
    
    inline test::NewDataSet::SocketRow^  NewDataSet::PowerplantRow::SocketRow::get() {
        return (cli::safe_cast<test::NewDataSet::SocketRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Socket_Powerplant"])));
    }
    inline System::Void NewDataSet::PowerplantRow::SocketRow::set(test::NewDataSet::SocketRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"Socket_Powerplant"]);
    }
    
    inline ::System::Boolean NewDataSet::PowerplantRow::IsdescriptionNull() {
        return this->IsNull(this->tablePowerplant->descriptionColumn);
    }
    
    inline ::System::Void NewDataSet::PowerplantRow::SetdescriptionNull() {
        this[this->tablePowerplant->descriptionColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::PowerplantRow::IsidNull() {
        return this->IsNull(this->tablePowerplant->idColumn);
    }
    
    inline ::System::Void NewDataSet::PowerplantRow::SetidNull() {
        this[this->tablePowerplant->idColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::PowerplantRow::IsnameNull() {
        return this->IsNull(this->tablePowerplant->nameColumn);
    }
    
    inline ::System::Void NewDataSet::PowerplantRow::SetnameNull() {
        this[this->tablePowerplant->nameColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::PowerplantRow::IspictureSourceNull() {
        return this->IsNull(this->tablePowerplant->pictureSourceColumn);
    }
    
    inline ::System::Void NewDataSet::PowerplantRow::SetpictureSourceNull() {
        this[this->tablePowerplant->pictureSourceColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::PowerplantRow::IsscaleNull() {
        return this->IsNull(this->tablePowerplant->scaleColumn);
    }
    
    inline ::System::Void NewDataSet::PowerplantRow::SetscaleNull() {
        this[this->tablePowerplant->scaleColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::PowerplantRow::Isbase_angleNull() {
        return this->IsNull(this->tablePowerplant->base_angleColumn);
    }
    
    inline ::System::Void NewDataSet::PowerplantRow::Setbase_angleNull() {
        this[this->tablePowerplant->base_angleColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::PowerplantRow::Iscurrent_angleNull() {
        return this->IsNull(this->tablePowerplant->current_angleColumn);
    }
    
    inline ::System::Void NewDataSet::PowerplantRow::Setcurrent_angleNull() {
        this[this->tablePowerplant->current_angleColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::PowerplantRow::Istranslation_originNull() {
        return this->IsNull(this->tablePowerplant->translation_originColumn);
    }
    
    inline ::System::Void NewDataSet::PowerplantRow::Settranslation_originNull() {
        this[this->tablePowerplant->translation_originColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::PowerplantRow::Isrotation_originNull() {
        return this->IsNull(this->tablePowerplant->rotation_originColumn);
    }
    
    inline ::System::Void NewDataSet::PowerplantRow::Setrotation_originNull() {
        this[this->tablePowerplant->rotation_originColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::PowerplantRow::Istranslation_offset_xNull() {
        return this->IsNull(this->tablePowerplant->translation_offset_xColumn);
    }
    
    inline ::System::Void NewDataSet::PowerplantRow::Settranslation_offset_xNull() {
        this[this->tablePowerplant->translation_offset_xColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::PowerplantRow::Istranslation_offset_yNull() {
        return this->IsNull(this->tablePowerplant->translation_offset_yColumn);
    }
    
    inline ::System::Void NewDataSet::PowerplantRow::Settranslation_offset_yNull() {
        this[this->tablePowerplant->translation_offset_yColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::PowerplantRow::Isrotation_offset_xNull() {
        return this->IsNull(this->tablePowerplant->rotation_offset_xColumn);
    }
    
    inline ::System::Void NewDataSet::PowerplantRow::Setrotation_offset_xNull() {
        this[this->tablePowerplant->rotation_offset_xColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::PowerplantRow::Isrotation_offset_yNull() {
        return this->IsNull(this->tablePowerplant->rotation_offset_yColumn);
    }
    
    inline ::System::Void NewDataSet::PowerplantRow::Setrotation_offset_yNull() {
        this[this->tablePowerplant->rotation_offset_yColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::PowerplantRow::IssubtypeNull() {
        return this->IsNull(this->tablePowerplant->subtypeColumn);
    }
    
    inline ::System::Void NewDataSet::PowerplantRow::SetsubtypeNull() {
        this[this->tablePowerplant->subtypeColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::PowerplantRow::Iscapacitor_typeNull() {
        return this->IsNull(this->tablePowerplant->capacitor_typeColumn);
    }
    
    inline ::System::Void NewDataSet::PowerplantRow::Setcapacitor_typeNull() {
        this[this->tablePowerplant->capacitor_typeColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::PowerplantRow::Iscapacitor_amountNull() {
        return this->IsNull(this->tablePowerplant->capacitor_amountColumn);
    }
    
    inline ::System::Void NewDataSet::PowerplantRow::Setcapacitor_amountNull() {
        this[this->tablePowerplant->capacitor_amountColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::PowerplantRow::IsmovementHeadingNull() {
        return this->IsNull(this->tablePowerplant->movementHeadingColumn);
    }
    
    inline ::System::Void NewDataSet::PowerplantRow::SetmovementHeadingNull() {
        this[this->tablePowerplant->movementHeadingColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::PowerplantRow::IsmovementSpeedNull() {
        return this->IsNull(this->tablePowerplant->movementSpeedColumn);
    }
    
    inline ::System::Void NewDataSet::PowerplantRow::SetmovementSpeedNull() {
        this[this->tablePowerplant->movementSpeedColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::PowerplantRow::IsaccelerationMagnitudeNull() {
        return this->IsNull(this->tablePowerplant->accelerationMagnitudeColumn);
    }
    
    inline ::System::Void NewDataSet::PowerplantRow::SetaccelerationMagnitudeNull() {
        this[this->tablePowerplant->accelerationMagnitudeColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::PowerplantRow::IsaccelerationHeadingNull() {
        return this->IsNull(this->tablePowerplant->accelerationHeadingColumn);
    }
    
    inline ::System::Void NewDataSet::PowerplantRow::SetaccelerationHeadingNull() {
        this[this->tablePowerplant->accelerationHeadingColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::PowerplantRow::IsSocket_IdNull() {
        return this->IsNull(this->tablePowerplant->Socket_IdColumn);
    }
    
    inline ::System::Void NewDataSet::PowerplantRow::SetSocket_IdNull() {
        this[this->tablePowerplant->Socket_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::WorldStateRowChangeEvent::WorldStateRowChangeEvent(test::NewDataSet::WorldStateRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline test::NewDataSet::WorldStateRow^  NewDataSet::WorldStateRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::WorldStateRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::EntityRowChangeEvent::EntityRowChangeEvent(test::NewDataSet::EntityRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline test::NewDataSet::EntityRow^  NewDataSet::EntityRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::EntityRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::BaseImageRowChangeEvent::BaseImageRowChangeEvent(test::NewDataSet::BaseImageRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline test::NewDataSet::BaseImageRow^  NewDataSet::BaseImageRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::BaseImageRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::SocketRowChangeEvent::SocketRowChangeEvent(test::NewDataSet::SocketRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline test::NewDataSet::SocketRow^  NewDataSet::SocketRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::SocketRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::Beam_WeaponRowChangeEvent::Beam_WeaponRowChangeEvent(test::NewDataSet::Beam_WeaponRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline test::NewDataSet::Beam_WeaponRow^  NewDataSet::Beam_WeaponRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::Beam_WeaponRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::Gun_WeaponRowChangeEvent::Gun_WeaponRowChangeEvent(test::NewDataSet::Gun_WeaponRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline test::NewDataSet::Gun_WeaponRow^  NewDataSet::Gun_WeaponRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::Gun_WeaponRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::Missile_WeaponRowChangeEvent::Missile_WeaponRowChangeEvent(test::NewDataSet::Missile_WeaponRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline test::NewDataSet::Missile_WeaponRow^  NewDataSet::Missile_WeaponRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::Missile_WeaponRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::DeviceRowChangeEvent::DeviceRowChangeEvent(test::NewDataSet::DeviceRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline test::NewDataSet::DeviceRow^  NewDataSet::DeviceRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::DeviceRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::EngineRowChangeEvent::EngineRowChangeEvent(test::NewDataSet::EngineRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline test::NewDataSet::EngineRow^  NewDataSet::EngineRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::EngineRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::PowerplantRowChangeEvent::PowerplantRowChangeEvent(test::NewDataSet::PowerplantRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline test::NewDataSet::PowerplantRow^  NewDataSet::PowerplantRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::PowerplantRowChangeEvent::Action::get() {
        return this->eventAction;
    }
}
